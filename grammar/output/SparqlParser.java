// $ANTLR 3.2 Sep 23, 2009 12:02:23 /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g 2013-08-07 14:15:47

    package es.upm.fi.dia.oeg.ogsadai.sparql.parser.antlr;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

import org.antlr.runtime.debug.*;
import java.io.IOException;

import org.antlr.runtime.tree.*;

/**
 * @author Simone Tripodi   (simone.tripodi)
 * @author Michele Mostarda (michele.mostarda)
 * @author Juergen Pfundt   (Juergen.Pfundt)
 * @version $Id: Sparql.g 538 2012-04-01 20:39:46Z Juergen.Pfundt@gmail.com $
 */
public class SparqlParser extends DebugParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ANON", "NIL", "AGGREGATE", "BOOLEANLITERAL", "NUMERICLITERAL", "RDFLITERAL", "IRIORREF", "BRACKETS", "RELATIONALEXPRESSION", "CALL", "BUILTINCALL", "EXPRESSION", "QUERY", "UPDATE", "PROLOGUE", "MODIFY", "SUBSELECT", "FROM_CLAUSE", "SELECT_CLAUSE", "WHERE_CLAUSE", "VAR", "GROUP_BY", "GROUP_CONDITION", "ORDER_BY", "ORDER_CONDITION", "BINDING_VALUE", "TRIPLES_TEMPLATE", "TRIPLES_BLOCK", "GROUP_GRAPH_PATTERN", "ARG_LIST", "EXPRESSION_LIST", "CONSTRUCT_TRIPLES", "TRIPLES_NODE", "COLLECTION", "TRIPLES_SAME_SUBJECT", "SUBJECT", "PREDICATE", "OBJECT", "NOT_EXISTS", "FUNCTION", "PATH", "PATH_ELT_OR_INVERSE", "PATH_MOD", "PATH_SEQUENCE", "PATH_PRIMARY", "PATH_NEGATED", "BRACKETTED_EXPRESSION", "UNARY", "BLANK_NODE", "PNAME", "TERM", "FROM", "TERM_NO_PREFIX", "SOLUTION_MODIFIER", "SELECT_LIST", "PROPERTY_LIST", "SELECT_QUERY", "CONSTRUCT_QUERY", "DESCRIBE_QUERY", "ASK_QUERY", "BINDINGS_CLAUSE", "SEMICOLON", "BASE", "IRI_REF", "PREFIX", "PNAME_NS", "SELECT", "ASTERISK", "DISTINCT", "REDUCED", "OPEN_BRACE", "AS", "CLOSE_BRACE", "CONSTRUCT", "WHERE", "OPEN_CURLY_BRACE", "CLOSE_CURLY_BRACE", "DESCRIBE", "ASK", "NAMED", "GROUP", "BY", "HAVING", "ORDER", "ASC", "DESC", "LIMIT", "INTEGER", "OFFSET", "BINDINGS", "UNDEF", "LOAD", "SILENT", "INTO", "CLEAR", "DROP", "CREATE", "ADD", "TO", "MOVE", "COPY", "INSERT", "DATA", "DELETE", "WITH", "USING", "DEFAULT", "GRAPH", "ALL", "DOT", "OPTIONAL", "SERVICE", "BIND", "MINUS_KEYWORD", "UNION", "FILTER", "COMMA", "A", "PIPE", "DIVIDE", "INVERSE", "QUESTION_MARK", "PLUS", "NEGATION", "OPEN_SQUARE_BRACKET", "CLOSE_SQUARE_BRACKET", "VAR1", "VAR2", "OR", "AND", "EQUAL", "NOT_EQUAL", "LESS", "GREATER", "LESS_EQUAL", "GREATER_EQUAL", "IN", "NOT", "MINUS", "STR", "LANG", "LANGMATCHES", "DATATYPE", "BOUND", "IRI", "URI", "BNODE", "RAND", "ABS", "CEIL", "FLOOR", "ROUND", "CONCAT", "STRLEN", "UCASE", "LCASE", "ENCODE_FOR_URI", "CONTAINS", "STRSTARTS", "STRENDS", "STRBEFORE", "STRAFTER", "YEAR", "MONTH", "DAY", "HOURS", "MINUTES", "SECONDS", "TIMEZONE", "TZ", "NOW", "MD5", "SHA1", "SHA256", "SHA384", "SHA512", "COALESCE", "IF", "STRLANG", "STRDT", "SAMETERM", "ISIRI", "ISURI", "ISBLANK", "ISLITERAL", "ISNUMERIC", "REGEX", "SUBSTR", "REPLACE", "EXISTS", "COUNT", "SUM", "MIN", "MAX", "AVG", "SAMPLE", "GROUP_CONCAT", "SEPARATOR", "LANGTAG", "REFERENCE", "DECIMAL", "DOUBLE", "INTEGER_POSITIVE", "DECIMAL_POSITIVE", "DOUBLE_POSITIVE", "INTEGER_NEGATIVE", "DECIMAL_NEGATIVE", "DOUBLE_NEGATIVE", "TRUE", "FALSE", "STRING_LITERAL1", "STRING_LITERAL2", "STRING_LITERAL_LONG1", "STRING_LITERAL_LONG2", "PNAME_LN", "BLANK_NODE_LABEL", "EOL", "WS", "PN_PREFIX", "PN_LOCAL", "VARNAME", "DIGIT", "EXPONENT", "SIGN", "ECHAR", "IRI_REF_CHARACTERS", "PN_CHARS_BASE", "PN_CHARS_U", "PN_CHARS", "PLX", "PERCENT", "PN_LOCAL_ESC", "HEX", "COMMENT", "ANY"
    };
    public static final int FUNCTION=43;
    public static final int GRAPH=111;
    public static final int IRIORREF=10;
    public static final int DESCRIBE_QUERY=62;
    public static final int CONTAINS=161;
    public static final int BOOLEANLITERAL=7;
    public static final int PNAME_LN=218;
    public static final int REGEX=190;
    public static final int NOW=174;
    public static final int CONSTRUCT=77;
    public static final int SEPARATOR=201;
    public static final int NOT=141;
    public static final int EOF=-1;
    public static final int STRLEN=157;
    public static final int MONTH=167;
    public static final int CLEAR=98;
    public static final int ISLITERAL=188;
    public static final int CREATE=100;
    public static final int EOL=220;
    public static final int PATH_MOD=46;
    public static final int USING=109;
    public static final int BINDING_VALUE=29;
    public static final int NOT_EQUAL=135;
    public static final int BIND=116;
    public static final int QUESTION_MARK=125;
    public static final int TRIPLES_TEMPLATE=30;
    public static final int PN_CHARS_U=231;
    public static final int SELECT_CLAUSE=22;
    public static final int CLOSE_CURLY_BRACE=80;
    public static final int TZ=173;
    public static final int DOUBLE_POSITIVE=208;
    public static final int DIVIDE=123;
    public static final int BOUND=147;
    public static final int A=121;
    public static final int ASC=88;
    public static final int BRACKETTED_EXPRESSION=50;
    public static final int ASK=82;
    public static final int LOAD=95;
    public static final int SEMICOLON=65;
    public static final int CONSTRUCT_TRIPLES=35;
    public static final int ABS=152;
    public static final int GROUP=84;
    public static final int WS=221;
    public static final int SERVICE=115;
    public static final int GROUP_CONDITION=26;
    public static final int SELECT_LIST=58;
    public static final int INTEGER_POSITIVE=206;
    public static final int DESCRIBE=81;
    public static final int PATH_PRIMARY=48;
    public static final int PN_CHARS=232;
    public static final int SUBSELECT=20;
    public static final int DATATYPE=146;
    public static final int BUILTINCALL=14;
    public static final int CALL=13;
    public static final int GROUP_GRAPH_PATTERN=32;
    public static final int DOUBLE_NEGATIVE=211;
    public static final int ASK_QUERY=63;
    public static final int LANG=144;
    public static final int SUBJECT=39;
    public static final int MODIFY=19;
    public static final int IRI_REF=67;
    public static final int SELECT_QUERY=60;
    public static final int NUMERICLITERAL=8;
    public static final int BNODE=150;
    public static final int SUM=195;
    public static final int PREDICATE=40;
    public static final int ASTERISK=71;
    public static final int ENCODE_FOR_URI=160;
    public static final int AS=75;
    public static final int STR=143;
    public static final int SAMPLE=199;
    public static final int WHERE_CLAUSE=23;
    public static final int TRIPLES_NODE=36;
    public static final int EXPRESSION_LIST=34;
    public static final int SUBSTR=191;
    public static final int OFFSET=92;
    public static final int AVG=198;
    public static final int REPLACE=192;
    public static final int RAND=151;
    public static final int DECIMAL_POSITIVE=207;
    public static final int GROUP_CONCAT=200;
    public static final int PIPE=122;
    public static final int PLUS=126;
    public static final int EXISTS=193;
    public static final int UNARY=51;
    public static final int STRLANG=182;
    public static final int ADD=101;
    public static final int INTEGER=91;
    public static final int PATH_ELT_OR_INVERSE=45;
    public static final int BY=85;
    public static final int TO=102;
    public static final int BLANK_NODE=52;
    public static final int PNAME_NS=69;
    public static final int HAVING=86;
    public static final int MIN=196;
    public static final int CLOSE_BRACE=76;
    public static final int MINUS=142;
    public static final int UNION=118;
    public static final int MINUTES=170;
    public static final int PATH_SEQUENCE=47;
    public static final int GROUP_BY=25;
    public static final int STRING_LITERAL_LONG2=217;
    public static final int NEGATION=127;
    public static final int DECIMAL=204;
    public static final int DROP=99;
    public static final int STRING_LITERAL_LONG1=216;
    public static final int MOVE=103;
    public static final int PLX=233;
    public static final int AGGREGATE=6;
    public static final int ORDER_BY=27;
    public static final int GREATER_EQUAL=139;
    public static final int HOURS=169;
    public static final int LANGTAG=202;
    public static final int SIGN=227;
    public static final int PREFIX=68;
    public static final int TERM_NO_PREFIX=56;
    public static final int EXPONENT=226;
    public static final int SILENT=96;
    public static final int SHA256=177;
    public static final int BINDINGS=93;
    public static final int PNAME=53;
    public static final int STRENDS=163;
    public static final int LCASE=159;
    public static final int SHA512=179;
    public static final int COUNT=194;
    public static final int DAY=168;
    public static final int PN_LOCAL_ESC=235;
    public static final int VARNAME=224;
    public static final int STRDT=183;
    public static final int GREATER=137;
    public static final int INSERT=105;
    public static final int PATH=44;
    public static final int SOLUTION_MODIFIER=57;
    public static final int ORDER_CONDITION=28;
    public static final int LESS=136;
    public static final int LANGMATCHES=145;
    public static final int DOUBLE=205;
    public static final int BASE=66;
    public static final int RELATIONALEXPRESSION=12;
    public static final int VAR=24;
    public static final int COMMENT=237;
    public static final int OPEN_CURLY_BRACE=79;
    public static final int SELECT=70;
    public static final int INTO=97;
    public static final int ISIRI=185;
    public static final int COALESCE=180;
    public static final int CONCAT=156;
    public static final int STRSTARTS=162;
    public static final int BLANK_NODE_LABEL=219;
    public static final int TRIPLES_SAME_SUBJECT=38;
    public static final int ARG_LIST=33;
    public static final int DELETE=107;
    public static final int STRBEFORE=164;
    public static final int MINUS_KEYWORD=117;
    public static final int FLOOR=154;
    public static final int ISBLANK=187;
    public static final int CLOSE_SQUARE_BRACKET=129;
    public static final int URI=149;
    public static final int UCASE=158;
    public static final int INVERSE=124;
    public static final int NIL=5;
    public static final int NAMED=83;
    public static final int STRING_LITERAL2=215;
    public static final int OR=132;
    public static final int STRING_LITERAL1=214;
    public static final int FILTER=119;
    public static final int QUERY=16;
    public static final int ROUND=155;
    public static final int LESS_EQUAL=138;
    public static final int FROM=55;
    public static final int FALSE=213;
    public static final int DISTINCT=72;
    public static final int PROPERTY_LIST=59;
    public static final int TERM=54;
    public static final int WHERE=78;
    public static final int YEAR=166;
    public static final int ORDER=87;
    public static final int TIMEZONE=172;
    public static final int LIMIT=90;
    public static final int RDFLITERAL=9;
    public static final int MAX=197;
    public static final int CONSTRUCT_QUERY=61;
    public static final int UPDATE=17;
    public static final int SECONDS=171;
    public static final int STRAFTER=165;
    public static final int AND=133;
    public static final int FROM_CLAUSE=21;
    public static final int IF=181;
    public static final int ISURI=186;
    public static final int BRACKETS=11;
    public static final int SAMETERM=184;
    public static final int IN=140;
    public static final int OBJECT=41;
    public static final int MD5=175;
    public static final int HEX=236;
    public static final int COMMA=120;
    public static final int COPY=104;
    public static final int IRI=148;
    public static final int ALL=112;
    public static final int EQUAL=134;
    public static final int COLLECTION=37;
    public static final int DIGIT=225;
    public static final int UNDEF=94;
    public static final int DOT=113;
    public static final int EXPRESSION=15;
    public static final int BINDINGS_CLAUSE=64;
    public static final int PROLOGUE=18;
    public static final int WITH=108;
    public static final int PERCENT=234;
    public static final int ISNUMERIC=189;
    public static final int OPEN_SQUARE_BRACKET=128;
    public static final int REDUCED=73;
    public static final int INTEGER_NEGATIVE=209;
    public static final int DEFAULT=110;
    public static final int PN_LOCAL=223;
    public static final int REFERENCE=203;
    public static final int PATH_NEGATED=49;
    public static final int TRIPLES_BLOCK=31;
    public static final int SHA1=176;
    public static final int TRUE=212;
    public static final int NOT_EXISTS=42;
    public static final int ECHAR=228;
    public static final int OPTIONAL=114;
    public static final int ANON=4;
    public static final int IRI_REF_CHARACTERS=229;
    public static final int ANY=238;
    public static final int PN_CHARS_BASE=230;
    public static final int VAR1=130;
    public static final int VAR2=131;
    public static final int DECIMAL_NEGATIVE=210;
    public static final int PN_PREFIX=222;
    public static final int CEIL=153;
    public static final int DESC=89;
    public static final int OPEN_BRACE=74;
    public static final int SHA384=178;
    public static final int DATA=106;

    // delegates
    // delegators

    public static final String[] ruleNames = new String[] {
        "invalidRule", "selectQuery", "create", "expression", "selectClause", 
        "verbPath", "varOrTerm", "aggregate", "brackettedExpression", "triplesSameSubjectPath", 
        "prefixedName", "relationalExpression", "selectVariables", "move", 
        "numericExpression", "add", "prologue", "quadsNotTriples", "deleteWhere", 
        "triplesNode", "describeQuery", "multiplicativeExpression", "drop", 
        "datasetClause", "delete", "insertClause", "minusGraphPattern", 
        "propertyListNotEmpty", "subStringExpression", "pathSequence", "pathEltOrInverse", 
        "conditionalOrExpression", "graphRefAll", "path", "orderClause", 
        "quadsDetails", "rdfLiteral", "pathMod", "bind", "graphPatternNotTriples", 
        "clear", "propertyListNotEmptyDetails", "update", "baseDecl", "expressionList", 
        "valueLogical", "verbSimple", "string", "groupOrUnionGraphPattern", 
        "solutionModifier", "serviceGraphPattern", "copy", "insert", "load", 
        "bindingValue", "query", "whereClause", "functionCall", "var", "graphOrDefault", 
        "numericLiteral", "groupGraphPattern", "pathElt", "primaryExpression", 
        "multiplicativeOperator", "limitOffsetClauses", "triplesSameSubject", 
        "blankNode", "propertyListNotEmptyPath", "constructTriples", "verbSimpleOrPath", 
        "pathOneInPropertySet", "prefixDecl", "quads", "triplesTemplate", 
        "filter", "modify", "varOrIRIref", "additiveOperator", "notExistsFunction", 
        "havingClause", "numericLiteralNegative", "numericLiteralUnsigned", 
        "argList", "iriRefOrFunction", "graphGraphPattern", "verb", "existsFunction", 
        "additiveExpression", "limitClause", "unaryExpression", "booleanLiteral", 
        "orderCondition", "conditionalAndExpression", "constraint", "builtInCall", 
        "graphRef", "graphNode", "numericLiteralPositive", "regexExpression", 
        "deleteData", "groupCondition", "askQuery", "groupGraphPatternSubDetail", 
        "graphTerm", "objectList", "usingClause", "constructTemplate", "quadPattern", 
        "offsetClause", "pathPrimary", "constructQuery", "asterisk", "bindingsClause", 
        "subSelect", "bindingValueList", "pathNegatedPropertySet", "groupGraphPatternSub", 
        "nil", "anon", "deleteClause", "iriRef", "set_quantifier", "triplesBlock", 
        "optionalGraphPattern", "groupClause", "strReplaceExpression"
    };
     
        public int ruleLevel = 0;
        public int getRuleLevel() { return ruleLevel; }
        public void incRuleLevel() { ruleLevel++; }
        public void decRuleLevel() { ruleLevel--; }
        public SparqlParser(TokenStream input) {
            this(input, DebugEventSocketProxy.DEFAULT_DEBUGGER_PORT, new RecognizerSharedState());
        }
        public SparqlParser(TokenStream input, int port, RecognizerSharedState state) {
            super(input, state);
            DebugEventSocketProxy proxy =
                new DebugEventSocketProxy(this,port,adaptor);
            setDebugListener(proxy);
            setTokenStream(new DebugTokenStream(input,proxy));
            try {
                proxy.handshake();
            }
            catch (IOException ioe) {
                reportError(ioe);
            }
            TreeAdaptor adap = new CommonTreeAdaptor();
            setTreeAdaptor(adap);
            proxy.setTreeAdaptor(adap);
        }
    public SparqlParser(TokenStream input, DebugEventListener dbg) {
        super(input, dbg);

         
        TreeAdaptor adap = new CommonTreeAdaptor();
        setTreeAdaptor(adap);

    }
    protected boolean evalPredicate(boolean result, String predicate) {
        dbg.semanticPredicate(result, predicate);
        return result;
    }

    protected DebugTreeAdaptor adaptor;
    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = new DebugTreeAdaptor(dbg,adaptor);

    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }


    public String[] getTokenNames() { return SparqlParser.tokenNames; }
    public String getGrammarFileName() { return "/media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g"; }


    public static class query_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "query"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:106:1: query : ( prologue ( selectQuery | constructQuery | describeQuery | askQuery ) bindingsClause EOF -> ^( QUERY prologue ( ^( SELECT_QUERY selectQuery ) )* ( ^( CONSTRUCT_QUERY constructQuery ) )* ( ^( DESCRIBE_QUERY describeQuery ) )* ( ^( ASK_QUERY askQuery ) )* ) ( ^( BINDINGS_CLAUSE bindingsClause ) )* | update ( SEMICOLON ( update )? )* EOF -> ^( UPDATE ( update )+ ) );
    public final SparqlParser.query_return query() throws RecognitionException {
        SparqlParser.query_return retval = new SparqlParser.query_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF7=null;
        Token SEMICOLON9=null;
        Token EOF11=null;
        SparqlParser.prologue_return prologue1 = null;

        SparqlParser.selectQuery_return selectQuery2 = null;

        SparqlParser.constructQuery_return constructQuery3 = null;

        SparqlParser.describeQuery_return describeQuery4 = null;

        SparqlParser.askQuery_return askQuery5 = null;

        SparqlParser.bindingsClause_return bindingsClause6 = null;

        SparqlParser.update_return update8 = null;

        SparqlParser.update_return update10 = null;


        CommonTree EOF7_tree=null;
        CommonTree SEMICOLON9_tree=null;
        CommonTree EOF11_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_update=new RewriteRuleSubtreeStream(adaptor,"rule update");
        RewriteRuleSubtreeStream stream_describeQuery=new RewriteRuleSubtreeStream(adaptor,"rule describeQuery");
        RewriteRuleSubtreeStream stream_bindingsClause=new RewriteRuleSubtreeStream(adaptor,"rule bindingsClause");
        RewriteRuleSubtreeStream stream_constructQuery=new RewriteRuleSubtreeStream(adaptor,"rule constructQuery");
        RewriteRuleSubtreeStream stream_askQuery=new RewriteRuleSubtreeStream(adaptor,"rule askQuery");
        RewriteRuleSubtreeStream stream_prologue=new RewriteRuleSubtreeStream(adaptor,"rule prologue");
        RewriteRuleSubtreeStream stream_selectQuery=new RewriteRuleSubtreeStream(adaptor,"rule selectQuery");
        try { dbg.enterRule(getGrammarFileName(), "query");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(106, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:107:5: ( prologue ( selectQuery | constructQuery | describeQuery | askQuery ) bindingsClause EOF -> ^( QUERY prologue ( ^( SELECT_QUERY selectQuery ) )* ( ^( CONSTRUCT_QUERY constructQuery ) )* ( ^( DESCRIBE_QUERY describeQuery ) )* ( ^( ASK_QUERY askQuery ) )* ) ( ^( BINDINGS_CLAUSE bindingsClause ) )* | update ( SEMICOLON ( update )? )* EOF -> ^( UPDATE ( update )+ ) )
            int alt4=2;
            try { dbg.enterDecision(4);

            try {
                isCyclicDecision = true;
                alt4 = dfa4.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(4);}

            switch (alt4) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:107:7: prologue ( selectQuery | constructQuery | describeQuery | askQuery ) bindingsClause EOF
                    {
                    dbg.location(107,7);
                    pushFollow(FOLLOW_prologue_in_query247);
                    prologue1=prologue();

                    state._fsp--;

                    stream_prologue.add(prologue1.getTree());
                    dbg.location(107,16);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:107:16: ( selectQuery | constructQuery | describeQuery | askQuery )
                    int alt1=4;
                    try { dbg.enterSubRule(1);
                    try { dbg.enterDecision(1);

                    switch ( input.LA(1) ) {
                    case SELECT:
                        {
                        alt1=1;
                        }
                        break;
                    case CONSTRUCT:
                        {
                        alt1=2;
                        }
                        break;
                    case DESCRIBE:
                        {
                        alt1=3;
                        }
                        break;
                    case ASK:
                        {
                        alt1=4;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 1, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }

                    } finally {dbg.exitDecision(1);}

                    switch (alt1) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:107:17: selectQuery
                            {
                            dbg.location(107,17);
                            pushFollow(FOLLOW_selectQuery_in_query250);
                            selectQuery2=selectQuery();

                            state._fsp--;

                            stream_selectQuery.add(selectQuery2.getTree());

                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:107:31: constructQuery
                            {
                            dbg.location(107,31);
                            pushFollow(FOLLOW_constructQuery_in_query254);
                            constructQuery3=constructQuery();

                            state._fsp--;

                            stream_constructQuery.add(constructQuery3.getTree());

                            }
                            break;
                        case 3 :
                            dbg.enterAlt(3);

                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:107:48: describeQuery
                            {
                            dbg.location(107,48);
                            pushFollow(FOLLOW_describeQuery_in_query258);
                            describeQuery4=describeQuery();

                            state._fsp--;

                            stream_describeQuery.add(describeQuery4.getTree());

                            }
                            break;
                        case 4 :
                            dbg.enterAlt(4);

                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:107:64: askQuery
                            {
                            dbg.location(107,64);
                            pushFollow(FOLLOW_askQuery_in_query262);
                            askQuery5=askQuery();

                            state._fsp--;

                            stream_askQuery.add(askQuery5.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(1);}

                    dbg.location(107,74);
                    pushFollow(FOLLOW_bindingsClause_in_query265);
                    bindingsClause6=bindingsClause();

                    state._fsp--;

                    stream_bindingsClause.add(bindingsClause6.getTree());
                    dbg.location(107,89);
                    EOF7=(Token)match(input,EOF,FOLLOW_EOF_in_query267);  
                    stream_EOF.add(EOF7);



                    // AST REWRITE
                    // elements: askQuery, selectQuery, describeQuery, prologue, bindingsClause, constructQuery
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 107:93: -> ^( QUERY prologue ( ^( SELECT_QUERY selectQuery ) )* ( ^( CONSTRUCT_QUERY constructQuery ) )* ( ^( DESCRIBE_QUERY describeQuery ) )* ( ^( ASK_QUERY askQuery ) )* ) ( ^( BINDINGS_CLAUSE bindingsClause ) )*
                    {
                        dbg.location(107,96);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:107:96: ^( QUERY prologue ( ^( SELECT_QUERY selectQuery ) )* ( ^( CONSTRUCT_QUERY constructQuery ) )* ( ^( DESCRIBE_QUERY describeQuery ) )* ( ^( ASK_QUERY askQuery ) )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(107,98);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(QUERY, "QUERY"), root_1);

                        dbg.location(107,104);
                        adaptor.addChild(root_1, stream_prologue.nextTree());
                        dbg.location(107,113);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:107:113: ( ^( SELECT_QUERY selectQuery ) )*
                        while ( stream_selectQuery.hasNext() ) {
                            dbg.location(107,113);
                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:107:113: ^( SELECT_QUERY selectQuery )
                            {
                            CommonTree root_2 = (CommonTree)adaptor.nil();
                            dbg.location(107,115);
                            root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECT_QUERY, "SELECT_QUERY"), root_2);

                            dbg.location(107,128);
                            adaptor.addChild(root_2, stream_selectQuery.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_selectQuery.reset();
                        dbg.location(107,142);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:107:142: ( ^( CONSTRUCT_QUERY constructQuery ) )*
                        while ( stream_constructQuery.hasNext() ) {
                            dbg.location(107,142);
                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:107:142: ^( CONSTRUCT_QUERY constructQuery )
                            {
                            CommonTree root_2 = (CommonTree)adaptor.nil();
                            dbg.location(107,144);
                            root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONSTRUCT_QUERY, "CONSTRUCT_QUERY"), root_2);

                            dbg.location(107,160);
                            adaptor.addChild(root_2, stream_constructQuery.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_constructQuery.reset();
                        dbg.location(107,177);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:107:177: ( ^( DESCRIBE_QUERY describeQuery ) )*
                        while ( stream_describeQuery.hasNext() ) {
                            dbg.location(107,177);
                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:107:177: ^( DESCRIBE_QUERY describeQuery )
                            {
                            CommonTree root_2 = (CommonTree)adaptor.nil();
                            dbg.location(107,179);
                            root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DESCRIBE_QUERY, "DESCRIBE_QUERY"), root_2);

                            dbg.location(107,194);
                            adaptor.addChild(root_2, stream_describeQuery.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_describeQuery.reset();
                        dbg.location(107,210);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:107:210: ( ^( ASK_QUERY askQuery ) )*
                        while ( stream_askQuery.hasNext() ) {
                            dbg.location(107,210);
                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:107:210: ^( ASK_QUERY askQuery )
                            {
                            CommonTree root_2 = (CommonTree)adaptor.nil();
                            dbg.location(107,212);
                            root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ASK_QUERY, "ASK_QUERY"), root_2);

                            dbg.location(107,222);
                            adaptor.addChild(root_2, stream_askQuery.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_askQuery.reset();

                        adaptor.addChild(root_0, root_1);
                        }
                        dbg.location(107,234);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:107:234: ( ^( BINDINGS_CLAUSE bindingsClause ) )*
                        while ( stream_bindingsClause.hasNext() ) {
                            dbg.location(107,234);
                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:107:234: ^( BINDINGS_CLAUSE bindingsClause )
                            {
                            CommonTree root_1 = (CommonTree)adaptor.nil();
                            dbg.location(107,236);
                            root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BINDINGS_CLAUSE, "BINDINGS_CLAUSE"), root_1);

                            dbg.location(107,252);
                            adaptor.addChild(root_1, stream_bindingsClause.nextTree());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_bindingsClause.reset();

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:108:7: update ( SEMICOLON ( update )? )* EOF
                    {
                    dbg.location(108,7);
                    pushFollow(FOLLOW_update_in_query318);
                    update8=update();

                    state._fsp--;

                    stream_update.add(update8.getTree());
                    dbg.location(108,14);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:108:14: ( SEMICOLON ( update )? )*
                    try { dbg.enterSubRule(3);

                    loop3:
                    do {
                        int alt3=2;
                        try { dbg.enterDecision(3);

                        int LA3_0 = input.LA(1);

                        if ( (LA3_0==SEMICOLON) ) {
                            alt3=1;
                        }


                        } finally {dbg.exitDecision(3);}

                        switch (alt3) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:108:15: SEMICOLON ( update )?
                    	    {
                    	    dbg.location(108,15);
                    	    SEMICOLON9=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_query321);  
                    	    stream_SEMICOLON.add(SEMICOLON9);

                    	    dbg.location(108,25);
                    	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:108:25: ( update )?
                    	    int alt2=2;
                    	    try { dbg.enterSubRule(2);
                    	    try { dbg.enterDecision(2);

                    	    int LA2_0 = input.LA(1);

                    	    if ( (LA2_0==BASE||LA2_0==PREFIX||LA2_0==SELECT||LA2_0==CONSTRUCT||(LA2_0>=DESCRIBE && LA2_0<=ASK)||LA2_0==LOAD||(LA2_0>=CLEAR && LA2_0<=ADD)||(LA2_0>=MOVE && LA2_0<=INSERT)||(LA2_0>=DELETE && LA2_0<=WITH)) ) {
                    	        alt2=1;
                    	    }
                    	    } finally {dbg.exitDecision(2);}

                    	    switch (alt2) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:108:25: update
                    	            {
                    	            dbg.location(108,25);
                    	            pushFollow(FOLLOW_update_in_query323);
                    	            update10=update();

                    	            state._fsp--;

                    	            stream_update.add(update10.getTree());

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(2);}


                    	    }
                    	    break;

                    	default :
                    	    break loop3;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(3);}

                    dbg.location(108,35);
                    EOF11=(Token)match(input,EOF,FOLLOW_EOF_in_query328);  
                    stream_EOF.add(EOF11);



                    // AST REWRITE
                    // elements: update
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 108:39: -> ^( UPDATE ( update )+ )
                    {
                        dbg.location(108,42);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:108:42: ^( UPDATE ( update )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(108,44);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UPDATE, "UPDATE"), root_1);

                        dbg.location(108,51);
                        if ( !(stream_update.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_update.hasNext() ) {
                            dbg.location(108,51);
                            adaptor.addChild(root_1, stream_update.nextTree());

                        }
                        stream_update.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(109, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "query");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "query"

    public static class prologue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prologue"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:112:1: prologue : ( baseDecl | prefixDecl )* -> ^( PROLOGUE ( baseDecl )* ( prefixDecl )* ) ;
    public final SparqlParser.prologue_return prologue() throws RecognitionException {
        SparqlParser.prologue_return retval = new SparqlParser.prologue_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        SparqlParser.baseDecl_return baseDecl12 = null;

        SparqlParser.prefixDecl_return prefixDecl13 = null;


        RewriteRuleSubtreeStream stream_prefixDecl=new RewriteRuleSubtreeStream(adaptor,"rule prefixDecl");
        RewriteRuleSubtreeStream stream_baseDecl=new RewriteRuleSubtreeStream(adaptor,"rule baseDecl");
        try { dbg.enterRule(getGrammarFileName(), "prologue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(112, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:114:5: ( ( baseDecl | prefixDecl )* -> ^( PROLOGUE ( baseDecl )* ( prefixDecl )* ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:114:7: ( baseDecl | prefixDecl )*
            {
            dbg.location(114,7);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:114:7: ( baseDecl | prefixDecl )*
            try { dbg.enterSubRule(5);

            loop5:
            do {
                int alt5=3;
                try { dbg.enterDecision(5);

                int LA5_0 = input.LA(1);

                if ( (LA5_0==BASE) ) {
                    alt5=1;
                }
                else if ( (LA5_0==PREFIX) ) {
                    alt5=2;
                }


                } finally {dbg.exitDecision(5);}

                switch (alt5) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:114:8: baseDecl
            	    {
            	    dbg.location(114,8);
            	    pushFollow(FOLLOW_baseDecl_in_prologue366);
            	    baseDecl12=baseDecl();

            	    state._fsp--;

            	    stream_baseDecl.add(baseDecl12.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:114:19: prefixDecl
            	    {
            	    dbg.location(114,19);
            	    pushFollow(FOLLOW_prefixDecl_in_prologue370);
            	    prefixDecl13=prefixDecl();

            	    state._fsp--;

            	    stream_prefixDecl.add(prefixDecl13.getTree());

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);
            } finally {dbg.exitSubRule(5);}



            // AST REWRITE
            // elements: baseDecl, prefixDecl
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 114:32: -> ^( PROLOGUE ( baseDecl )* ( prefixDecl )* )
            {
                dbg.location(114,35);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:114:35: ^( PROLOGUE ( baseDecl )* ( prefixDecl )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(114,37);
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROLOGUE, "PROLOGUE"), root_1);

                dbg.location(114,46);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:114:46: ( baseDecl )*
                while ( stream_baseDecl.hasNext() ) {
                    dbg.location(114,46);
                    adaptor.addChild(root_1, stream_baseDecl.nextTree());

                }
                stream_baseDecl.reset();
                dbg.location(114,56);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:114:56: ( prefixDecl )*
                while ( stream_prefixDecl.hasNext() ) {
                    dbg.location(114,56);
                    adaptor.addChild(root_1, stream_prefixDecl.nextTree());

                }
                stream_prefixDecl.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(115, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prologue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "prologue"

    public static class baseDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "baseDecl"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:117:1: baseDecl : BASE IRI_REF -> ^( BASE IRI_REF ) ;
    public final SparqlParser.baseDecl_return baseDecl() throws RecognitionException {
        SparqlParser.baseDecl_return retval = new SparqlParser.baseDecl_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BASE14=null;
        Token IRI_REF15=null;

        CommonTree BASE14_tree=null;
        CommonTree IRI_REF15_tree=null;
        RewriteRuleTokenStream stream_BASE=new RewriteRuleTokenStream(adaptor,"token BASE");
        RewriteRuleTokenStream stream_IRI_REF=new RewriteRuleTokenStream(adaptor,"token IRI_REF");

        try { dbg.enterRule(getGrammarFileName(), "baseDecl");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(117, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:118:5: ( BASE IRI_REF -> ^( BASE IRI_REF ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:118:7: BASE IRI_REF
            {
            dbg.location(118,7);
            BASE14=(Token)match(input,BASE,FOLLOW_BASE_in_baseDecl401);  
            stream_BASE.add(BASE14);

            dbg.location(118,12);
            IRI_REF15=(Token)match(input,IRI_REF,FOLLOW_IRI_REF_in_baseDecl403);  
            stream_IRI_REF.add(IRI_REF15);



            // AST REWRITE
            // elements: IRI_REF, BASE
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 118:20: -> ^( BASE IRI_REF )
            {
                dbg.location(118,23);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:118:23: ^( BASE IRI_REF )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(118,25);
                root_1 = (CommonTree)adaptor.becomeRoot(stream_BASE.nextNode(), root_1);

                dbg.location(118,30);
                adaptor.addChild(root_1, stream_IRI_REF.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(119, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "baseDecl");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "baseDecl"

    public static class prefixDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prefixDecl"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:121:1: prefixDecl : PREFIX PNAME_NS IRI_REF -> ^( PREFIX PNAME_NS IRI_REF ) ;
    public final SparqlParser.prefixDecl_return prefixDecl() throws RecognitionException {
        SparqlParser.prefixDecl_return retval = new SparqlParser.prefixDecl_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PREFIX16=null;
        Token PNAME_NS17=null;
        Token IRI_REF18=null;

        CommonTree PREFIX16_tree=null;
        CommonTree PNAME_NS17_tree=null;
        CommonTree IRI_REF18_tree=null;
        RewriteRuleTokenStream stream_PREFIX=new RewriteRuleTokenStream(adaptor,"token PREFIX");
        RewriteRuleTokenStream stream_PNAME_NS=new RewriteRuleTokenStream(adaptor,"token PNAME_NS");
        RewriteRuleTokenStream stream_IRI_REF=new RewriteRuleTokenStream(adaptor,"token IRI_REF");

        try { dbg.enterRule(getGrammarFileName(), "prefixDecl");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(121, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:122:5: ( PREFIX PNAME_NS IRI_REF -> ^( PREFIX PNAME_NS IRI_REF ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:122:7: PREFIX PNAME_NS IRI_REF
            {
            dbg.location(122,7);
            PREFIX16=(Token)match(input,PREFIX,FOLLOW_PREFIX_in_prefixDecl429);  
            stream_PREFIX.add(PREFIX16);

            dbg.location(122,14);
            PNAME_NS17=(Token)match(input,PNAME_NS,FOLLOW_PNAME_NS_in_prefixDecl431);  
            stream_PNAME_NS.add(PNAME_NS17);

            dbg.location(122,23);
            IRI_REF18=(Token)match(input,IRI_REF,FOLLOW_IRI_REF_in_prefixDecl433);  
            stream_IRI_REF.add(IRI_REF18);



            // AST REWRITE
            // elements: PNAME_NS, IRI_REF, PREFIX
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 122:31: -> ^( PREFIX PNAME_NS IRI_REF )
            {
                dbg.location(122,34);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:122:34: ^( PREFIX PNAME_NS IRI_REF )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(122,36);
                root_1 = (CommonTree)adaptor.becomeRoot(stream_PREFIX.nextNode(), root_1);

                dbg.location(122,43);
                adaptor.addChild(root_1, stream_PNAME_NS.nextNode());
                dbg.location(122,52);
                adaptor.addChild(root_1, stream_IRI_REF.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(123, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prefixDecl");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "prefixDecl"

    public static class selectQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectQuery"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:125:1: selectQuery : SELECT ( set_quantifier )? asterisk selectClause ( datasetClause )* whereClause solutionModifier -> ^( SELECT_LIST ( set_quantifier )? asterisk ) ( ^( FROM datasetClause ) )* ^( WHERE whereClause ) ( ^( SOLUTION_MODIFIER solutionModifier ) )* ;
    public final SparqlParser.selectQuery_return selectQuery() throws RecognitionException {
        SparqlParser.selectQuery_return retval = new SparqlParser.selectQuery_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SELECT19=null;
        SparqlParser.set_quantifier_return set_quantifier20 = null;

        SparqlParser.asterisk_return asterisk21 = null;

        SparqlParser.selectClause_return selectClause22 = null;

        SparqlParser.datasetClause_return datasetClause23 = null;

        SparqlParser.whereClause_return whereClause24 = null;

        SparqlParser.solutionModifier_return solutionModifier25 = null;


        CommonTree SELECT19_tree=null;
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_datasetClause=new RewriteRuleSubtreeStream(adaptor,"rule datasetClause");
        RewriteRuleSubtreeStream stream_set_quantifier=new RewriteRuleSubtreeStream(adaptor,"rule set_quantifier");
        RewriteRuleSubtreeStream stream_asterisk=new RewriteRuleSubtreeStream(adaptor,"rule asterisk");
        RewriteRuleSubtreeStream stream_solutionModifier=new RewriteRuleSubtreeStream(adaptor,"rule solutionModifier");
        RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
        try { dbg.enterRule(getGrammarFileName(), "selectQuery");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(125, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:127:5: ( SELECT ( set_quantifier )? asterisk selectClause ( datasetClause )* whereClause solutionModifier -> ^( SELECT_LIST ( set_quantifier )? asterisk ) ( ^( FROM datasetClause ) )* ^( WHERE whereClause ) ( ^( SOLUTION_MODIFIER solutionModifier ) )* )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:127:7: SELECT ( set_quantifier )? asterisk selectClause ( datasetClause )* whereClause solutionModifier
            {
            dbg.location(127,7);
            SELECT19=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectQuery464);  
            stream_SELECT.add(SELECT19);

            dbg.location(127,14);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:127:14: ( set_quantifier )?
            int alt6=2;
            try { dbg.enterSubRule(6);
            try { dbg.enterDecision(6);

            int LA6_0 = input.LA(1);

            if ( ((LA6_0>=DISTINCT && LA6_0<=REDUCED)) ) {
                alt6=1;
            }
            } finally {dbg.exitDecision(6);}

            switch (alt6) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:127:14: set_quantifier
                    {
                    dbg.location(127,14);
                    pushFollow(FOLLOW_set_quantifier_in_selectQuery466);
                    set_quantifier20=set_quantifier();

                    state._fsp--;

                    stream_set_quantifier.add(set_quantifier20.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(6);}

            dbg.location(127,30);
            pushFollow(FOLLOW_asterisk_in_selectQuery469);
            asterisk21=asterisk();

            state._fsp--;

            stream_asterisk.add(asterisk21.getTree());
            dbg.location(127,39);
            pushFollow(FOLLOW_selectClause_in_selectQuery471);
            selectClause22=selectClause();

            state._fsp--;

            stream_selectClause.add(selectClause22.getTree());
            dbg.location(127,52);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:127:52: ( datasetClause )*
            try { dbg.enterSubRule(7);

            loop7:
            do {
                int alt7=2;
                try { dbg.enterDecision(7);

                int LA7_0 = input.LA(1);

                if ( (LA7_0==FROM) ) {
                    alt7=1;
                }


                } finally {dbg.exitDecision(7);}

                switch (alt7) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:127:52: datasetClause
            	    {
            	    dbg.location(127,52);
            	    pushFollow(FOLLOW_datasetClause_in_selectQuery473);
            	    datasetClause23=datasetClause();

            	    state._fsp--;

            	    stream_datasetClause.add(datasetClause23.getTree());

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);
            } finally {dbg.exitSubRule(7);}

            dbg.location(127,67);
            pushFollow(FOLLOW_whereClause_in_selectQuery476);
            whereClause24=whereClause();

            state._fsp--;

            stream_whereClause.add(whereClause24.getTree());
            dbg.location(127,79);
            pushFollow(FOLLOW_solutionModifier_in_selectQuery478);
            solutionModifier25=solutionModifier();

            state._fsp--;

            stream_solutionModifier.add(solutionModifier25.getTree());


            // AST REWRITE
            // elements: whereClause, solutionModifier, datasetClause, set_quantifier, asterisk
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 127:97: -> ^( SELECT_LIST ( set_quantifier )? asterisk ) ( ^( FROM datasetClause ) )* ^( WHERE whereClause ) ( ^( SOLUTION_MODIFIER solutionModifier ) )*
            {
                dbg.location(127,100);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:127:100: ^( SELECT_LIST ( set_quantifier )? asterisk )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(127,102);
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECT_LIST, "SELECT_LIST"), root_1);

                dbg.location(127,114);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:127:114: ( set_quantifier )?
                if ( stream_set_quantifier.hasNext() ) {
                    dbg.location(127,114);
                    adaptor.addChild(root_1, stream_set_quantifier.nextTree());

                }
                stream_set_quantifier.reset();
                dbg.location(127,130);
                adaptor.addChild(root_1, stream_asterisk.nextTree());

                adaptor.addChild(root_0, root_1);
                }
                dbg.location(127,140);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:127:140: ( ^( FROM datasetClause ) )*
                while ( stream_datasetClause.hasNext() ) {
                    dbg.location(127,140);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:127:140: ^( FROM datasetClause )
                    {
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    dbg.location(127,142);
                    root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FROM, "FROM"), root_1);

                    dbg.location(127,147);
                    adaptor.addChild(root_1, stream_datasetClause.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_datasetClause.reset();
                dbg.location(127,163);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:127:163: ^( WHERE whereClause )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(127,165);
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE, "WHERE"), root_1);

                dbg.location(127,171);
                adaptor.addChild(root_1, stream_whereClause.nextTree());

                adaptor.addChild(root_0, root_1);
                }
                dbg.location(127,184);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:127:184: ( ^( SOLUTION_MODIFIER solutionModifier ) )*
                while ( stream_solutionModifier.hasNext() ) {
                    dbg.location(127,184);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:127:184: ^( SOLUTION_MODIFIER solutionModifier )
                    {
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    dbg.location(127,186);
                    root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SOLUTION_MODIFIER, "SOLUTION_MODIFIER"), root_1);

                    dbg.location(127,204);
                    adaptor.addChild(root_1, stream_solutionModifier.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_solutionModifier.reset();

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(128, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "selectQuery");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "selectQuery"

    public static class asterisk_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "asterisk"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:130:1: asterisk : ( ( var )+ -> ( var )+ | ASTERISK -> ASTERISK );
    public final SparqlParser.asterisk_return asterisk() throws RecognitionException {
        SparqlParser.asterisk_return retval = new SparqlParser.asterisk_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ASTERISK27=null;
        SparqlParser.var_return var26 = null;


        CommonTree ASTERISK27_tree=null;
        RewriteRuleTokenStream stream_ASTERISK=new RewriteRuleTokenStream(adaptor,"token ASTERISK");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        try { dbg.enterRule(getGrammarFileName(), "asterisk");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(130, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:131:3: ( ( var )+ -> ( var )+ | ASTERISK -> ASTERISK )
            int alt9=2;
            try { dbg.enterDecision(9);

            int LA9_0 = input.LA(1);

            if ( ((LA9_0>=VAR1 && LA9_0<=VAR2)) ) {
                alt9=1;
            }
            else if ( (LA9_0==ASTERISK) ) {
                alt9=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(9);}

            switch (alt9) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:131:6: ( var )+
                    {
                    dbg.location(131,6);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:131:6: ( var )+
                    int cnt8=0;
                    try { dbg.enterSubRule(8);

                    loop8:
                    do {
                        int alt8=2;
                        try { dbg.enterDecision(8);

                        int LA8_0 = input.LA(1);

                        if ( ((LA8_0>=VAR1 && LA8_0<=VAR2)) ) {
                            alt8=1;
                        }


                        } finally {dbg.exitDecision(8);}

                        switch (alt8) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:131:6: var
                    	    {
                    	    dbg.location(131,6);
                    	    pushFollow(FOLLOW_var_in_asterisk526);
                    	    var26=var();

                    	    state._fsp--;

                    	    stream_var.add(var26.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt8 >= 1 ) break loop8;
                                EarlyExitException eee =
                                    new EarlyExitException(8, input);
                                dbg.recognitionException(eee);

                                throw eee;
                        }
                        cnt8++;
                    } while (true);
                    } finally {dbg.exitSubRule(8);}



                    // AST REWRITE
                    // elements: var
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 131:12: -> ( var )+
                    {
                        dbg.location(131,15);
                        if ( !(stream_var.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_var.hasNext() ) {
                            dbg.location(131,15);
                            adaptor.addChild(root_0, stream_var.nextTree());

                        }
                        stream_var.reset();

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:132:5: ASTERISK
                    {
                    dbg.location(132,5);
                    ASTERISK27=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_asterisk539);  
                    stream_ASTERISK.add(ASTERISK27);



                    // AST REWRITE
                    // elements: ASTERISK
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 132:15: -> ASTERISK
                    {
                        dbg.location(132,18);
                        adaptor.addChild(root_0, stream_ASTERISK.nextNode());

                    }

                    retval.tree = root_0;
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(133, 4);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "asterisk");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "asterisk"

    public static class set_quantifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "set_quantifier"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:135:1: set_quantifier : ( DISTINCT | REDUCED );
    public final SparqlParser.set_quantifier_return set_quantifier() throws RecognitionException {
        SparqlParser.set_quantifier_return retval = new SparqlParser.set_quantifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set28=null;

        CommonTree set28_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "set_quantifier");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(135, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:136:2: ( DISTINCT | REDUCED )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            dbg.location(136,2);
            set28=(Token)input.LT(1);
            if ( (input.LA(1)>=DISTINCT && input.LA(1)<=REDUCED) ) {
                input.consume();
                adaptor.addChild(root_0, (CommonTree)adaptor.create(set28));
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(137, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "set_quantifier");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "set_quantifier"

    public static class subSelect_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelect"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:139:1: subSelect : selectClause whereClause solutionModifier -> ^( SUBSELECT selectClause ( whereClause )* ( solutionModifier )* ) ;
    public final SparqlParser.subSelect_return subSelect() throws RecognitionException {
        SparqlParser.subSelect_return retval = new SparqlParser.subSelect_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        SparqlParser.selectClause_return selectClause29 = null;

        SparqlParser.whereClause_return whereClause30 = null;

        SparqlParser.solutionModifier_return solutionModifier31 = null;


        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_solutionModifier=new RewriteRuleSubtreeStream(adaptor,"rule solutionModifier");
        RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
        try { dbg.enterRule(getGrammarFileName(), "subSelect");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(139, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:140:5: ( selectClause whereClause solutionModifier -> ^( SUBSELECT selectClause ( whereClause )* ( solutionModifier )* ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:140:7: selectClause whereClause solutionModifier
            {
            dbg.location(140,7);
            pushFollow(FOLLOW_selectClause_in_subSelect581);
            selectClause29=selectClause();

            state._fsp--;

            stream_selectClause.add(selectClause29.getTree());
            dbg.location(140,20);
            pushFollow(FOLLOW_whereClause_in_subSelect583);
            whereClause30=whereClause();

            state._fsp--;

            stream_whereClause.add(whereClause30.getTree());
            dbg.location(140,32);
            pushFollow(FOLLOW_solutionModifier_in_subSelect585);
            solutionModifier31=solutionModifier();

            state._fsp--;

            stream_solutionModifier.add(solutionModifier31.getTree());


            // AST REWRITE
            // elements: solutionModifier, whereClause, selectClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 140:49: -> ^( SUBSELECT selectClause ( whereClause )* ( solutionModifier )* )
            {
                dbg.location(140,52);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:140:52: ^( SUBSELECT selectClause ( whereClause )* ( solutionModifier )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(140,54);
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT, "SUBSELECT"), root_1);

                dbg.location(140,64);
                adaptor.addChild(root_1, stream_selectClause.nextTree());
                dbg.location(140,77);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:140:77: ( whereClause )*
                while ( stream_whereClause.hasNext() ) {
                    dbg.location(140,77);
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();
                dbg.location(140,90);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:140:90: ( solutionModifier )*
                while ( stream_solutionModifier.hasNext() ) {
                    dbg.location(140,90);
                    adaptor.addChild(root_1, stream_solutionModifier.nextTree());

                }
                stream_solutionModifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(141, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "subSelect");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "subSelect"

    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectClause"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:143:1: selectClause : ( SELECT ( DISTINCT | REDUCED )? ASTERISK -> ^( SELECT_CLAUSE ( DISTINCT )* ( REDUCED )* ASTERISK ) | SELECT ( DISTINCT | REDUCED )? (v+= selectVariables )+ -> ^( SELECT_CLAUSE ( DISTINCT )* ( REDUCED )* ( $v)* ) );
    public final SparqlParser.selectClause_return selectClause() throws RecognitionException {
        SparqlParser.selectClause_return retval = new SparqlParser.selectClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SELECT32=null;
        Token DISTINCT33=null;
        Token REDUCED34=null;
        Token ASTERISK35=null;
        Token SELECT36=null;
        Token DISTINCT37=null;
        Token REDUCED38=null;
        List list_v=null;
        RuleReturnScope v = null;
        CommonTree SELECT32_tree=null;
        CommonTree DISTINCT33_tree=null;
        CommonTree REDUCED34_tree=null;
        CommonTree ASTERISK35_tree=null;
        CommonTree SELECT36_tree=null;
        CommonTree DISTINCT37_tree=null;
        CommonTree REDUCED38_tree=null;
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_REDUCED=new RewriteRuleTokenStream(adaptor,"token REDUCED");
        RewriteRuleTokenStream stream_ASTERISK=new RewriteRuleTokenStream(adaptor,"token ASTERISK");
        RewriteRuleSubtreeStream stream_selectVariables=new RewriteRuleSubtreeStream(adaptor,"rule selectVariables");
        try { dbg.enterRule(getGrammarFileName(), "selectClause");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(143, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:144:5: ( SELECT ( DISTINCT | REDUCED )? ASTERISK -> ^( SELECT_CLAUSE ( DISTINCT )* ( REDUCED )* ASTERISK ) | SELECT ( DISTINCT | REDUCED )? (v+= selectVariables )+ -> ^( SELECT_CLAUSE ( DISTINCT )* ( REDUCED )* ( $v)* ) )
            int alt13=2;
            try { dbg.enterDecision(13);

            int LA13_0 = input.LA(1);

            if ( (LA13_0==SELECT) ) {
                switch ( input.LA(2) ) {
                case DISTINCT:
                    {
                    int LA13_2 = input.LA(3);

                    if ( (LA13_2==OPEN_BRACE||(LA13_2>=VAR1 && LA13_2<=VAR2)) ) {
                        alt13=2;
                    }
                    else if ( (LA13_2==ASTERISK) ) {
                        alt13=1;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 13, 2, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case REDUCED:
                    {
                    int LA13_3 = input.LA(3);

                    if ( (LA13_3==ASTERISK) ) {
                        alt13=1;
                    }
                    else if ( (LA13_3==OPEN_BRACE||(LA13_3>=VAR1 && LA13_3<=VAR2)) ) {
                        alt13=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 13, 3, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case OPEN_BRACE:
                case VAR1:
                case VAR2:
                    {
                    alt13=2;
                    }
                    break;
                case ASTERISK:
                    {
                    alt13=1;
                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("", 13, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(13);}

            switch (alt13) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:144:7: SELECT ( DISTINCT | REDUCED )? ASTERISK
                    {
                    dbg.location(144,7);
                    SELECT32=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectClause621);  
                    stream_SELECT.add(SELECT32);

                    dbg.location(144,14);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:144:14: ( DISTINCT | REDUCED )?
                    int alt10=3;
                    try { dbg.enterSubRule(10);
                    try { dbg.enterDecision(10);

                    int LA10_0 = input.LA(1);

                    if ( (LA10_0==DISTINCT) ) {
                        alt10=1;
                    }
                    else if ( (LA10_0==REDUCED) ) {
                        alt10=2;
                    }
                    } finally {dbg.exitDecision(10);}

                    switch (alt10) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:144:15: DISTINCT
                            {
                            dbg.location(144,15);
                            DISTINCT33=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_selectClause624);  
                            stream_DISTINCT.add(DISTINCT33);


                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:144:26: REDUCED
                            {
                            dbg.location(144,26);
                            REDUCED34=(Token)match(input,REDUCED,FOLLOW_REDUCED_in_selectClause628);  
                            stream_REDUCED.add(REDUCED34);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(10);}

                    dbg.location(144,36);
                    ASTERISK35=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_selectClause632);  
                    stream_ASTERISK.add(ASTERISK35);



                    // AST REWRITE
                    // elements: ASTERISK, REDUCED, DISTINCT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 144:45: -> ^( SELECT_CLAUSE ( DISTINCT )* ( REDUCED )* ASTERISK )
                    {
                        dbg.location(144,48);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:144:48: ^( SELECT_CLAUSE ( DISTINCT )* ( REDUCED )* ASTERISK )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(144,50);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECT_CLAUSE, "SELECT_CLAUSE"), root_1);

                        dbg.location(144,64);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:144:64: ( DISTINCT )*
                        while ( stream_DISTINCT.hasNext() ) {
                            dbg.location(144,64);
                            adaptor.addChild(root_1, stream_DISTINCT.nextNode());

                        }
                        stream_DISTINCT.reset();
                        dbg.location(144,74);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:144:74: ( REDUCED )*
                        while ( stream_REDUCED.hasNext() ) {
                            dbg.location(144,74);
                            adaptor.addChild(root_1, stream_REDUCED.nextNode());

                        }
                        stream_REDUCED.reset();
                        dbg.location(144,83);
                        adaptor.addChild(root_1, stream_ASTERISK.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:145:7: SELECT ( DISTINCT | REDUCED )? (v+= selectVariables )+
                    {
                    dbg.location(145,7);
                    SELECT36=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectClause654);  
                    stream_SELECT.add(SELECT36);

                    dbg.location(145,14);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:145:14: ( DISTINCT | REDUCED )?
                    int alt11=3;
                    try { dbg.enterSubRule(11);
                    try { dbg.enterDecision(11);

                    int LA11_0 = input.LA(1);

                    if ( (LA11_0==DISTINCT) ) {
                        alt11=1;
                    }
                    else if ( (LA11_0==REDUCED) ) {
                        alt11=2;
                    }
                    } finally {dbg.exitDecision(11);}

                    switch (alt11) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:145:15: DISTINCT
                            {
                            dbg.location(145,15);
                            DISTINCT37=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_selectClause657);  
                            stream_DISTINCT.add(DISTINCT37);


                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:145:26: REDUCED
                            {
                            dbg.location(145,26);
                            REDUCED38=(Token)match(input,REDUCED,FOLLOW_REDUCED_in_selectClause661);  
                            stream_REDUCED.add(REDUCED38);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(11);}

                    dbg.location(145,36);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:145:36: (v+= selectVariables )+
                    int cnt12=0;
                    try { dbg.enterSubRule(12);

                    loop12:
                    do {
                        int alt12=2;
                        try { dbg.enterDecision(12);

                        int LA12_0 = input.LA(1);

                        if ( (LA12_0==OPEN_BRACE||(LA12_0>=VAR1 && LA12_0<=VAR2)) ) {
                            alt12=1;
                        }


                        } finally {dbg.exitDecision(12);}

                        switch (alt12) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:145:37: v+= selectVariables
                    	    {
                    	    dbg.location(145,38);
                    	    pushFollow(FOLLOW_selectVariables_in_selectClause668);
                    	    v=selectVariables();

                    	    state._fsp--;

                    	    stream_selectVariables.add(v.getTree());
                    	    if (list_v==null) list_v=new ArrayList();
                    	    list_v.add(v.getTree());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt12 >= 1 ) break loop12;
                                EarlyExitException eee =
                                    new EarlyExitException(12, input);
                                dbg.recognitionException(eee);

                                throw eee;
                        }
                        cnt12++;
                    } while (true);
                    } finally {dbg.exitSubRule(12);}



                    // AST REWRITE
                    // elements: REDUCED, v, DISTINCT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: v
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"token v",list_v);
                    root_0 = (CommonTree)adaptor.nil();
                    // 145:58: -> ^( SELECT_CLAUSE ( DISTINCT )* ( REDUCED )* ( $v)* )
                    {
                        dbg.location(145,61);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:145:61: ^( SELECT_CLAUSE ( DISTINCT )* ( REDUCED )* ( $v)* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(145,63);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECT_CLAUSE, "SELECT_CLAUSE"), root_1);

                        dbg.location(145,77);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:145:77: ( DISTINCT )*
                        while ( stream_DISTINCT.hasNext() ) {
                            dbg.location(145,77);
                            adaptor.addChild(root_1, stream_DISTINCT.nextNode());

                        }
                        stream_DISTINCT.reset();
                        dbg.location(145,87);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:145:87: ( REDUCED )*
                        while ( stream_REDUCED.hasNext() ) {
                            dbg.location(145,87);
                            adaptor.addChild(root_1, stream_REDUCED.nextNode());

                        }
                        stream_REDUCED.reset();
                        dbg.location(145,96);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:145:96: ( $v)*
                        while ( stream_v.hasNext() ) {
                            dbg.location(145,96);
                            adaptor.addChild(root_1, stream_v.nextTree());

                        }
                        stream_v.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(146, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "selectClause");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "selectClause"

    public static class selectVariables_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectVariables"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:148:1: selectVariables : ( var -> ^( VAR var ) | OPEN_BRACE expression AS var CLOSE_BRACE -> ^( AS expression var ) );
    public final SparqlParser.selectVariables_return selectVariables() throws RecognitionException {
        SparqlParser.selectVariables_return retval = new SparqlParser.selectVariables_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token OPEN_BRACE40=null;
        Token AS42=null;
        Token CLOSE_BRACE44=null;
        SparqlParser.var_return var39 = null;

        SparqlParser.expression_return expression41 = null;

        SparqlParser.var_return var43 = null;


        CommonTree OPEN_BRACE40_tree=null;
        CommonTree AS42_tree=null;
        CommonTree CLOSE_BRACE44_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        try { dbg.enterRule(getGrammarFileName(), "selectVariables");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(148, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:149:5: ( var -> ^( VAR var ) | OPEN_BRACE expression AS var CLOSE_BRACE -> ^( AS expression var ) )
            int alt14=2;
            try { dbg.enterDecision(14);

            int LA14_0 = input.LA(1);

            if ( ((LA14_0>=VAR1 && LA14_0<=VAR2)) ) {
                alt14=1;
            }
            else if ( (LA14_0==OPEN_BRACE) ) {
                alt14=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(14);}

            switch (alt14) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:149:7: var
                    {
                    dbg.location(149,7);
                    pushFollow(FOLLOW_var_in_selectVariables703);
                    var39=var();

                    state._fsp--;

                    stream_var.add(var39.getTree());


                    // AST REWRITE
                    // elements: var
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 149:11: -> ^( VAR var )
                    {
                        dbg.location(149,14);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:149:14: ^( VAR var )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(149,16);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR, "VAR"), root_1);

                        dbg.location(149,20);
                        adaptor.addChild(root_1, stream_var.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:150:7: OPEN_BRACE expression AS var CLOSE_BRACE
                    {
                    dbg.location(150,7);
                    OPEN_BRACE40=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_selectVariables720);  
                    stream_OPEN_BRACE.add(OPEN_BRACE40);

                    dbg.location(150,18);
                    pushFollow(FOLLOW_expression_in_selectVariables722);
                    expression41=expression();

                    state._fsp--;

                    stream_expression.add(expression41.getTree());
                    dbg.location(150,29);
                    AS42=(Token)match(input,AS,FOLLOW_AS_in_selectVariables724);  
                    stream_AS.add(AS42);

                    dbg.location(150,32);
                    pushFollow(FOLLOW_var_in_selectVariables726);
                    var43=var();

                    state._fsp--;

                    stream_var.add(var43.getTree());
                    dbg.location(150,36);
                    CLOSE_BRACE44=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_selectVariables728);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE44);



                    // AST REWRITE
                    // elements: AS, expression, var
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 150:48: -> ^( AS expression var )
                    {
                        dbg.location(150,51);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:150:51: ^( AS expression var )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(150,53);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_AS.nextNode(), root_1);

                        dbg.location(150,56);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        dbg.location(150,67);
                        adaptor.addChild(root_1, stream_var.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(151, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "selectVariables");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "selectVariables"

    public static class constructQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructQuery"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:153:1: constructQuery : ( CONSTRUCT constructTemplate ( datasetClause )* whereClause solutionModifier -> ^( CONSTRUCT constructTemplate ( datasetClause )* ( whereClause )* ( solutionModifier )* ) | CONSTRUCT ( datasetClause )* WHERE OPEN_CURLY_BRACE ( triplesTemplate )? CLOSE_CURLY_BRACE solutionModifier -> ^( CONSTRUCT ( datasetClause )* ^( WHERE_CLAUSE ( triplesTemplate )* ) ( solutionModifier )* ) );
    public final SparqlParser.constructQuery_return constructQuery() throws RecognitionException {
        SparqlParser.constructQuery_return retval = new SparqlParser.constructQuery_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token CONSTRUCT45=null;
        Token CONSTRUCT50=null;
        Token WHERE52=null;
        Token OPEN_CURLY_BRACE53=null;
        Token CLOSE_CURLY_BRACE55=null;
        SparqlParser.constructTemplate_return constructTemplate46 = null;

        SparqlParser.datasetClause_return datasetClause47 = null;

        SparqlParser.whereClause_return whereClause48 = null;

        SparqlParser.solutionModifier_return solutionModifier49 = null;

        SparqlParser.datasetClause_return datasetClause51 = null;

        SparqlParser.triplesTemplate_return triplesTemplate54 = null;

        SparqlParser.solutionModifier_return solutionModifier56 = null;


        CommonTree CONSTRUCT45_tree=null;
        CommonTree CONSTRUCT50_tree=null;
        CommonTree WHERE52_tree=null;
        CommonTree OPEN_CURLY_BRACE53_tree=null;
        CommonTree CLOSE_CURLY_BRACE55_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_CONSTRUCT=new RewriteRuleTokenStream(adaptor,"token CONSTRUCT");
        RewriteRuleTokenStream stream_OPEN_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_CURLY_BRACE");
        RewriteRuleTokenStream stream_CLOSE_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_CURLY_BRACE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_triplesTemplate=new RewriteRuleSubtreeStream(adaptor,"rule triplesTemplate");
        RewriteRuleSubtreeStream stream_datasetClause=new RewriteRuleSubtreeStream(adaptor,"rule datasetClause");
        RewriteRuleSubtreeStream stream_solutionModifier=new RewriteRuleSubtreeStream(adaptor,"rule solutionModifier");
        RewriteRuleSubtreeStream stream_constructTemplate=new RewriteRuleSubtreeStream(adaptor,"rule constructTemplate");
        try { dbg.enterRule(getGrammarFileName(), "constructQuery");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(153, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:154:5: ( CONSTRUCT constructTemplate ( datasetClause )* whereClause solutionModifier -> ^( CONSTRUCT constructTemplate ( datasetClause )* ( whereClause )* ( solutionModifier )* ) | CONSTRUCT ( datasetClause )* WHERE OPEN_CURLY_BRACE ( triplesTemplate )? CLOSE_CURLY_BRACE solutionModifier -> ^( CONSTRUCT ( datasetClause )* ^( WHERE_CLAUSE ( triplesTemplate )* ) ( solutionModifier )* ) )
            int alt18=2;
            try { dbg.enterDecision(18);

            int LA18_0 = input.LA(1);

            if ( (LA18_0==CONSTRUCT) ) {
                int LA18_1 = input.LA(2);

                if ( (LA18_1==OPEN_CURLY_BRACE) ) {
                    alt18=1;
                }
                else if ( (LA18_1==FROM||LA18_1==WHERE) ) {
                    alt18=2;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 18, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(18);}

            switch (alt18) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:154:7: CONSTRUCT constructTemplate ( datasetClause )* whereClause solutionModifier
                    {
                    dbg.location(154,7);
                    CONSTRUCT45=(Token)match(input,CONSTRUCT,FOLLOW_CONSTRUCT_in_constructQuery755);  
                    stream_CONSTRUCT.add(CONSTRUCT45);

                    dbg.location(154,17);
                    pushFollow(FOLLOW_constructTemplate_in_constructQuery757);
                    constructTemplate46=constructTemplate();

                    state._fsp--;

                    stream_constructTemplate.add(constructTemplate46.getTree());
                    dbg.location(154,35);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:154:35: ( datasetClause )*
                    try { dbg.enterSubRule(15);

                    loop15:
                    do {
                        int alt15=2;
                        try { dbg.enterDecision(15);

                        int LA15_0 = input.LA(1);

                        if ( (LA15_0==FROM) ) {
                            alt15=1;
                        }


                        } finally {dbg.exitDecision(15);}

                        switch (alt15) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:154:35: datasetClause
                    	    {
                    	    dbg.location(154,35);
                    	    pushFollow(FOLLOW_datasetClause_in_constructQuery759);
                    	    datasetClause47=datasetClause();

                    	    state._fsp--;

                    	    stream_datasetClause.add(datasetClause47.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop15;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(15);}

                    dbg.location(154,50);
                    pushFollow(FOLLOW_whereClause_in_constructQuery762);
                    whereClause48=whereClause();

                    state._fsp--;

                    stream_whereClause.add(whereClause48.getTree());
                    dbg.location(154,62);
                    pushFollow(FOLLOW_solutionModifier_in_constructQuery764);
                    solutionModifier49=solutionModifier();

                    state._fsp--;

                    stream_solutionModifier.add(solutionModifier49.getTree());


                    // AST REWRITE
                    // elements: datasetClause, whereClause, solutionModifier, CONSTRUCT, constructTemplate
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 154:79: -> ^( CONSTRUCT constructTemplate ( datasetClause )* ( whereClause )* ( solutionModifier )* )
                    {
                        dbg.location(154,82);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:154:82: ^( CONSTRUCT constructTemplate ( datasetClause )* ( whereClause )* ( solutionModifier )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(154,84);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_CONSTRUCT.nextNode(), root_1);

                        dbg.location(154,94);
                        adaptor.addChild(root_1, stream_constructTemplate.nextTree());
                        dbg.location(154,112);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:154:112: ( datasetClause )*
                        while ( stream_datasetClause.hasNext() ) {
                            dbg.location(154,112);
                            adaptor.addChild(root_1, stream_datasetClause.nextTree());

                        }
                        stream_datasetClause.reset();
                        dbg.location(154,127);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:154:127: ( whereClause )*
                        while ( stream_whereClause.hasNext() ) {
                            dbg.location(154,127);
                            adaptor.addChild(root_1, stream_whereClause.nextTree());

                        }
                        stream_whereClause.reset();
                        dbg.location(154,140);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:154:140: ( solutionModifier )*
                        while ( stream_solutionModifier.hasNext() ) {
                            dbg.location(154,140);
                            adaptor.addChild(root_1, stream_solutionModifier.nextTree());

                        }
                        stream_solutionModifier.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:155:7: CONSTRUCT ( datasetClause )* WHERE OPEN_CURLY_BRACE ( triplesTemplate )? CLOSE_CURLY_BRACE solutionModifier
                    {
                    dbg.location(155,7);
                    CONSTRUCT50=(Token)match(input,CONSTRUCT,FOLLOW_CONSTRUCT_in_constructQuery789);  
                    stream_CONSTRUCT.add(CONSTRUCT50);

                    dbg.location(155,17);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:155:17: ( datasetClause )*
                    try { dbg.enterSubRule(16);

                    loop16:
                    do {
                        int alt16=2;
                        try { dbg.enterDecision(16);

                        int LA16_0 = input.LA(1);

                        if ( (LA16_0==FROM) ) {
                            alt16=1;
                        }


                        } finally {dbg.exitDecision(16);}

                        switch (alt16) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:155:17: datasetClause
                    	    {
                    	    dbg.location(155,17);
                    	    pushFollow(FOLLOW_datasetClause_in_constructQuery791);
                    	    datasetClause51=datasetClause();

                    	    state._fsp--;

                    	    stream_datasetClause.add(datasetClause51.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop16;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(16);}

                    dbg.location(155,32);
                    WHERE52=(Token)match(input,WHERE,FOLLOW_WHERE_in_constructQuery794);  
                    stream_WHERE.add(WHERE52);

                    dbg.location(155,38);
                    OPEN_CURLY_BRACE53=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_constructQuery796);  
                    stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE53);

                    dbg.location(155,55);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:155:55: ( triplesTemplate )?
                    int alt17=2;
                    try { dbg.enterSubRule(17);
                    try { dbg.enterDecision(17);

                    int LA17_0 = input.LA(1);

                    if ( (LA17_0==IRI_REF||LA17_0==PNAME_NS||LA17_0==OPEN_BRACE||LA17_0==INTEGER||LA17_0==OPEN_SQUARE_BRACKET||(LA17_0>=VAR1 && LA17_0<=VAR2)||(LA17_0>=DECIMAL && LA17_0<=BLANK_NODE_LABEL)) ) {
                        alt17=1;
                    }
                    } finally {dbg.exitDecision(17);}

                    switch (alt17) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:155:55: triplesTemplate
                            {
                            dbg.location(155,55);
                            pushFollow(FOLLOW_triplesTemplate_in_constructQuery798);
                            triplesTemplate54=triplesTemplate();

                            state._fsp--;

                            stream_triplesTemplate.add(triplesTemplate54.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(17);}

                    dbg.location(155,72);
                    CLOSE_CURLY_BRACE55=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_constructQuery801);  
                    stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE55);

                    dbg.location(155,90);
                    pushFollow(FOLLOW_solutionModifier_in_constructQuery803);
                    solutionModifier56=solutionModifier();

                    state._fsp--;

                    stream_solutionModifier.add(solutionModifier56.getTree());


                    // AST REWRITE
                    // elements: solutionModifier, CONSTRUCT, triplesTemplate, datasetClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 155:107: -> ^( CONSTRUCT ( datasetClause )* ^( WHERE_CLAUSE ( triplesTemplate )* ) ( solutionModifier )* )
                    {
                        dbg.location(155,110);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:155:110: ^( CONSTRUCT ( datasetClause )* ^( WHERE_CLAUSE ( triplesTemplate )* ) ( solutionModifier )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(155,112);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_CONSTRUCT.nextNode(), root_1);

                        dbg.location(155,122);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:155:122: ( datasetClause )*
                        while ( stream_datasetClause.hasNext() ) {
                            dbg.location(155,122);
                            adaptor.addChild(root_1, stream_datasetClause.nextTree());

                        }
                        stream_datasetClause.reset();
                        dbg.location(155,137);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:155:137: ^( WHERE_CLAUSE ( triplesTemplate )* )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        dbg.location(155,139);
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_CLAUSE, "WHERE_CLAUSE"), root_2);

                        dbg.location(155,152);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:155:152: ( triplesTemplate )*
                        while ( stream_triplesTemplate.hasNext() ) {
                            dbg.location(155,152);
                            adaptor.addChild(root_2, stream_triplesTemplate.nextTree());

                        }
                        stream_triplesTemplate.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        dbg.location(155,170);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:155:170: ( solutionModifier )*
                        while ( stream_solutionModifier.hasNext() ) {
                            dbg.location(155,170);
                            adaptor.addChild(root_1, stream_solutionModifier.nextTree());

                        }
                        stream_solutionModifier.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(156, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "constructQuery");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "constructQuery"

    public static class describeQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "describeQuery"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:158:1: describeQuery : DESCRIBE ( (v+= varOrIRIref )+ | ASTERISK ) ( datasetClause )* ( whereClause )? solutionModifier -> ^( DESCRIBE ( $v)* ( ASTERISK )* ( datasetClause )* ( whereClause )? ( solutionModifier )* ) ;
    public final SparqlParser.describeQuery_return describeQuery() throws RecognitionException {
        SparqlParser.describeQuery_return retval = new SparqlParser.describeQuery_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DESCRIBE57=null;
        Token ASTERISK58=null;
        List list_v=null;
        SparqlParser.datasetClause_return datasetClause59 = null;

        SparqlParser.whereClause_return whereClause60 = null;

        SparqlParser.solutionModifier_return solutionModifier61 = null;

        RuleReturnScope v = null;
        CommonTree DESCRIBE57_tree=null;
        CommonTree ASTERISK58_tree=null;
        RewriteRuleTokenStream stream_ASTERISK=new RewriteRuleTokenStream(adaptor,"token ASTERISK");
        RewriteRuleTokenStream stream_DESCRIBE=new RewriteRuleTokenStream(adaptor,"token DESCRIBE");
        RewriteRuleSubtreeStream stream_varOrIRIref=new RewriteRuleSubtreeStream(adaptor,"rule varOrIRIref");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_datasetClause=new RewriteRuleSubtreeStream(adaptor,"rule datasetClause");
        RewriteRuleSubtreeStream stream_solutionModifier=new RewriteRuleSubtreeStream(adaptor,"rule solutionModifier");
        try { dbg.enterRule(getGrammarFileName(), "describeQuery");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(158, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:159:5: ( DESCRIBE ( (v+= varOrIRIref )+ | ASTERISK ) ( datasetClause )* ( whereClause )? solutionModifier -> ^( DESCRIBE ( $v)* ( ASTERISK )* ( datasetClause )* ( whereClause )? ( solutionModifier )* ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:159:7: DESCRIBE ( (v+= varOrIRIref )+ | ASTERISK ) ( datasetClause )* ( whereClause )? solutionModifier
            {
            dbg.location(159,7);
            DESCRIBE57=(Token)match(input,DESCRIBE,FOLLOW_DESCRIBE_in_describeQuery839);  
            stream_DESCRIBE.add(DESCRIBE57);

            dbg.location(159,16);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:159:16: ( (v+= varOrIRIref )+ | ASTERISK )
            int alt20=2;
            try { dbg.enterSubRule(20);
            try { dbg.enterDecision(20);

            int LA20_0 = input.LA(1);

            if ( (LA20_0==IRI_REF||LA20_0==PNAME_NS||(LA20_0>=VAR1 && LA20_0<=VAR2)||LA20_0==PNAME_LN) ) {
                alt20=1;
            }
            else if ( (LA20_0==ASTERISK) ) {
                alt20=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(20);}

            switch (alt20) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:159:17: (v+= varOrIRIref )+
                    {
                    dbg.location(159,17);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:159:17: (v+= varOrIRIref )+
                    int cnt19=0;
                    try { dbg.enterSubRule(19);

                    loop19:
                    do {
                        int alt19=2;
                        try { dbg.enterDecision(19);

                        int LA19_0 = input.LA(1);

                        if ( (LA19_0==IRI_REF||LA19_0==PNAME_NS||(LA19_0>=VAR1 && LA19_0<=VAR2)||LA19_0==PNAME_LN) ) {
                            alt19=1;
                        }


                        } finally {dbg.exitDecision(19);}

                        switch (alt19) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:159:18: v+= varOrIRIref
                    	    {
                    	    dbg.location(159,19);
                    	    pushFollow(FOLLOW_varOrIRIref_in_describeQuery845);
                    	    v=varOrIRIref();

                    	    state._fsp--;

                    	    stream_varOrIRIref.add(v.getTree());
                    	    if (list_v==null) list_v=new ArrayList();
                    	    list_v.add(v.getTree());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt19 >= 1 ) break loop19;
                                EarlyExitException eee =
                                    new EarlyExitException(19, input);
                                dbg.recognitionException(eee);

                                throw eee;
                        }
                        cnt19++;
                    } while (true);
                    } finally {dbg.exitSubRule(19);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:159:37: ASTERISK
                    {
                    dbg.location(159,37);
                    ASTERISK58=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_describeQuery851);  
                    stream_ASTERISK.add(ASTERISK58);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(20);}

            dbg.location(159,47);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:159:47: ( datasetClause )*
            try { dbg.enterSubRule(21);

            loop21:
            do {
                int alt21=2;
                try { dbg.enterDecision(21);

                int LA21_0 = input.LA(1);

                if ( (LA21_0==FROM) ) {
                    alt21=1;
                }


                } finally {dbg.exitDecision(21);}

                switch (alt21) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:159:47: datasetClause
            	    {
            	    dbg.location(159,47);
            	    pushFollow(FOLLOW_datasetClause_in_describeQuery854);
            	    datasetClause59=datasetClause();

            	    state._fsp--;

            	    stream_datasetClause.add(datasetClause59.getTree());

            	    }
            	    break;

            	default :
            	    break loop21;
                }
            } while (true);
            } finally {dbg.exitSubRule(21);}

            dbg.location(159,62);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:159:62: ( whereClause )?
            int alt22=2;
            try { dbg.enterSubRule(22);
            try { dbg.enterDecision(22);

            int LA22_0 = input.LA(1);

            if ( ((LA22_0>=WHERE && LA22_0<=OPEN_CURLY_BRACE)) ) {
                alt22=1;
            }
            } finally {dbg.exitDecision(22);}

            switch (alt22) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:159:62: whereClause
                    {
                    dbg.location(159,62);
                    pushFollow(FOLLOW_whereClause_in_describeQuery857);
                    whereClause60=whereClause();

                    state._fsp--;

                    stream_whereClause.add(whereClause60.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(22);}

            dbg.location(159,75);
            pushFollow(FOLLOW_solutionModifier_in_describeQuery860);
            solutionModifier61=solutionModifier();

            state._fsp--;

            stream_solutionModifier.add(solutionModifier61.getTree());


            // AST REWRITE
            // elements: DESCRIBE, ASTERISK, datasetClause, v, solutionModifier, whereClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: v
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"token v",list_v);
            root_0 = (CommonTree)adaptor.nil();
            // 159:92: -> ^( DESCRIBE ( $v)* ( ASTERISK )* ( datasetClause )* ( whereClause )? ( solutionModifier )* )
            {
                dbg.location(159,95);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:159:95: ^( DESCRIBE ( $v)* ( ASTERISK )* ( datasetClause )* ( whereClause )? ( solutionModifier )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(159,97);
                root_1 = (CommonTree)adaptor.becomeRoot(stream_DESCRIBE.nextNode(), root_1);

                dbg.location(159,106);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:159:106: ( $v)*
                while ( stream_v.hasNext() ) {
                    dbg.location(159,106);
                    adaptor.addChild(root_1, stream_v.nextTree());

                }
                stream_v.reset();
                dbg.location(159,110);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:159:110: ( ASTERISK )*
                while ( stream_ASTERISK.hasNext() ) {
                    dbg.location(159,110);
                    adaptor.addChild(root_1, stream_ASTERISK.nextNode());

                }
                stream_ASTERISK.reset();
                dbg.location(159,120);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:159:120: ( datasetClause )*
                while ( stream_datasetClause.hasNext() ) {
                    dbg.location(159,120);
                    adaptor.addChild(root_1, stream_datasetClause.nextTree());

                }
                stream_datasetClause.reset();
                dbg.location(159,135);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:159:135: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    dbg.location(159,135);
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();
                dbg.location(159,148);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:159:148: ( solutionModifier )*
                while ( stream_solutionModifier.hasNext() ) {
                    dbg.location(159,148);
                    adaptor.addChild(root_1, stream_solutionModifier.nextTree());

                }
                stream_solutionModifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(160, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "describeQuery");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "describeQuery"

    public static class askQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "askQuery"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:162:1: askQuery : ASK ( datasetClause )* whereClause solutionModifier -> ^( ASK ( datasetClause )* whereClause ( solutionModifier )* ) ;
    public final SparqlParser.askQuery_return askQuery() throws RecognitionException {
        SparqlParser.askQuery_return retval = new SparqlParser.askQuery_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ASK62=null;
        SparqlParser.datasetClause_return datasetClause63 = null;

        SparqlParser.whereClause_return whereClause64 = null;

        SparqlParser.solutionModifier_return solutionModifier65 = null;


        CommonTree ASK62_tree=null;
        RewriteRuleTokenStream stream_ASK=new RewriteRuleTokenStream(adaptor,"token ASK");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_datasetClause=new RewriteRuleSubtreeStream(adaptor,"rule datasetClause");
        RewriteRuleSubtreeStream stream_solutionModifier=new RewriteRuleSubtreeStream(adaptor,"rule solutionModifier");
        try { dbg.enterRule(getGrammarFileName(), "askQuery");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(162, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:163:5: ( ASK ( datasetClause )* whereClause solutionModifier -> ^( ASK ( datasetClause )* whereClause ( solutionModifier )* ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:163:7: ASK ( datasetClause )* whereClause solutionModifier
            {
            dbg.location(163,7);
            ASK62=(Token)match(input,ASK,FOLLOW_ASK_in_askQuery899);  
            stream_ASK.add(ASK62);

            dbg.location(163,11);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:163:11: ( datasetClause )*
            try { dbg.enterSubRule(23);

            loop23:
            do {
                int alt23=2;
                try { dbg.enterDecision(23);

                int LA23_0 = input.LA(1);

                if ( (LA23_0==FROM) ) {
                    alt23=1;
                }


                } finally {dbg.exitDecision(23);}

                switch (alt23) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:163:11: datasetClause
            	    {
            	    dbg.location(163,11);
            	    pushFollow(FOLLOW_datasetClause_in_askQuery901);
            	    datasetClause63=datasetClause();

            	    state._fsp--;

            	    stream_datasetClause.add(datasetClause63.getTree());

            	    }
            	    break;

            	default :
            	    break loop23;
                }
            } while (true);
            } finally {dbg.exitSubRule(23);}

            dbg.location(163,26);
            pushFollow(FOLLOW_whereClause_in_askQuery904);
            whereClause64=whereClause();

            state._fsp--;

            stream_whereClause.add(whereClause64.getTree());
            dbg.location(163,38);
            pushFollow(FOLLOW_solutionModifier_in_askQuery906);
            solutionModifier65=solutionModifier();

            state._fsp--;

            stream_solutionModifier.add(solutionModifier65.getTree());


            // AST REWRITE
            // elements: datasetClause, ASK, solutionModifier, whereClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 163:55: -> ^( ASK ( datasetClause )* whereClause ( solutionModifier )* )
            {
                dbg.location(163,58);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:163:58: ^( ASK ( datasetClause )* whereClause ( solutionModifier )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(163,60);
                root_1 = (CommonTree)adaptor.becomeRoot(stream_ASK.nextNode(), root_1);

                dbg.location(163,64);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:163:64: ( datasetClause )*
                while ( stream_datasetClause.hasNext() ) {
                    dbg.location(163,64);
                    adaptor.addChild(root_1, stream_datasetClause.nextTree());

                }
                stream_datasetClause.reset();
                dbg.location(163,79);
                adaptor.addChild(root_1, stream_whereClause.nextTree());
                dbg.location(163,91);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:163:91: ( solutionModifier )*
                while ( stream_solutionModifier.hasNext() ) {
                    dbg.location(163,91);
                    adaptor.addChild(root_1, stream_solutionModifier.nextTree());

                }
                stream_solutionModifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(164, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "askQuery");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "askQuery"

    public static class datasetClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "datasetClause"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:166:1: datasetClause : FROM ( NAMED )? iriRef -> ^( FROM ( NAMED )? iriRef ) ;
    public final SparqlParser.datasetClause_return datasetClause() throws RecognitionException {
        SparqlParser.datasetClause_return retval = new SparqlParser.datasetClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token FROM66=null;
        Token NAMED67=null;
        SparqlParser.iriRef_return iriRef68 = null;


        CommonTree FROM66_tree=null;
        CommonTree NAMED67_tree=null;
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_NAMED=new RewriteRuleTokenStream(adaptor,"token NAMED");
        RewriteRuleSubtreeStream stream_iriRef=new RewriteRuleSubtreeStream(adaptor,"rule iriRef");
        try { dbg.enterRule(getGrammarFileName(), "datasetClause");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(166, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:167:5: ( FROM ( NAMED )? iriRef -> ^( FROM ( NAMED )? iriRef ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:167:7: FROM ( NAMED )? iriRef
            {
            dbg.location(167,7);
            FROM66=(Token)match(input,FROM,FOLLOW_FROM_in_datasetClause937);  
            stream_FROM.add(FROM66);

            dbg.location(167,12);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:167:12: ( NAMED )?
            int alt24=2;
            try { dbg.enterSubRule(24);
            try { dbg.enterDecision(24);

            int LA24_0 = input.LA(1);

            if ( (LA24_0==NAMED) ) {
                alt24=1;
            }
            } finally {dbg.exitDecision(24);}

            switch (alt24) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:167:12: NAMED
                    {
                    dbg.location(167,12);
                    NAMED67=(Token)match(input,NAMED,FOLLOW_NAMED_in_datasetClause939);  
                    stream_NAMED.add(NAMED67);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(24);}

            dbg.location(167,19);
            pushFollow(FOLLOW_iriRef_in_datasetClause942);
            iriRef68=iriRef();

            state._fsp--;

            stream_iriRef.add(iriRef68.getTree());


            // AST REWRITE
            // elements: iriRef, NAMED, FROM
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 167:26: -> ^( FROM ( NAMED )? iriRef )
            {
                dbg.location(167,29);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:167:29: ^( FROM ( NAMED )? iriRef )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(167,31);
                root_1 = (CommonTree)adaptor.becomeRoot(stream_FROM.nextNode(), root_1);

                dbg.location(167,36);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:167:36: ( NAMED )?
                if ( stream_NAMED.hasNext() ) {
                    dbg.location(167,36);
                    adaptor.addChild(root_1, stream_NAMED.nextNode());

                }
                stream_NAMED.reset();
                dbg.location(167,43);
                adaptor.addChild(root_1, stream_iriRef.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(168, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "datasetClause");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "datasetClause"

    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whereClause"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:170:1: whereClause : ( WHERE )? groupGraphPattern -> groupGraphPattern ;
    public final SparqlParser.whereClause_return whereClause() throws RecognitionException {
        SparqlParser.whereClause_return retval = new SparqlParser.whereClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token WHERE69=null;
        SparqlParser.groupGraphPattern_return groupGraphPattern70 = null;


        CommonTree WHERE69_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try { dbg.enterRule(getGrammarFileName(), "whereClause");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(170, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:171:5: ( ( WHERE )? groupGraphPattern -> groupGraphPattern )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:171:7: ( WHERE )? groupGraphPattern
            {
            dbg.location(171,7);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:171:7: ( WHERE )?
            int alt25=2;
            try { dbg.enterSubRule(25);
            try { dbg.enterDecision(25);

            int LA25_0 = input.LA(1);

            if ( (LA25_0==WHERE) ) {
                alt25=1;
            }
            } finally {dbg.exitDecision(25);}

            switch (alt25) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:171:7: WHERE
                    {
                    dbg.location(171,7);
                    WHERE69=(Token)match(input,WHERE,FOLLOW_WHERE_in_whereClause970);  
                    stream_WHERE.add(WHERE69);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(25);}

            dbg.location(171,14);
            pushFollow(FOLLOW_groupGraphPattern_in_whereClause973);
            groupGraphPattern70=groupGraphPattern();

            state._fsp--;

            stream_groupGraphPattern.add(groupGraphPattern70.getTree());


            // AST REWRITE
            // elements: groupGraphPattern
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 171:32: -> groupGraphPattern
            {
                dbg.location(171,36);
                adaptor.addChild(root_0, stream_groupGraphPattern.nextTree());

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(172, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "whereClause");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "whereClause"

    public static class solutionModifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "solutionModifier"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:174:1: solutionModifier : ( groupClause )? ( havingClause )? ( orderClause )? ( limitOffsetClauses )? -> ( groupClause )* ( havingClause )* ( orderClause )* ( limitOffsetClauses )* ;
    public final SparqlParser.solutionModifier_return solutionModifier() throws RecognitionException {
        SparqlParser.solutionModifier_return retval = new SparqlParser.solutionModifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        SparqlParser.groupClause_return groupClause71 = null;

        SparqlParser.havingClause_return havingClause72 = null;

        SparqlParser.orderClause_return orderClause73 = null;

        SparqlParser.limitOffsetClauses_return limitOffsetClauses74 = null;


        RewriteRuleSubtreeStream stream_limitOffsetClauses=new RewriteRuleSubtreeStream(adaptor,"rule limitOffsetClauses");
        RewriteRuleSubtreeStream stream_orderClause=new RewriteRuleSubtreeStream(adaptor,"rule orderClause");
        RewriteRuleSubtreeStream stream_groupClause=new RewriteRuleSubtreeStream(adaptor,"rule groupClause");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        try { dbg.enterRule(getGrammarFileName(), "solutionModifier");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(174, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:175:5: ( ( groupClause )? ( havingClause )? ( orderClause )? ( limitOffsetClauses )? -> ( groupClause )* ( havingClause )* ( orderClause )* ( limitOffsetClauses )* )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:175:7: ( groupClause )? ( havingClause )? ( orderClause )? ( limitOffsetClauses )?
            {
            dbg.location(175,7);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:175:7: ( groupClause )?
            int alt26=2;
            try { dbg.enterSubRule(26);
            try { dbg.enterDecision(26);

            int LA26_0 = input.LA(1);

            if ( (LA26_0==GROUP) ) {
                alt26=1;
            }
            } finally {dbg.exitDecision(26);}

            switch (alt26) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:175:7: groupClause
                    {
                    dbg.location(175,7);
                    pushFollow(FOLLOW_groupClause_in_solutionModifier995);
                    groupClause71=groupClause();

                    state._fsp--;

                    stream_groupClause.add(groupClause71.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(26);}

            dbg.location(175,20);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:175:20: ( havingClause )?
            int alt27=2;
            try { dbg.enterSubRule(27);
            try { dbg.enterDecision(27);

            int LA27_0 = input.LA(1);

            if ( (LA27_0==HAVING) ) {
                alt27=1;
            }
            } finally {dbg.exitDecision(27);}

            switch (alt27) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:175:20: havingClause
                    {
                    dbg.location(175,20);
                    pushFollow(FOLLOW_havingClause_in_solutionModifier998);
                    havingClause72=havingClause();

                    state._fsp--;

                    stream_havingClause.add(havingClause72.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(27);}

            dbg.location(175,34);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:175:34: ( orderClause )?
            int alt28=2;
            try { dbg.enterSubRule(28);
            try { dbg.enterDecision(28);

            int LA28_0 = input.LA(1);

            if ( (LA28_0==ORDER) ) {
                alt28=1;
            }
            } finally {dbg.exitDecision(28);}

            switch (alt28) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:175:34: orderClause
                    {
                    dbg.location(175,34);
                    pushFollow(FOLLOW_orderClause_in_solutionModifier1001);
                    orderClause73=orderClause();

                    state._fsp--;

                    stream_orderClause.add(orderClause73.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(28);}

            dbg.location(175,47);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:175:47: ( limitOffsetClauses )?
            int alt29=2;
            try { dbg.enterSubRule(29);
            try { dbg.enterDecision(29);

            int LA29_0 = input.LA(1);

            if ( (LA29_0==LIMIT||LA29_0==OFFSET) ) {
                alt29=1;
            }
            } finally {dbg.exitDecision(29);}

            switch (alt29) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:175:47: limitOffsetClauses
                    {
                    dbg.location(175,47);
                    pushFollow(FOLLOW_limitOffsetClauses_in_solutionModifier1004);
                    limitOffsetClauses74=limitOffsetClauses();

                    state._fsp--;

                    stream_limitOffsetClauses.add(limitOffsetClauses74.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(29);}



            // AST REWRITE
            // elements: orderClause, havingClause, groupClause, limitOffsetClauses
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 175:67: -> ( groupClause )* ( havingClause )* ( orderClause )* ( limitOffsetClauses )*
            {
                dbg.location(175,70);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:175:70: ( groupClause )*
                while ( stream_groupClause.hasNext() ) {
                    dbg.location(175,70);
                    adaptor.addChild(root_0, stream_groupClause.nextTree());

                }
                stream_groupClause.reset();
                dbg.location(175,83);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:175:83: ( havingClause )*
                while ( stream_havingClause.hasNext() ) {
                    dbg.location(175,83);
                    adaptor.addChild(root_0, stream_havingClause.nextTree());

                }
                stream_havingClause.reset();
                dbg.location(175,97);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:175:97: ( orderClause )*
                while ( stream_orderClause.hasNext() ) {
                    dbg.location(175,97);
                    adaptor.addChild(root_0, stream_orderClause.nextTree());

                }
                stream_orderClause.reset();
                dbg.location(175,110);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:175:110: ( limitOffsetClauses )*
                while ( stream_limitOffsetClauses.hasNext() ) {
                    dbg.location(175,110);
                    adaptor.addChild(root_0, stream_limitOffsetClauses.nextTree());

                }
                stream_limitOffsetClauses.reset();

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(176, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "solutionModifier");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "solutionModifier"

    public static class groupClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupClause"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:178:1: groupClause : GROUP BY ( groupCondition )+ -> ^( GROUP_BY ( groupCondition )+ ) ;
    public final SparqlParser.groupClause_return groupClause() throws RecognitionException {
        SparqlParser.groupClause_return retval = new SparqlParser.groupClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token GROUP75=null;
        Token BY76=null;
        SparqlParser.groupCondition_return groupCondition77 = null;


        CommonTree GROUP75_tree=null;
        CommonTree BY76_tree=null;
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleSubtreeStream stream_groupCondition=new RewriteRuleSubtreeStream(adaptor,"rule groupCondition");
        try { dbg.enterRule(getGrammarFileName(), "groupClause");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(178, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:179:5: ( GROUP BY ( groupCondition )+ -> ^( GROUP_BY ( groupCondition )+ ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:179:7: GROUP BY ( groupCondition )+
            {
            dbg.location(179,7);
            GROUP75=(Token)match(input,GROUP,FOLLOW_GROUP_in_groupClause1036);  
            stream_GROUP.add(GROUP75);

            dbg.location(179,13);
            BY76=(Token)match(input,BY,FOLLOW_BY_in_groupClause1038);  
            stream_BY.add(BY76);

            dbg.location(179,16);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:179:16: ( groupCondition )+
            int cnt30=0;
            try { dbg.enterSubRule(30);

            loop30:
            do {
                int alt30=2;
                try { dbg.enterDecision(30);

                int LA30_0 = input.LA(1);

                if ( (LA30_0==IRI_REF||LA30_0==PNAME_NS||LA30_0==OPEN_BRACE||(LA30_0>=VAR1 && LA30_0<=VAR2)||LA30_0==NOT||(LA30_0>=STR && LA30_0<=EXISTS)||LA30_0==PNAME_LN) ) {
                    alt30=1;
                }


                } finally {dbg.exitDecision(30);}

                switch (alt30) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:179:16: groupCondition
            	    {
            	    dbg.location(179,16);
            	    pushFollow(FOLLOW_groupCondition_in_groupClause1040);
            	    groupCondition77=groupCondition();

            	    state._fsp--;

            	    stream_groupCondition.add(groupCondition77.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt30 >= 1 ) break loop30;
                        EarlyExitException eee =
                            new EarlyExitException(30, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt30++;
            } while (true);
            } finally {dbg.exitSubRule(30);}



            // AST REWRITE
            // elements: groupCondition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 179:32: -> ^( GROUP_BY ( groupCondition )+ )
            {
                dbg.location(179,35);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:179:35: ^( GROUP_BY ( groupCondition )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(179,37);
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_BY, "GROUP_BY"), root_1);

                dbg.location(179,46);
                if ( !(stream_groupCondition.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_groupCondition.hasNext() ) {
                    dbg.location(179,46);
                    adaptor.addChild(root_1, stream_groupCondition.nextTree());

                }
                stream_groupCondition.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(180, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "groupClause");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "groupClause"

    public static class groupCondition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupCondition"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:182:1: groupCondition : ( builtInCall -> ^( GROUP_CONDITION builtInCall ) | functionCall -> ^( GROUP_CONDITION functionCall ) | OPEN_BRACE expression ( AS var )? CLOSE_BRACE -> ^( GROUP_CONDITION expression ( var )? ) | var -> ^( GROUP_CONDITION var ) );
    public final SparqlParser.groupCondition_return groupCondition() throws RecognitionException {
        SparqlParser.groupCondition_return retval = new SparqlParser.groupCondition_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token OPEN_BRACE80=null;
        Token AS82=null;
        Token CLOSE_BRACE84=null;
        SparqlParser.builtInCall_return builtInCall78 = null;

        SparqlParser.functionCall_return functionCall79 = null;

        SparqlParser.expression_return expression81 = null;

        SparqlParser.var_return var83 = null;

        SparqlParser.var_return var85 = null;


        CommonTree OPEN_BRACE80_tree=null;
        CommonTree AS82_tree=null;
        CommonTree CLOSE_BRACE84_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_functionCall=new RewriteRuleSubtreeStream(adaptor,"rule functionCall");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        RewriteRuleSubtreeStream stream_builtInCall=new RewriteRuleSubtreeStream(adaptor,"rule builtInCall");
        try { dbg.enterRule(getGrammarFileName(), "groupCondition");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(182, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:183:5: ( builtInCall -> ^( GROUP_CONDITION builtInCall ) | functionCall -> ^( GROUP_CONDITION functionCall ) | OPEN_BRACE expression ( AS var )? CLOSE_BRACE -> ^( GROUP_CONDITION expression ( var )? ) | var -> ^( GROUP_CONDITION var ) )
            int alt32=4;
            try { dbg.enterDecision(32);

            switch ( input.LA(1) ) {
            case NOT:
            case STR:
            case LANG:
            case LANGMATCHES:
            case DATATYPE:
            case BOUND:
            case IRI:
            case URI:
            case BNODE:
            case RAND:
            case ABS:
            case CEIL:
            case FLOOR:
            case ROUND:
            case CONCAT:
            case STRLEN:
            case UCASE:
            case LCASE:
            case ENCODE_FOR_URI:
            case CONTAINS:
            case STRSTARTS:
            case STRENDS:
            case STRBEFORE:
            case STRAFTER:
            case YEAR:
            case MONTH:
            case DAY:
            case HOURS:
            case MINUTES:
            case SECONDS:
            case TIMEZONE:
            case TZ:
            case NOW:
            case MD5:
            case SHA1:
            case SHA256:
            case SHA384:
            case SHA512:
            case COALESCE:
            case IF:
            case STRLANG:
            case STRDT:
            case SAMETERM:
            case ISIRI:
            case ISURI:
            case ISBLANK:
            case ISLITERAL:
            case ISNUMERIC:
            case REGEX:
            case SUBSTR:
            case REPLACE:
            case EXISTS:
                {
                alt32=1;
                }
                break;
            case IRI_REF:
            case PNAME_NS:
            case PNAME_LN:
                {
                alt32=2;
                }
                break;
            case OPEN_BRACE:
                {
                alt32=3;
                }
                break;
            case VAR1:
            case VAR2:
                {
                alt32=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(32);}

            switch (alt32) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:183:7: builtInCall
                    {
                    dbg.location(183,7);
                    pushFollow(FOLLOW_builtInCall_in_groupCondition1074);
                    builtInCall78=builtInCall();

                    state._fsp--;

                    stream_builtInCall.add(builtInCall78.getTree());


                    // AST REWRITE
                    // elements: builtInCall
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 183:19: -> ^( GROUP_CONDITION builtInCall )
                    {
                        dbg.location(183,22);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:183:22: ^( GROUP_CONDITION builtInCall )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(183,24);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_CONDITION, "GROUP_CONDITION"), root_1);

                        dbg.location(183,40);
                        adaptor.addChild(root_1, stream_builtInCall.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:184:7: functionCall
                    {
                    dbg.location(184,7);
                    pushFollow(FOLLOW_functionCall_in_groupCondition1090);
                    functionCall79=functionCall();

                    state._fsp--;

                    stream_functionCall.add(functionCall79.getTree());


                    // AST REWRITE
                    // elements: functionCall
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 184:20: -> ^( GROUP_CONDITION functionCall )
                    {
                        dbg.location(184,23);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:184:23: ^( GROUP_CONDITION functionCall )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(184,25);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_CONDITION, "GROUP_CONDITION"), root_1);

                        dbg.location(184,41);
                        adaptor.addChild(root_1, stream_functionCall.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:185:7: OPEN_BRACE expression ( AS var )? CLOSE_BRACE
                    {
                    dbg.location(185,7);
                    OPEN_BRACE80=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_groupCondition1106);  
                    stream_OPEN_BRACE.add(OPEN_BRACE80);

                    dbg.location(185,18);
                    pushFollow(FOLLOW_expression_in_groupCondition1108);
                    expression81=expression();

                    state._fsp--;

                    stream_expression.add(expression81.getTree());
                    dbg.location(185,29);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:185:29: ( AS var )?
                    int alt31=2;
                    try { dbg.enterSubRule(31);
                    try { dbg.enterDecision(31);

                    int LA31_0 = input.LA(1);

                    if ( (LA31_0==AS) ) {
                        alt31=1;
                    }
                    } finally {dbg.exitDecision(31);}

                    switch (alt31) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:185:30: AS var
                            {
                            dbg.location(185,30);
                            AS82=(Token)match(input,AS,FOLLOW_AS_in_groupCondition1111);  
                            stream_AS.add(AS82);

                            dbg.location(185,33);
                            pushFollow(FOLLOW_var_in_groupCondition1113);
                            var83=var();

                            state._fsp--;

                            stream_var.add(var83.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(31);}

                    dbg.location(185,39);
                    CLOSE_BRACE84=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_groupCondition1117);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE84);



                    // AST REWRITE
                    // elements: expression, var
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 185:51: -> ^( GROUP_CONDITION expression ( var )? )
                    {
                        dbg.location(185,54);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:185:54: ^( GROUP_CONDITION expression ( var )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(185,56);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_CONDITION, "GROUP_CONDITION"), root_1);

                        dbg.location(185,72);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        dbg.location(185,83);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:185:83: ( var )?
                        if ( stream_var.hasNext() ) {
                            dbg.location(185,83);
                            adaptor.addChild(root_1, stream_var.nextTree());

                        }
                        stream_var.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:186:7: var
                    {
                    dbg.location(186,7);
                    pushFollow(FOLLOW_var_in_groupCondition1136);
                    var85=var();

                    state._fsp--;

                    stream_var.add(var85.getTree());


                    // AST REWRITE
                    // elements: var
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 186:11: -> ^( GROUP_CONDITION var )
                    {
                        dbg.location(186,14);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:186:14: ^( GROUP_CONDITION var )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(186,16);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_CONDITION, "GROUP_CONDITION"), root_1);

                        dbg.location(186,32);
                        adaptor.addChild(root_1, stream_var.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(187, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "groupCondition");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "groupCondition"

    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "havingClause"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:189:1: havingClause : HAVING ( constraint )+ -> ^( HAVING ( constraint )+ ) ;
    public final SparqlParser.havingClause_return havingClause() throws RecognitionException {
        SparqlParser.havingClause_return retval = new SparqlParser.havingClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token HAVING86=null;
        SparqlParser.constraint_return constraint87 = null;


        CommonTree HAVING86_tree=null;
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleSubtreeStream stream_constraint=new RewriteRuleSubtreeStream(adaptor,"rule constraint");
        try { dbg.enterRule(getGrammarFileName(), "havingClause");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(189, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:190:5: ( HAVING ( constraint )+ -> ^( HAVING ( constraint )+ ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:190:7: HAVING ( constraint )+
            {
            dbg.location(190,7);
            HAVING86=(Token)match(input,HAVING,FOLLOW_HAVING_in_havingClause1165);  
            stream_HAVING.add(HAVING86);

            dbg.location(190,14);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:190:14: ( constraint )+
            int cnt33=0;
            try { dbg.enterSubRule(33);

            loop33:
            do {
                int alt33=2;
                try { dbg.enterDecision(33);

                int LA33_0 = input.LA(1);

                if ( (LA33_0==IRI_REF||LA33_0==PNAME_NS||LA33_0==OPEN_BRACE||LA33_0==NOT||(LA33_0>=STR && LA33_0<=EXISTS)||LA33_0==PNAME_LN) ) {
                    alt33=1;
                }


                } finally {dbg.exitDecision(33);}

                switch (alt33) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:190:14: constraint
            	    {
            	    dbg.location(190,14);
            	    pushFollow(FOLLOW_constraint_in_havingClause1167);
            	    constraint87=constraint();

            	    state._fsp--;

            	    stream_constraint.add(constraint87.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt33 >= 1 ) break loop33;
                        EarlyExitException eee =
                            new EarlyExitException(33, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt33++;
            } while (true);
            } finally {dbg.exitSubRule(33);}



            // AST REWRITE
            // elements: constraint, HAVING
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 190:26: -> ^( HAVING ( constraint )+ )
            {
                dbg.location(190,29);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:190:29: ^( HAVING ( constraint )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(190,31);
                root_1 = (CommonTree)adaptor.becomeRoot(stream_HAVING.nextNode(), root_1);

                dbg.location(190,38);
                if ( !(stream_constraint.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_constraint.hasNext() ) {
                    dbg.location(190,38);
                    adaptor.addChild(root_1, stream_constraint.nextTree());

                }
                stream_constraint.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(191, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "havingClause");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "havingClause"

    public static class orderClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderClause"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:193:1: orderClause : ORDER BY ( orderCondition )+ -> ^( ORDER_BY ( orderCondition )+ ) ;
    public final SparqlParser.orderClause_return orderClause() throws RecognitionException {
        SparqlParser.orderClause_return retval = new SparqlParser.orderClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ORDER88=null;
        Token BY89=null;
        SparqlParser.orderCondition_return orderCondition90 = null;


        CommonTree ORDER88_tree=null;
        CommonTree BY89_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleSubtreeStream stream_orderCondition=new RewriteRuleSubtreeStream(adaptor,"rule orderCondition");
        try { dbg.enterRule(getGrammarFileName(), "orderClause");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(193, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:194:5: ( ORDER BY ( orderCondition )+ -> ^( ORDER_BY ( orderCondition )+ ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:194:7: ORDER BY ( orderCondition )+
            {
            dbg.location(194,7);
            ORDER88=(Token)match(input,ORDER,FOLLOW_ORDER_in_orderClause1199);  
            stream_ORDER.add(ORDER88);

            dbg.location(194,13);
            BY89=(Token)match(input,BY,FOLLOW_BY_in_orderClause1201);  
            stream_BY.add(BY89);

            dbg.location(194,16);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:194:16: ( orderCondition )+
            int cnt34=0;
            try { dbg.enterSubRule(34);

            loop34:
            do {
                int alt34=2;
                try { dbg.enterDecision(34);

                int LA34_0 = input.LA(1);

                if ( (LA34_0==IRI_REF||LA34_0==PNAME_NS||LA34_0==OPEN_BRACE||(LA34_0>=ASC && LA34_0<=DESC)||(LA34_0>=VAR1 && LA34_0<=VAR2)||LA34_0==NOT||(LA34_0>=STR && LA34_0<=EXISTS)||LA34_0==PNAME_LN) ) {
                    alt34=1;
                }


                } finally {dbg.exitDecision(34);}

                switch (alt34) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:194:16: orderCondition
            	    {
            	    dbg.location(194,16);
            	    pushFollow(FOLLOW_orderCondition_in_orderClause1203);
            	    orderCondition90=orderCondition();

            	    state._fsp--;

            	    stream_orderCondition.add(orderCondition90.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt34 >= 1 ) break loop34;
                        EarlyExitException eee =
                            new EarlyExitException(34, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt34++;
            } while (true);
            } finally {dbg.exitSubRule(34);}



            // AST REWRITE
            // elements: orderCondition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 194:32: -> ^( ORDER_BY ( orderCondition )+ )
            {
                dbg.location(194,35);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:194:35: ^( ORDER_BY ( orderCondition )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(194,37);
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_BY, "ORDER_BY"), root_1);

                dbg.location(194,46);
                if ( !(stream_orderCondition.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderCondition.hasNext() ) {
                    dbg.location(194,46);
                    adaptor.addChild(root_1, stream_orderCondition.nextTree());

                }
                stream_orderCondition.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(195, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "orderClause");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "orderClause"

    public static class orderCondition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderCondition"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:197:1: orderCondition : ( ASC brackettedExpression -> ^( ORDER_CONDITION ASC brackettedExpression ) | DESC brackettedExpression -> ^( ORDER_CONDITION DESC brackettedExpression ) | constraint -> ^( ORDER_CONDITION constraint ) | var -> ^( ORDER_CONDITION var ) );
    public final SparqlParser.orderCondition_return orderCondition() throws RecognitionException {
        SparqlParser.orderCondition_return retval = new SparqlParser.orderCondition_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ASC91=null;
        Token DESC93=null;
        SparqlParser.brackettedExpression_return brackettedExpression92 = null;

        SparqlParser.brackettedExpression_return brackettedExpression94 = null;

        SparqlParser.constraint_return constraint95 = null;

        SparqlParser.var_return var96 = null;


        CommonTree ASC91_tree=null;
        CommonTree DESC93_tree=null;
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        RewriteRuleSubtreeStream stream_constraint=new RewriteRuleSubtreeStream(adaptor,"rule constraint");
        RewriteRuleSubtreeStream stream_brackettedExpression=new RewriteRuleSubtreeStream(adaptor,"rule brackettedExpression");
        try { dbg.enterRule(getGrammarFileName(), "orderCondition");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(197, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:198:5: ( ASC brackettedExpression -> ^( ORDER_CONDITION ASC brackettedExpression ) | DESC brackettedExpression -> ^( ORDER_CONDITION DESC brackettedExpression ) | constraint -> ^( ORDER_CONDITION constraint ) | var -> ^( ORDER_CONDITION var ) )
            int alt35=4;
            try { dbg.enterDecision(35);

            switch ( input.LA(1) ) {
            case ASC:
                {
                alt35=1;
                }
                break;
            case DESC:
                {
                alt35=2;
                }
                break;
            case IRI_REF:
            case PNAME_NS:
            case OPEN_BRACE:
            case NOT:
            case STR:
            case LANG:
            case LANGMATCHES:
            case DATATYPE:
            case BOUND:
            case IRI:
            case URI:
            case BNODE:
            case RAND:
            case ABS:
            case CEIL:
            case FLOOR:
            case ROUND:
            case CONCAT:
            case STRLEN:
            case UCASE:
            case LCASE:
            case ENCODE_FOR_URI:
            case CONTAINS:
            case STRSTARTS:
            case STRENDS:
            case STRBEFORE:
            case STRAFTER:
            case YEAR:
            case MONTH:
            case DAY:
            case HOURS:
            case MINUTES:
            case SECONDS:
            case TIMEZONE:
            case TZ:
            case NOW:
            case MD5:
            case SHA1:
            case SHA256:
            case SHA384:
            case SHA512:
            case COALESCE:
            case IF:
            case STRLANG:
            case STRDT:
            case SAMETERM:
            case ISIRI:
            case ISURI:
            case ISBLANK:
            case ISLITERAL:
            case ISNUMERIC:
            case REGEX:
            case SUBSTR:
            case REPLACE:
            case EXISTS:
            case PNAME_LN:
                {
                alt35=3;
                }
                break;
            case VAR1:
            case VAR2:
                {
                alt35=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(35);}

            switch (alt35) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:198:7: ASC brackettedExpression
                    {
                    dbg.location(198,7);
                    ASC91=(Token)match(input,ASC,FOLLOW_ASC_in_orderCondition1230);  
                    stream_ASC.add(ASC91);

                    dbg.location(198,11);
                    pushFollow(FOLLOW_brackettedExpression_in_orderCondition1232);
                    brackettedExpression92=brackettedExpression();

                    state._fsp--;

                    stream_brackettedExpression.add(brackettedExpression92.getTree());


                    // AST REWRITE
                    // elements: ASC, brackettedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 198:32: -> ^( ORDER_CONDITION ASC brackettedExpression )
                    {
                        dbg.location(198,35);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:198:35: ^( ORDER_CONDITION ASC brackettedExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(198,37);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_CONDITION, "ORDER_CONDITION"), root_1);

                        dbg.location(198,53);
                        adaptor.addChild(root_1, stream_ASC.nextNode());
                        dbg.location(198,57);
                        adaptor.addChild(root_1, stream_brackettedExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:199:7: DESC brackettedExpression
                    {
                    dbg.location(199,7);
                    DESC93=(Token)match(input,DESC,FOLLOW_DESC_in_orderCondition1250);  
                    stream_DESC.add(DESC93);

                    dbg.location(199,12);
                    pushFollow(FOLLOW_brackettedExpression_in_orderCondition1252);
                    brackettedExpression94=brackettedExpression();

                    state._fsp--;

                    stream_brackettedExpression.add(brackettedExpression94.getTree());


                    // AST REWRITE
                    // elements: DESC, brackettedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 199:33: -> ^( ORDER_CONDITION DESC brackettedExpression )
                    {
                        dbg.location(199,36);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:199:36: ^( ORDER_CONDITION DESC brackettedExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(199,38);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_CONDITION, "ORDER_CONDITION"), root_1);

                        dbg.location(199,54);
                        adaptor.addChild(root_1, stream_DESC.nextNode());
                        dbg.location(199,59);
                        adaptor.addChild(root_1, stream_brackettedExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:200:7: constraint
                    {
                    dbg.location(200,7);
                    pushFollow(FOLLOW_constraint_in_orderCondition1270);
                    constraint95=constraint();

                    state._fsp--;

                    stream_constraint.add(constraint95.getTree());


                    // AST REWRITE
                    // elements: constraint
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 200:18: -> ^( ORDER_CONDITION constraint )
                    {
                        dbg.location(200,21);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:200:21: ^( ORDER_CONDITION constraint )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(200,23);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_CONDITION, "ORDER_CONDITION"), root_1);

                        dbg.location(200,39);
                        adaptor.addChild(root_1, stream_constraint.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:201:7: var
                    {
                    dbg.location(201,7);
                    pushFollow(FOLLOW_var_in_orderCondition1286);
                    var96=var();

                    state._fsp--;

                    stream_var.add(var96.getTree());


                    // AST REWRITE
                    // elements: var
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 201:11: -> ^( ORDER_CONDITION var )
                    {
                        dbg.location(201,14);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:201:14: ^( ORDER_CONDITION var )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(201,16);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_CONDITION, "ORDER_CONDITION"), root_1);

                        dbg.location(201,32);
                        adaptor.addChild(root_1, stream_var.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(202, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "orderCondition");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "orderCondition"

    public static class limitOffsetClauses_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "limitOffsetClauses"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:204:1: limitOffsetClauses : ( limitClause ( offsetClause )? -> limitClause ( offsetClause )* | offsetClause ( limitClause )? -> offsetClause ( limitClause )* );
    public final SparqlParser.limitOffsetClauses_return limitOffsetClauses() throws RecognitionException {
        SparqlParser.limitOffsetClauses_return retval = new SparqlParser.limitOffsetClauses_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        SparqlParser.limitClause_return limitClause97 = null;

        SparqlParser.offsetClause_return offsetClause98 = null;

        SparqlParser.offsetClause_return offsetClause99 = null;

        SparqlParser.limitClause_return limitClause100 = null;


        RewriteRuleSubtreeStream stream_offsetClause=new RewriteRuleSubtreeStream(adaptor,"rule offsetClause");
        RewriteRuleSubtreeStream stream_limitClause=new RewriteRuleSubtreeStream(adaptor,"rule limitClause");
        try { dbg.enterRule(getGrammarFileName(), "limitOffsetClauses");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(204, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:205:5: ( limitClause ( offsetClause )? -> limitClause ( offsetClause )* | offsetClause ( limitClause )? -> offsetClause ( limitClause )* )
            int alt38=2;
            try { dbg.enterDecision(38);

            int LA38_0 = input.LA(1);

            if ( (LA38_0==LIMIT) ) {
                alt38=1;
            }
            else if ( (LA38_0==OFFSET) ) {
                alt38=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 38, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(38);}

            switch (alt38) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:205:7: limitClause ( offsetClause )?
                    {
                    dbg.location(205,7);
                    pushFollow(FOLLOW_limitClause_in_limitOffsetClauses1316);
                    limitClause97=limitClause();

                    state._fsp--;

                    stream_limitClause.add(limitClause97.getTree());
                    dbg.location(205,19);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:205:19: ( offsetClause )?
                    int alt36=2;
                    try { dbg.enterSubRule(36);
                    try { dbg.enterDecision(36);

                    int LA36_0 = input.LA(1);

                    if ( (LA36_0==OFFSET) ) {
                        alt36=1;
                    }
                    } finally {dbg.exitDecision(36);}

                    switch (alt36) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:205:19: offsetClause
                            {
                            dbg.location(205,19);
                            pushFollow(FOLLOW_offsetClause_in_limitOffsetClauses1318);
                            offsetClause98=offsetClause();

                            state._fsp--;

                            stream_offsetClause.add(offsetClause98.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(36);}



                    // AST REWRITE
                    // elements: limitClause, offsetClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 205:33: -> limitClause ( offsetClause )*
                    {
                        dbg.location(205,36);
                        adaptor.addChild(root_0, stream_limitClause.nextTree());
                        dbg.location(205,48);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:205:48: ( offsetClause )*
                        while ( stream_offsetClause.hasNext() ) {
                            dbg.location(205,48);
                            adaptor.addChild(root_0, stream_offsetClause.nextTree());

                        }
                        stream_offsetClause.reset();

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:206:7: offsetClause ( limitClause )?
                    {
                    dbg.location(206,7);
                    pushFollow(FOLLOW_offsetClause_in_limitOffsetClauses1334);
                    offsetClause99=offsetClause();

                    state._fsp--;

                    stream_offsetClause.add(offsetClause99.getTree());
                    dbg.location(206,20);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:206:20: ( limitClause )?
                    int alt37=2;
                    try { dbg.enterSubRule(37);
                    try { dbg.enterDecision(37);

                    int LA37_0 = input.LA(1);

                    if ( (LA37_0==LIMIT) ) {
                        alt37=1;
                    }
                    } finally {dbg.exitDecision(37);}

                    switch (alt37) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:206:20: limitClause
                            {
                            dbg.location(206,20);
                            pushFollow(FOLLOW_limitClause_in_limitOffsetClauses1336);
                            limitClause100=limitClause();

                            state._fsp--;

                            stream_limitClause.add(limitClause100.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(37);}



                    // AST REWRITE
                    // elements: limitClause, offsetClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 206:33: -> offsetClause ( limitClause )*
                    {
                        dbg.location(206,36);
                        adaptor.addChild(root_0, stream_offsetClause.nextTree());
                        dbg.location(206,49);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:206:49: ( limitClause )*
                        while ( stream_limitClause.hasNext() ) {
                            dbg.location(206,49);
                            adaptor.addChild(root_0, stream_limitClause.nextTree());

                        }
                        stream_limitClause.reset();

                    }

                    retval.tree = root_0;
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(207, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "limitOffsetClauses");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "limitOffsetClauses"

    public static class limitClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "limitClause"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:209:1: limitClause : LIMIT INTEGER -> ^( LIMIT INTEGER ) ;
    public final SparqlParser.limitClause_return limitClause() throws RecognitionException {
        SparqlParser.limitClause_return retval = new SparqlParser.limitClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LIMIT101=null;
        Token INTEGER102=null;

        CommonTree LIMIT101_tree=null;
        CommonTree INTEGER102_tree=null;
        RewriteRuleTokenStream stream_INTEGER=new RewriteRuleTokenStream(adaptor,"token INTEGER");
        RewriteRuleTokenStream stream_LIMIT=new RewriteRuleTokenStream(adaptor,"token LIMIT");

        try { dbg.enterRule(getGrammarFileName(), "limitClause");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(209, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:210:5: ( LIMIT INTEGER -> ^( LIMIT INTEGER ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:210:7: LIMIT INTEGER
            {
            dbg.location(210,7);
            LIMIT101=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_limitClause1361);  
            stream_LIMIT.add(LIMIT101);

            dbg.location(210,13);
            INTEGER102=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_limitClause1363);  
            stream_INTEGER.add(INTEGER102);



            // AST REWRITE
            // elements: LIMIT, INTEGER
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 210:21: -> ^( LIMIT INTEGER )
            {
                dbg.location(210,24);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:210:24: ^( LIMIT INTEGER )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(210,26);
                root_1 = (CommonTree)adaptor.becomeRoot(stream_LIMIT.nextNode(), root_1);

                dbg.location(210,32);
                adaptor.addChild(root_1, stream_INTEGER.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(211, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "limitClause");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "limitClause"

    public static class offsetClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "offsetClause"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:213:1: offsetClause : OFFSET INTEGER -> ^( OFFSET INTEGER ) ;
    public final SparqlParser.offsetClause_return offsetClause() throws RecognitionException {
        SparqlParser.offsetClause_return retval = new SparqlParser.offsetClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token OFFSET103=null;
        Token INTEGER104=null;

        CommonTree OFFSET103_tree=null;
        CommonTree INTEGER104_tree=null;
        RewriteRuleTokenStream stream_INTEGER=new RewriteRuleTokenStream(adaptor,"token INTEGER");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");

        try { dbg.enterRule(getGrammarFileName(), "offsetClause");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(213, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:214:5: ( OFFSET INTEGER -> ^( OFFSET INTEGER ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:214:7: OFFSET INTEGER
            {
            dbg.location(214,7);
            OFFSET103=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_offsetClause1388);  
            stream_OFFSET.add(OFFSET103);

            dbg.location(214,14);
            INTEGER104=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_offsetClause1390);  
            stream_INTEGER.add(INTEGER104);



            // AST REWRITE
            // elements: INTEGER, OFFSET
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 214:22: -> ^( OFFSET INTEGER )
            {
                dbg.location(214,25);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:214:25: ^( OFFSET INTEGER )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(214,27);
                root_1 = (CommonTree)adaptor.becomeRoot(stream_OFFSET.nextNode(), root_1);

                dbg.location(214,34);
                adaptor.addChild(root_1, stream_INTEGER.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(215, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "offsetClause");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "offsetClause"

    public static class bindingsClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bindingsClause"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:217:1: bindingsClause : ( BINDINGS ( var )* OPEN_CURLY_BRACE ( bindingValueList )* CLOSE_CURLY_BRACE )? -> ( ^( BINDINGS ( var )* ( bindingValueList )* ) )? ;
    public final SparqlParser.bindingsClause_return bindingsClause() throws RecognitionException {
        SparqlParser.bindingsClause_return retval = new SparqlParser.bindingsClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BINDINGS105=null;
        Token OPEN_CURLY_BRACE107=null;
        Token CLOSE_CURLY_BRACE109=null;
        SparqlParser.var_return var106 = null;

        SparqlParser.bindingValueList_return bindingValueList108 = null;


        CommonTree BINDINGS105_tree=null;
        CommonTree OPEN_CURLY_BRACE107_tree=null;
        CommonTree CLOSE_CURLY_BRACE109_tree=null;
        RewriteRuleTokenStream stream_BINDINGS=new RewriteRuleTokenStream(adaptor,"token BINDINGS");
        RewriteRuleTokenStream stream_OPEN_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_CURLY_BRACE");
        RewriteRuleTokenStream stream_CLOSE_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_CURLY_BRACE");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        RewriteRuleSubtreeStream stream_bindingValueList=new RewriteRuleSubtreeStream(adaptor,"rule bindingValueList");
        try { dbg.enterRule(getGrammarFileName(), "bindingsClause");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(217, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:218:5: ( ( BINDINGS ( var )* OPEN_CURLY_BRACE ( bindingValueList )* CLOSE_CURLY_BRACE )? -> ( ^( BINDINGS ( var )* ( bindingValueList )* ) )? )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:218:7: ( BINDINGS ( var )* OPEN_CURLY_BRACE ( bindingValueList )* CLOSE_CURLY_BRACE )?
            {
            dbg.location(218,7);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:218:7: ( BINDINGS ( var )* OPEN_CURLY_BRACE ( bindingValueList )* CLOSE_CURLY_BRACE )?
            int alt41=2;
            try { dbg.enterSubRule(41);
            try { dbg.enterDecision(41);

            int LA41_0 = input.LA(1);

            if ( (LA41_0==BINDINGS) ) {
                alt41=1;
            }
            } finally {dbg.exitDecision(41);}

            switch (alt41) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:218:8: BINDINGS ( var )* OPEN_CURLY_BRACE ( bindingValueList )* CLOSE_CURLY_BRACE
                    {
                    dbg.location(218,8);
                    BINDINGS105=(Token)match(input,BINDINGS,FOLLOW_BINDINGS_in_bindingsClause1416);  
                    stream_BINDINGS.add(BINDINGS105);

                    dbg.location(218,17);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:218:17: ( var )*
                    try { dbg.enterSubRule(39);

                    loop39:
                    do {
                        int alt39=2;
                        try { dbg.enterDecision(39);

                        int LA39_0 = input.LA(1);

                        if ( ((LA39_0>=VAR1 && LA39_0<=VAR2)) ) {
                            alt39=1;
                        }


                        } finally {dbg.exitDecision(39);}

                        switch (alt39) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:218:17: var
                    	    {
                    	    dbg.location(218,17);
                    	    pushFollow(FOLLOW_var_in_bindingsClause1418);
                    	    var106=var();

                    	    state._fsp--;

                    	    stream_var.add(var106.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop39;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(39);}

                    dbg.location(218,22);
                    OPEN_CURLY_BRACE107=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_bindingsClause1421);  
                    stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE107);

                    dbg.location(218,39);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:218:39: ( bindingValueList )*
                    try { dbg.enterSubRule(40);

                    loop40:
                    do {
                        int alt40=2;
                        try { dbg.enterDecision(40);

                        int LA40_0 = input.LA(1);

                        if ( (LA40_0==OPEN_BRACE) ) {
                            alt40=1;
                        }


                        } finally {dbg.exitDecision(40);}

                        switch (alt40) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:218:39: bindingValueList
                    	    {
                    	    dbg.location(218,39);
                    	    pushFollow(FOLLOW_bindingValueList_in_bindingsClause1423);
                    	    bindingValueList108=bindingValueList();

                    	    state._fsp--;

                    	    stream_bindingValueList.add(bindingValueList108.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop40;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(40);}

                    dbg.location(218,57);
                    CLOSE_CURLY_BRACE109=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_bindingsClause1426);  
                    stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE109);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(41);}



            // AST REWRITE
            // elements: bindingValueList, var, BINDINGS
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 218:77: -> ( ^( BINDINGS ( var )* ( bindingValueList )* ) )?
            {
                dbg.location(218,80);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:218:80: ( ^( BINDINGS ( var )* ( bindingValueList )* ) )?
                if ( stream_bindingValueList.hasNext()||stream_var.hasNext()||stream_BINDINGS.hasNext() ) {
                    dbg.location(218,80);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:218:80: ^( BINDINGS ( var )* ( bindingValueList )* )
                    {
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    dbg.location(218,82);
                    root_1 = (CommonTree)adaptor.becomeRoot(stream_BINDINGS.nextNode(), root_1);

                    dbg.location(218,91);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:218:91: ( var )*
                    while ( stream_var.hasNext() ) {
                        dbg.location(218,91);
                        adaptor.addChild(root_1, stream_var.nextTree());

                    }
                    stream_var.reset();
                    dbg.location(218,96);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:218:96: ( bindingValueList )*
                    while ( stream_bindingValueList.hasNext() ) {
                        dbg.location(218,96);
                        adaptor.addChild(root_1, stream_bindingValueList.nextTree());

                    }
                    stream_bindingValueList.reset();

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_bindingValueList.reset();
                stream_var.reset();
                stream_BINDINGS.reset();

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(219, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "bindingsClause");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "bindingsClause"

    public static class bindingValueList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bindingValueList"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:221:1: bindingValueList : OPEN_BRACE ( bindingValue )* CLOSE_BRACE -> ^( BINDING_VALUE ( bindingValue )* ) ;
    public final SparqlParser.bindingValueList_return bindingValueList() throws RecognitionException {
        SparqlParser.bindingValueList_return retval = new SparqlParser.bindingValueList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token OPEN_BRACE110=null;
        Token CLOSE_BRACE112=null;
        SparqlParser.bindingValue_return bindingValue111 = null;


        CommonTree OPEN_BRACE110_tree=null;
        CommonTree CLOSE_BRACE112_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleSubtreeStream stream_bindingValue=new RewriteRuleSubtreeStream(adaptor,"rule bindingValue");
        try { dbg.enterRule(getGrammarFileName(), "bindingValueList");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(221, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:222:5: ( OPEN_BRACE ( bindingValue )* CLOSE_BRACE -> ^( BINDING_VALUE ( bindingValue )* ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:222:7: OPEN_BRACE ( bindingValue )* CLOSE_BRACE
            {
            dbg.location(222,7);
            OPEN_BRACE110=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_bindingValueList1462);  
            stream_OPEN_BRACE.add(OPEN_BRACE110);

            dbg.location(222,18);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:222:18: ( bindingValue )*
            try { dbg.enterSubRule(42);

            loop42:
            do {
                int alt42=2;
                try { dbg.enterDecision(42);

                int LA42_0 = input.LA(1);

                if ( (LA42_0==IRI_REF||LA42_0==PNAME_NS||LA42_0==INTEGER||LA42_0==UNDEF||(LA42_0>=DECIMAL && LA42_0<=PNAME_LN)) ) {
                    alt42=1;
                }


                } finally {dbg.exitDecision(42);}

                switch (alt42) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:222:18: bindingValue
            	    {
            	    dbg.location(222,18);
            	    pushFollow(FOLLOW_bindingValue_in_bindingValueList1464);
            	    bindingValue111=bindingValue();

            	    state._fsp--;

            	    stream_bindingValue.add(bindingValue111.getTree());

            	    }
            	    break;

            	default :
            	    break loop42;
                }
            } while (true);
            } finally {dbg.exitSubRule(42);}

            dbg.location(222,32);
            CLOSE_BRACE112=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_bindingValueList1467);  
            stream_CLOSE_BRACE.add(CLOSE_BRACE112);



            // AST REWRITE
            // elements: bindingValue
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 222:44: -> ^( BINDING_VALUE ( bindingValue )* )
            {
                dbg.location(222,47);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:222:47: ^( BINDING_VALUE ( bindingValue )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(222,49);
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BINDING_VALUE, "BINDING_VALUE"), root_1);

                dbg.location(222,63);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:222:63: ( bindingValue )*
                while ( stream_bindingValue.hasNext() ) {
                    dbg.location(222,63);
                    adaptor.addChild(root_1, stream_bindingValue.nextTree());

                }
                stream_bindingValue.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(223, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "bindingValueList");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "bindingValueList"

    public static class bindingValue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bindingValue"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:225:1: bindingValue : ( iriRef | rdfLiteral | numericLiteral | booleanLiteral | UNDEF );
    public final SparqlParser.bindingValue_return bindingValue() throws RecognitionException {
        SparqlParser.bindingValue_return retval = new SparqlParser.bindingValue_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token UNDEF117=null;
        SparqlParser.iriRef_return iriRef113 = null;

        SparqlParser.rdfLiteral_return rdfLiteral114 = null;

        SparqlParser.numericLiteral_return numericLiteral115 = null;

        SparqlParser.booleanLiteral_return booleanLiteral116 = null;


        CommonTree UNDEF117_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "bindingValue");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(225, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:226:5: ( iriRef | rdfLiteral | numericLiteral | booleanLiteral | UNDEF )
            int alt43=5;
            try { dbg.enterDecision(43);

            switch ( input.LA(1) ) {
            case IRI_REF:
            case PNAME_NS:
            case PNAME_LN:
                {
                alt43=1;
                }
                break;
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
                {
                alt43=2;
                }
                break;
            case INTEGER:
            case DECIMAL:
            case DOUBLE:
            case INTEGER_POSITIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE_POSITIVE:
            case INTEGER_NEGATIVE:
            case DECIMAL_NEGATIVE:
            case DOUBLE_NEGATIVE:
                {
                alt43=3;
                }
                break;
            case TRUE:
            case FALSE:
                {
                alt43=4;
                }
                break;
            case UNDEF:
                {
                alt43=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(43);}

            switch (alt43) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:226:7: iriRef
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(226,7);
                    pushFollow(FOLLOW_iriRef_in_bindingValue1498);
                    iriRef113=iriRef();

                    state._fsp--;

                    adaptor.addChild(root_0, iriRef113.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:226:16: rdfLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(226,16);
                    pushFollow(FOLLOW_rdfLiteral_in_bindingValue1502);
                    rdfLiteral114=rdfLiteral();

                    state._fsp--;

                    adaptor.addChild(root_0, rdfLiteral114.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:226:29: numericLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(226,29);
                    pushFollow(FOLLOW_numericLiteral_in_bindingValue1506);
                    numericLiteral115=numericLiteral();

                    state._fsp--;

                    adaptor.addChild(root_0, numericLiteral115.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:226:46: booleanLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(226,46);
                    pushFollow(FOLLOW_booleanLiteral_in_bindingValue1510);
                    booleanLiteral116=booleanLiteral();

                    state._fsp--;

                    adaptor.addChild(root_0, booleanLiteral116.getTree());

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:226:63: UNDEF
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(226,63);
                    UNDEF117=(Token)match(input,UNDEF,FOLLOW_UNDEF_in_bindingValue1514); 
                    UNDEF117_tree = (CommonTree)adaptor.create(UNDEF117);
                    adaptor.addChild(root_0, UNDEF117_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(227, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "bindingValue");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "bindingValue"

    public static class update_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "update"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:229:1: update : prologue ( load | clear | drop | add | move | copy | create | insert | delete | modify ) -> prologue ( load )* ( clear )* ( drop )* ( add )* ( move )* ( copy )* ( create )* ( insert )* ( delete )* ( modify )* ;
    public final SparqlParser.update_return update() throws RecognitionException {
        SparqlParser.update_return retval = new SparqlParser.update_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        SparqlParser.prologue_return prologue118 = null;

        SparqlParser.load_return load119 = null;

        SparqlParser.clear_return clear120 = null;

        SparqlParser.drop_return drop121 = null;

        SparqlParser.add_return add122 = null;

        SparqlParser.move_return move123 = null;

        SparqlParser.copy_return copy124 = null;

        SparqlParser.create_return create125 = null;

        SparqlParser.insert_return insert126 = null;

        SparqlParser.delete_return delete127 = null;

        SparqlParser.modify_return modify128 = null;


        RewriteRuleSubtreeStream stream_clear=new RewriteRuleSubtreeStream(adaptor,"rule clear");
        RewriteRuleSubtreeStream stream_prologue=new RewriteRuleSubtreeStream(adaptor,"rule prologue");
        RewriteRuleSubtreeStream stream_drop=new RewriteRuleSubtreeStream(adaptor,"rule drop");
        RewriteRuleSubtreeStream stream_delete=new RewriteRuleSubtreeStream(adaptor,"rule delete");
        RewriteRuleSubtreeStream stream_modify=new RewriteRuleSubtreeStream(adaptor,"rule modify");
        RewriteRuleSubtreeStream stream_load=new RewriteRuleSubtreeStream(adaptor,"rule load");
        RewriteRuleSubtreeStream stream_add=new RewriteRuleSubtreeStream(adaptor,"rule add");
        RewriteRuleSubtreeStream stream_insert=new RewriteRuleSubtreeStream(adaptor,"rule insert");
        RewriteRuleSubtreeStream stream_create=new RewriteRuleSubtreeStream(adaptor,"rule create");
        RewriteRuleSubtreeStream stream_move=new RewriteRuleSubtreeStream(adaptor,"rule move");
        RewriteRuleSubtreeStream stream_copy=new RewriteRuleSubtreeStream(adaptor,"rule copy");
        try { dbg.enterRule(getGrammarFileName(), "update");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(229, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:230:5: ( prologue ( load | clear | drop | add | move | copy | create | insert | delete | modify ) -> prologue ( load )* ( clear )* ( drop )* ( add )* ( move )* ( copy )* ( create )* ( insert )* ( delete )* ( modify )* )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:230:7: prologue ( load | clear | drop | add | move | copy | create | insert | delete | modify )
            {
            dbg.location(230,7);
            pushFollow(FOLLOW_prologue_in_update1535);
            prologue118=prologue();

            state._fsp--;

            stream_prologue.add(prologue118.getTree());
            dbg.location(230,16);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:230:16: ( load | clear | drop | add | move | copy | create | insert | delete | modify )
            int alt44=10;
            try { dbg.enterSubRule(44);
            try { dbg.enterDecision(44);

            try {
                isCyclicDecision = true;
                alt44 = dfa44.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(44);}

            switch (alt44) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:230:17: load
                    {
                    dbg.location(230,17);
                    pushFollow(FOLLOW_load_in_update1538);
                    load119=load();

                    state._fsp--;

                    stream_load.add(load119.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:230:24: clear
                    {
                    dbg.location(230,24);
                    pushFollow(FOLLOW_clear_in_update1542);
                    clear120=clear();

                    state._fsp--;

                    stream_clear.add(clear120.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:230:32: drop
                    {
                    dbg.location(230,32);
                    pushFollow(FOLLOW_drop_in_update1546);
                    drop121=drop();

                    state._fsp--;

                    stream_drop.add(drop121.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:230:39: add
                    {
                    dbg.location(230,39);
                    pushFollow(FOLLOW_add_in_update1550);
                    add122=add();

                    state._fsp--;

                    stream_add.add(add122.getTree());

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:230:45: move
                    {
                    dbg.location(230,45);
                    pushFollow(FOLLOW_move_in_update1554);
                    move123=move();

                    state._fsp--;

                    stream_move.add(move123.getTree());

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:230:52: copy
                    {
                    dbg.location(230,52);
                    pushFollow(FOLLOW_copy_in_update1558);
                    copy124=copy();

                    state._fsp--;

                    stream_copy.add(copy124.getTree());

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:230:59: create
                    {
                    dbg.location(230,59);
                    pushFollow(FOLLOW_create_in_update1562);
                    create125=create();

                    state._fsp--;

                    stream_create.add(create125.getTree());

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:230:68: insert
                    {
                    dbg.location(230,68);
                    pushFollow(FOLLOW_insert_in_update1566);
                    insert126=insert();

                    state._fsp--;

                    stream_insert.add(insert126.getTree());

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:230:77: delete
                    {
                    dbg.location(230,77);
                    pushFollow(FOLLOW_delete_in_update1570);
                    delete127=delete();

                    state._fsp--;

                    stream_delete.add(delete127.getTree());

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:230:86: modify
                    {
                    dbg.location(230,86);
                    pushFollow(FOLLOW_modify_in_update1574);
                    modify128=modify();

                    state._fsp--;

                    stream_modify.add(modify128.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(44);}



            // AST REWRITE
            // elements: delete, modify, insert, create, prologue, copy, clear, add, load, drop, move
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 230:94: -> prologue ( load )* ( clear )* ( drop )* ( add )* ( move )* ( copy )* ( create )* ( insert )* ( delete )* ( modify )*
            {
                dbg.location(230,97);
                adaptor.addChild(root_0, stream_prologue.nextTree());
                dbg.location(230,106);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:230:106: ( load )*
                while ( stream_load.hasNext() ) {
                    dbg.location(230,106);
                    adaptor.addChild(root_0, stream_load.nextTree());

                }
                stream_load.reset();
                dbg.location(230,112);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:230:112: ( clear )*
                while ( stream_clear.hasNext() ) {
                    dbg.location(230,112);
                    adaptor.addChild(root_0, stream_clear.nextTree());

                }
                stream_clear.reset();
                dbg.location(230,119);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:230:119: ( drop )*
                while ( stream_drop.hasNext() ) {
                    dbg.location(230,119);
                    adaptor.addChild(root_0, stream_drop.nextTree());

                }
                stream_drop.reset();
                dbg.location(230,125);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:230:125: ( add )*
                while ( stream_add.hasNext() ) {
                    dbg.location(230,125);
                    adaptor.addChild(root_0, stream_add.nextTree());

                }
                stream_add.reset();
                dbg.location(230,130);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:230:130: ( move )*
                while ( stream_move.hasNext() ) {
                    dbg.location(230,130);
                    adaptor.addChild(root_0, stream_move.nextTree());

                }
                stream_move.reset();
                dbg.location(230,136);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:230:136: ( copy )*
                while ( stream_copy.hasNext() ) {
                    dbg.location(230,136);
                    adaptor.addChild(root_0, stream_copy.nextTree());

                }
                stream_copy.reset();
                dbg.location(230,142);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:230:142: ( create )*
                while ( stream_create.hasNext() ) {
                    dbg.location(230,142);
                    adaptor.addChild(root_0, stream_create.nextTree());

                }
                stream_create.reset();
                dbg.location(230,150);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:230:150: ( insert )*
                while ( stream_insert.hasNext() ) {
                    dbg.location(230,150);
                    adaptor.addChild(root_0, stream_insert.nextTree());

                }
                stream_insert.reset();
                dbg.location(230,158);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:230:158: ( delete )*
                while ( stream_delete.hasNext() ) {
                    dbg.location(230,158);
                    adaptor.addChild(root_0, stream_delete.nextTree());

                }
                stream_delete.reset();
                dbg.location(230,166);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:230:166: ( modify )*
                while ( stream_modify.hasNext() ) {
                    dbg.location(230,166);
                    adaptor.addChild(root_0, stream_modify.nextTree());

                }
                stream_modify.reset();

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(231, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "update");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "update"

    public static class load_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "load"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:233:1: load : LOAD ( SILENT )? iriRef ( INTO graphRef )? -> ^( LOAD ( SILENT )* iriRef ( graphRef )? ) ;
    public final SparqlParser.load_return load() throws RecognitionException {
        SparqlParser.load_return retval = new SparqlParser.load_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LOAD129=null;
        Token SILENT130=null;
        Token INTO132=null;
        SparqlParser.iriRef_return iriRef131 = null;

        SparqlParser.graphRef_return graphRef133 = null;


        CommonTree LOAD129_tree=null;
        CommonTree SILENT130_tree=null;
        CommonTree INTO132_tree=null;
        RewriteRuleTokenStream stream_SILENT=new RewriteRuleTokenStream(adaptor,"token SILENT");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_LOAD=new RewriteRuleTokenStream(adaptor,"token LOAD");
        RewriteRuleSubtreeStream stream_graphRef=new RewriteRuleSubtreeStream(adaptor,"rule graphRef");
        RewriteRuleSubtreeStream stream_iriRef=new RewriteRuleSubtreeStream(adaptor,"rule iriRef");
        try { dbg.enterRule(getGrammarFileName(), "load");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(233, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:234:5: ( LOAD ( SILENT )? iriRef ( INTO graphRef )? -> ^( LOAD ( SILENT )* iriRef ( graphRef )? ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:234:7: LOAD ( SILENT )? iriRef ( INTO graphRef )?
            {
            dbg.location(234,7);
            LOAD129=(Token)match(input,LOAD,FOLLOW_LOAD_in_load1637);  
            stream_LOAD.add(LOAD129);

            dbg.location(234,12);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:234:12: ( SILENT )?
            int alt45=2;
            try { dbg.enterSubRule(45);
            try { dbg.enterDecision(45);

            int LA45_0 = input.LA(1);

            if ( (LA45_0==SILENT) ) {
                alt45=1;
            }
            } finally {dbg.exitDecision(45);}

            switch (alt45) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:234:12: SILENT
                    {
                    dbg.location(234,12);
                    SILENT130=(Token)match(input,SILENT,FOLLOW_SILENT_in_load1639);  
                    stream_SILENT.add(SILENT130);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(45);}

            dbg.location(234,20);
            pushFollow(FOLLOW_iriRef_in_load1642);
            iriRef131=iriRef();

            state._fsp--;

            stream_iriRef.add(iriRef131.getTree());
            dbg.location(234,27);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:234:27: ( INTO graphRef )?
            int alt46=2;
            try { dbg.enterSubRule(46);
            try { dbg.enterDecision(46);

            int LA46_0 = input.LA(1);

            if ( (LA46_0==INTO) ) {
                alt46=1;
            }
            } finally {dbg.exitDecision(46);}

            switch (alt46) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:234:28: INTO graphRef
                    {
                    dbg.location(234,28);
                    INTO132=(Token)match(input,INTO,FOLLOW_INTO_in_load1645);  
                    stream_INTO.add(INTO132);

                    dbg.location(234,33);
                    pushFollow(FOLLOW_graphRef_in_load1647);
                    graphRef133=graphRef();

                    state._fsp--;

                    stream_graphRef.add(graphRef133.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(46);}



            // AST REWRITE
            // elements: iriRef, graphRef, SILENT, LOAD
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 234:44: -> ^( LOAD ( SILENT )* iriRef ( graphRef )? )
            {
                dbg.location(234,47);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:234:47: ^( LOAD ( SILENT )* iriRef ( graphRef )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(234,49);
                root_1 = (CommonTree)adaptor.becomeRoot(stream_LOAD.nextNode(), root_1);

                dbg.location(234,54);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:234:54: ( SILENT )*
                while ( stream_SILENT.hasNext() ) {
                    dbg.location(234,54);
                    adaptor.addChild(root_1, stream_SILENT.nextNode());

                }
                stream_SILENT.reset();
                dbg.location(234,62);
                adaptor.addChild(root_1, stream_iriRef.nextTree());
                dbg.location(234,69);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:234:69: ( graphRef )?
                if ( stream_graphRef.hasNext() ) {
                    dbg.location(234,69);
                    adaptor.addChild(root_1, stream_graphRef.nextTree());

                }
                stream_graphRef.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(235, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "load");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "load"

    public static class clear_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "clear"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:237:1: clear : CLEAR ( SILENT )? graphRefAll -> ^( CLEAR ( SILENT )* graphRefAll ) ;
    public final SparqlParser.clear_return clear() throws RecognitionException {
        SparqlParser.clear_return retval = new SparqlParser.clear_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token CLEAR134=null;
        Token SILENT135=null;
        SparqlParser.graphRefAll_return graphRefAll136 = null;


        CommonTree CLEAR134_tree=null;
        CommonTree SILENT135_tree=null;
        RewriteRuleTokenStream stream_SILENT=new RewriteRuleTokenStream(adaptor,"token SILENT");
        RewriteRuleTokenStream stream_CLEAR=new RewriteRuleTokenStream(adaptor,"token CLEAR");
        RewriteRuleSubtreeStream stream_graphRefAll=new RewriteRuleSubtreeStream(adaptor,"rule graphRefAll");
        try { dbg.enterRule(getGrammarFileName(), "clear");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(237, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:238:5: ( CLEAR ( SILENT )? graphRefAll -> ^( CLEAR ( SILENT )* graphRefAll ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:238:7: CLEAR ( SILENT )? graphRefAll
            {
            dbg.location(238,7);
            CLEAR134=(Token)match(input,CLEAR,FOLLOW_CLEAR_in_clear1684);  
            stream_CLEAR.add(CLEAR134);

            dbg.location(238,14);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:238:14: ( SILENT )?
            int alt47=2;
            try { dbg.enterSubRule(47);
            try { dbg.enterDecision(47);

            int LA47_0 = input.LA(1);

            if ( (LA47_0==SILENT) ) {
                alt47=1;
            }
            } finally {dbg.exitDecision(47);}

            switch (alt47) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:238:14: SILENT
                    {
                    dbg.location(238,14);
                    SILENT135=(Token)match(input,SILENT,FOLLOW_SILENT_in_clear1687);  
                    stream_SILENT.add(SILENT135);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(47);}

            dbg.location(238,22);
            pushFollow(FOLLOW_graphRefAll_in_clear1690);
            graphRefAll136=graphRefAll();

            state._fsp--;

            stream_graphRefAll.add(graphRefAll136.getTree());


            // AST REWRITE
            // elements: SILENT, graphRefAll, CLEAR
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 238:34: -> ^( CLEAR ( SILENT )* graphRefAll )
            {
                dbg.location(238,37);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:238:37: ^( CLEAR ( SILENT )* graphRefAll )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(238,39);
                root_1 = (CommonTree)adaptor.becomeRoot(stream_CLEAR.nextNode(), root_1);

                dbg.location(238,45);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:238:45: ( SILENT )*
                while ( stream_SILENT.hasNext() ) {
                    dbg.location(238,45);
                    adaptor.addChild(root_1, stream_SILENT.nextNode());

                }
                stream_SILENT.reset();
                dbg.location(238,53);
                adaptor.addChild(root_1, stream_graphRefAll.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(239, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "clear");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "clear"

    public static class drop_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "drop"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:241:1: drop : DROP ( SILENT )? graphRefAll -> ^( DROP ( SILENT )* graphRefAll ) ;
    public final SparqlParser.drop_return drop() throws RecognitionException {
        SparqlParser.drop_return retval = new SparqlParser.drop_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DROP137=null;
        Token SILENT138=null;
        SparqlParser.graphRefAll_return graphRefAll139 = null;


        CommonTree DROP137_tree=null;
        CommonTree SILENT138_tree=null;
        RewriteRuleTokenStream stream_SILENT=new RewriteRuleTokenStream(adaptor,"token SILENT");
        RewriteRuleTokenStream stream_DROP=new RewriteRuleTokenStream(adaptor,"token DROP");
        RewriteRuleSubtreeStream stream_graphRefAll=new RewriteRuleSubtreeStream(adaptor,"rule graphRefAll");
        try { dbg.enterRule(getGrammarFileName(), "drop");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(241, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:242:5: ( DROP ( SILENT )? graphRefAll -> ^( DROP ( SILENT )* graphRefAll ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:242:7: DROP ( SILENT )? graphRefAll
            {
            dbg.location(242,7);
            DROP137=(Token)match(input,DROP,FOLLOW_DROP_in_drop1722);  
            stream_DROP.add(DROP137);

            dbg.location(242,12);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:242:12: ( SILENT )?
            int alt48=2;
            try { dbg.enterSubRule(48);
            try { dbg.enterDecision(48);

            int LA48_0 = input.LA(1);

            if ( (LA48_0==SILENT) ) {
                alt48=1;
            }
            } finally {dbg.exitDecision(48);}

            switch (alt48) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:242:12: SILENT
                    {
                    dbg.location(242,12);
                    SILENT138=(Token)match(input,SILENT,FOLLOW_SILENT_in_drop1724);  
                    stream_SILENT.add(SILENT138);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(48);}

            dbg.location(242,20);
            pushFollow(FOLLOW_graphRefAll_in_drop1727);
            graphRefAll139=graphRefAll();

            state._fsp--;

            stream_graphRefAll.add(graphRefAll139.getTree());


            // AST REWRITE
            // elements: graphRefAll, DROP, SILENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 242:32: -> ^( DROP ( SILENT )* graphRefAll )
            {
                dbg.location(242,35);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:242:35: ^( DROP ( SILENT )* graphRefAll )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(242,37);
                root_1 = (CommonTree)adaptor.becomeRoot(stream_DROP.nextNode(), root_1);

                dbg.location(242,42);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:242:42: ( SILENT )*
                while ( stream_SILENT.hasNext() ) {
                    dbg.location(242,42);
                    adaptor.addChild(root_1, stream_SILENT.nextNode());

                }
                stream_SILENT.reset();
                dbg.location(242,50);
                adaptor.addChild(root_1, stream_graphRefAll.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(243, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "drop");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "drop"

    public static class create_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "create"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:245:1: create : CREATE ( SILENT )? graphRef -> ^( CREATE ( SILENT )* graphRef ) ;
    public final SparqlParser.create_return create() throws RecognitionException {
        SparqlParser.create_return retval = new SparqlParser.create_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token CREATE140=null;
        Token SILENT141=null;
        SparqlParser.graphRef_return graphRef142 = null;


        CommonTree CREATE140_tree=null;
        CommonTree SILENT141_tree=null;
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_SILENT=new RewriteRuleTokenStream(adaptor,"token SILENT");
        RewriteRuleSubtreeStream stream_graphRef=new RewriteRuleSubtreeStream(adaptor,"rule graphRef");
        try { dbg.enterRule(getGrammarFileName(), "create");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(245, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:246:5: ( CREATE ( SILENT )? graphRef -> ^( CREATE ( SILENT )* graphRef ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:246:7: CREATE ( SILENT )? graphRef
            {
            dbg.location(246,7);
            CREATE140=(Token)match(input,CREATE,FOLLOW_CREATE_in_create1756);  
            stream_CREATE.add(CREATE140);

            dbg.location(246,14);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:246:14: ( SILENT )?
            int alt49=2;
            try { dbg.enterSubRule(49);
            try { dbg.enterDecision(49);

            int LA49_0 = input.LA(1);

            if ( (LA49_0==SILENT) ) {
                alt49=1;
            }
            } finally {dbg.exitDecision(49);}

            switch (alt49) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:246:14: SILENT
                    {
                    dbg.location(246,14);
                    SILENT141=(Token)match(input,SILENT,FOLLOW_SILENT_in_create1758);  
                    stream_SILENT.add(SILENT141);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(49);}

            dbg.location(246,22);
            pushFollow(FOLLOW_graphRef_in_create1761);
            graphRef142=graphRef();

            state._fsp--;

            stream_graphRef.add(graphRef142.getTree());


            // AST REWRITE
            // elements: SILENT, CREATE, graphRef
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 246:31: -> ^( CREATE ( SILENT )* graphRef )
            {
                dbg.location(246,34);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:246:34: ^( CREATE ( SILENT )* graphRef )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(246,36);
                root_1 = (CommonTree)adaptor.becomeRoot(stream_CREATE.nextNode(), root_1);

                dbg.location(246,43);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:246:43: ( SILENT )*
                while ( stream_SILENT.hasNext() ) {
                    dbg.location(246,43);
                    adaptor.addChild(root_1, stream_SILENT.nextNode());

                }
                stream_SILENT.reset();
                dbg.location(246,51);
                adaptor.addChild(root_1, stream_graphRef.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(247, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "create");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "create"

    public static class add_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "add"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:249:1: add : ADD ( SILENT )? from= graphOrDefault TO to= graphOrDefault -> ^( ADD ( SILENT )* $from $to) ;
    public final SparqlParser.add_return add() throws RecognitionException {
        SparqlParser.add_return retval = new SparqlParser.add_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ADD143=null;
        Token SILENT144=null;
        Token TO145=null;
        SparqlParser.graphOrDefault_return from = null;

        SparqlParser.graphOrDefault_return to = null;


        CommonTree ADD143_tree=null;
        CommonTree SILENT144_tree=null;
        CommonTree TO145_tree=null;
        RewriteRuleTokenStream stream_SILENT=new RewriteRuleTokenStream(adaptor,"token SILENT");
        RewriteRuleTokenStream stream_TO=new RewriteRuleTokenStream(adaptor,"token TO");
        RewriteRuleTokenStream stream_ADD=new RewriteRuleTokenStream(adaptor,"token ADD");
        RewriteRuleSubtreeStream stream_graphOrDefault=new RewriteRuleSubtreeStream(adaptor,"rule graphOrDefault");
        try { dbg.enterRule(getGrammarFileName(), "add");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(249, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:250:5: ( ADD ( SILENT )? from= graphOrDefault TO to= graphOrDefault -> ^( ADD ( SILENT )* $from $to) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:250:7: ADD ( SILENT )? from= graphOrDefault TO to= graphOrDefault
            {
            dbg.location(250,7);
            ADD143=(Token)match(input,ADD,FOLLOW_ADD_in_add1793);  
            stream_ADD.add(ADD143);

            dbg.location(250,11);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:250:11: ( SILENT )?
            int alt50=2;
            try { dbg.enterSubRule(50);
            try { dbg.enterDecision(50);

            int LA50_0 = input.LA(1);

            if ( (LA50_0==SILENT) ) {
                alt50=1;
            }
            } finally {dbg.exitDecision(50);}

            switch (alt50) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:250:11: SILENT
                    {
                    dbg.location(250,11);
                    SILENT144=(Token)match(input,SILENT,FOLLOW_SILENT_in_add1795);  
                    stream_SILENT.add(SILENT144);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(50);}

            dbg.location(250,23);
            pushFollow(FOLLOW_graphOrDefault_in_add1800);
            from=graphOrDefault();

            state._fsp--;

            stream_graphOrDefault.add(from.getTree());
            dbg.location(250,39);
            TO145=(Token)match(input,TO,FOLLOW_TO_in_add1802);  
            stream_TO.add(TO145);

            dbg.location(250,44);
            pushFollow(FOLLOW_graphOrDefault_in_add1806);
            to=graphOrDefault();

            state._fsp--;

            stream_graphOrDefault.add(to.getTree());


            // AST REWRITE
            // elements: SILENT, to, from, ADD
            // token labels: 
            // rule labels: to, retval, from
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_to=new RewriteRuleSubtreeStream(adaptor,"rule to",to!=null?to.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_from=new RewriteRuleSubtreeStream(adaptor,"rule from",from!=null?from.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 250:60: -> ^( ADD ( SILENT )* $from $to)
            {
                dbg.location(250,63);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:250:63: ^( ADD ( SILENT )* $from $to)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(250,65);
                root_1 = (CommonTree)adaptor.becomeRoot(stream_ADD.nextNode(), root_1);

                dbg.location(250,69);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:250:69: ( SILENT )*
                while ( stream_SILENT.hasNext() ) {
                    dbg.location(250,69);
                    adaptor.addChild(root_1, stream_SILENT.nextNode());

                }
                stream_SILENT.reset();
                dbg.location(250,77);
                adaptor.addChild(root_1, stream_from.nextTree());
                dbg.location(250,83);
                adaptor.addChild(root_1, stream_to.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(251, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "add");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "add"

    public static class move_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "move"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:253:1: move : MOVE ( SILENT )? from= graphOrDefault TO to= graphOrDefault -> ^( MOVE ( SILENT )* $from $to) ;
    public final SparqlParser.move_return move() throws RecognitionException {
        SparqlParser.move_return retval = new SparqlParser.move_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MOVE146=null;
        Token SILENT147=null;
        Token TO148=null;
        SparqlParser.graphOrDefault_return from = null;

        SparqlParser.graphOrDefault_return to = null;


        CommonTree MOVE146_tree=null;
        CommonTree SILENT147_tree=null;
        CommonTree TO148_tree=null;
        RewriteRuleTokenStream stream_SILENT=new RewriteRuleTokenStream(adaptor,"token SILENT");
        RewriteRuleTokenStream stream_TO=new RewriteRuleTokenStream(adaptor,"token TO");
        RewriteRuleTokenStream stream_MOVE=new RewriteRuleTokenStream(adaptor,"token MOVE");
        RewriteRuleSubtreeStream stream_graphOrDefault=new RewriteRuleSubtreeStream(adaptor,"rule graphOrDefault");
        try { dbg.enterRule(getGrammarFileName(), "move");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(253, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:254:5: ( MOVE ( SILENT )? from= graphOrDefault TO to= graphOrDefault -> ^( MOVE ( SILENT )* $from $to) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:254:7: MOVE ( SILENT )? from= graphOrDefault TO to= graphOrDefault
            {
            dbg.location(254,7);
            MOVE146=(Token)match(input,MOVE,FOLLOW_MOVE_in_move1842);  
            stream_MOVE.add(MOVE146);

            dbg.location(254,12);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:254:12: ( SILENT )?
            int alt51=2;
            try { dbg.enterSubRule(51);
            try { dbg.enterDecision(51);

            int LA51_0 = input.LA(1);

            if ( (LA51_0==SILENT) ) {
                alt51=1;
            }
            } finally {dbg.exitDecision(51);}

            switch (alt51) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:254:12: SILENT
                    {
                    dbg.location(254,12);
                    SILENT147=(Token)match(input,SILENT,FOLLOW_SILENT_in_move1844);  
                    stream_SILENT.add(SILENT147);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(51);}

            dbg.location(254,24);
            pushFollow(FOLLOW_graphOrDefault_in_move1849);
            from=graphOrDefault();

            state._fsp--;

            stream_graphOrDefault.add(from.getTree());
            dbg.location(254,40);
            TO148=(Token)match(input,TO,FOLLOW_TO_in_move1851);  
            stream_TO.add(TO148);

            dbg.location(254,45);
            pushFollow(FOLLOW_graphOrDefault_in_move1855);
            to=graphOrDefault();

            state._fsp--;

            stream_graphOrDefault.add(to.getTree());


            // AST REWRITE
            // elements: MOVE, to, from, SILENT
            // token labels: 
            // rule labels: to, retval, from
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_to=new RewriteRuleSubtreeStream(adaptor,"rule to",to!=null?to.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_from=new RewriteRuleSubtreeStream(adaptor,"rule from",from!=null?from.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 254:61: -> ^( MOVE ( SILENT )* $from $to)
            {
                dbg.location(254,64);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:254:64: ^( MOVE ( SILENT )* $from $to)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(254,66);
                root_1 = (CommonTree)adaptor.becomeRoot(stream_MOVE.nextNode(), root_1);

                dbg.location(254,71);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:254:71: ( SILENT )*
                while ( stream_SILENT.hasNext() ) {
                    dbg.location(254,71);
                    adaptor.addChild(root_1, stream_SILENT.nextNode());

                }
                stream_SILENT.reset();
                dbg.location(254,79);
                adaptor.addChild(root_1, stream_from.nextTree());
                dbg.location(254,85);
                adaptor.addChild(root_1, stream_to.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(255, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "move");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "move"

    public static class copy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "copy"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:257:1: copy : COPY ( SILENT )? from= graphOrDefault TO to= graphOrDefault -> ^( COPY ( SILENT )* $from $to) ;
    public final SparqlParser.copy_return copy() throws RecognitionException {
        SparqlParser.copy_return retval = new SparqlParser.copy_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COPY149=null;
        Token SILENT150=null;
        Token TO151=null;
        SparqlParser.graphOrDefault_return from = null;

        SparqlParser.graphOrDefault_return to = null;


        CommonTree COPY149_tree=null;
        CommonTree SILENT150_tree=null;
        CommonTree TO151_tree=null;
        RewriteRuleTokenStream stream_SILENT=new RewriteRuleTokenStream(adaptor,"token SILENT");
        RewriteRuleTokenStream stream_TO=new RewriteRuleTokenStream(adaptor,"token TO");
        RewriteRuleTokenStream stream_COPY=new RewriteRuleTokenStream(adaptor,"token COPY");
        RewriteRuleSubtreeStream stream_graphOrDefault=new RewriteRuleSubtreeStream(adaptor,"rule graphOrDefault");
        try { dbg.enterRule(getGrammarFileName(), "copy");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(257, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:258:5: ( COPY ( SILENT )? from= graphOrDefault TO to= graphOrDefault -> ^( COPY ( SILENT )* $from $to) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:258:7: COPY ( SILENT )? from= graphOrDefault TO to= graphOrDefault
            {
            dbg.location(258,7);
            COPY149=(Token)match(input,COPY,FOLLOW_COPY_in_copy1891);  
            stream_COPY.add(COPY149);

            dbg.location(258,12);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:258:12: ( SILENT )?
            int alt52=2;
            try { dbg.enterSubRule(52);
            try { dbg.enterDecision(52);

            int LA52_0 = input.LA(1);

            if ( (LA52_0==SILENT) ) {
                alt52=1;
            }
            } finally {dbg.exitDecision(52);}

            switch (alt52) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:258:12: SILENT
                    {
                    dbg.location(258,12);
                    SILENT150=(Token)match(input,SILENT,FOLLOW_SILENT_in_copy1893);  
                    stream_SILENT.add(SILENT150);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(52);}

            dbg.location(258,24);
            pushFollow(FOLLOW_graphOrDefault_in_copy1898);
            from=graphOrDefault();

            state._fsp--;

            stream_graphOrDefault.add(from.getTree());
            dbg.location(258,40);
            TO151=(Token)match(input,TO,FOLLOW_TO_in_copy1900);  
            stream_TO.add(TO151);

            dbg.location(258,45);
            pushFollow(FOLLOW_graphOrDefault_in_copy1904);
            to=graphOrDefault();

            state._fsp--;

            stream_graphOrDefault.add(to.getTree());


            // AST REWRITE
            // elements: COPY, from, SILENT, to
            // token labels: 
            // rule labels: to, retval, from
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_to=new RewriteRuleSubtreeStream(adaptor,"rule to",to!=null?to.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_from=new RewriteRuleSubtreeStream(adaptor,"rule from",from!=null?from.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 258:61: -> ^( COPY ( SILENT )* $from $to)
            {
                dbg.location(258,64);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:258:64: ^( COPY ( SILENT )* $from $to)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(258,66);
                root_1 = (CommonTree)adaptor.becomeRoot(stream_COPY.nextNode(), root_1);

                dbg.location(258,71);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:258:71: ( SILENT )*
                while ( stream_SILENT.hasNext() ) {
                    dbg.location(258,71);
                    adaptor.addChild(root_1, stream_SILENT.nextNode());

                }
                stream_SILENT.reset();
                dbg.location(258,79);
                adaptor.addChild(root_1, stream_from.nextTree());
                dbg.location(258,85);
                adaptor.addChild(root_1, stream_to.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(259, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "copy");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "copy"

    public static class insert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insert"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:261:1: insert : INSERT DATA quadPattern -> ^( INSERT DATA quadPattern ) ;
    public final SparqlParser.insert_return insert() throws RecognitionException {
        SparqlParser.insert_return retval = new SparqlParser.insert_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT152=null;
        Token DATA153=null;
        SparqlParser.quadPattern_return quadPattern154 = null;


        CommonTree INSERT152_tree=null;
        CommonTree DATA153_tree=null;
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_DATA=new RewriteRuleTokenStream(adaptor,"token DATA");
        RewriteRuleSubtreeStream stream_quadPattern=new RewriteRuleSubtreeStream(adaptor,"rule quadPattern");
        try { dbg.enterRule(getGrammarFileName(), "insert");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(261, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:262:5: ( INSERT DATA quadPattern -> ^( INSERT DATA quadPattern ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:262:7: INSERT DATA quadPattern
            {
            dbg.location(262,7);
            INSERT152=(Token)match(input,INSERT,FOLLOW_INSERT_in_insert1936);  
            stream_INSERT.add(INSERT152);

            dbg.location(262,14);
            DATA153=(Token)match(input,DATA,FOLLOW_DATA_in_insert1938);  
            stream_DATA.add(DATA153);

            dbg.location(262,19);
            pushFollow(FOLLOW_quadPattern_in_insert1940);
            quadPattern154=quadPattern();

            state._fsp--;

            stream_quadPattern.add(quadPattern154.getTree());


            // AST REWRITE
            // elements: quadPattern, DATA, INSERT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 262:31: -> ^( INSERT DATA quadPattern )
            {
                dbg.location(262,34);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:262:34: ^( INSERT DATA quadPattern )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(262,36);
                root_1 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_1);

                dbg.location(262,43);
                adaptor.addChild(root_1, stream_DATA.nextNode());
                dbg.location(262,48);
                adaptor.addChild(root_1, stream_quadPattern.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(263, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "insert");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "insert"

    public static class delete_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "delete"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:265:1: delete : ( DELETE deleteData -> ^( DELETE deleteData ) | DELETE deleteWhere -> ^( DELETE deleteWhere ) );
    public final SparqlParser.delete_return delete() throws RecognitionException {
        SparqlParser.delete_return retval = new SparqlParser.delete_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DELETE155=null;
        Token DELETE157=null;
        SparqlParser.deleteData_return deleteData156 = null;

        SparqlParser.deleteWhere_return deleteWhere158 = null;


        CommonTree DELETE155_tree=null;
        CommonTree DELETE157_tree=null;
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_deleteData=new RewriteRuleSubtreeStream(adaptor,"rule deleteData");
        RewriteRuleSubtreeStream stream_deleteWhere=new RewriteRuleSubtreeStream(adaptor,"rule deleteWhere");
        try { dbg.enterRule(getGrammarFileName(), "delete");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(265, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:266:5: ( DELETE deleteData -> ^( DELETE deleteData ) | DELETE deleteWhere -> ^( DELETE deleteWhere ) )
            int alt53=2;
            try { dbg.enterDecision(53);

            int LA53_0 = input.LA(1);

            if ( (LA53_0==DELETE) ) {
                int LA53_1 = input.LA(2);

                if ( (LA53_1==WHERE) ) {
                    alt53=2;
                }
                else if ( (LA53_1==DATA) ) {
                    alt53=1;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 53, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(53);}

            switch (alt53) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:266:7: DELETE deleteData
                    {
                    dbg.location(266,7);
                    DELETE155=(Token)match(input,DELETE,FOLLOW_DELETE_in_delete1974);  
                    stream_DELETE.add(DELETE155);

                    dbg.location(266,14);
                    pushFollow(FOLLOW_deleteData_in_delete1976);
                    deleteData156=deleteData();

                    state._fsp--;

                    stream_deleteData.add(deleteData156.getTree());


                    // AST REWRITE
                    // elements: DELETE, deleteData
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 266:25: -> ^( DELETE deleteData )
                    {
                        dbg.location(266,28);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:266:28: ^( DELETE deleteData )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(266,30);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_DELETE.nextNode(), root_1);

                        dbg.location(266,37);
                        adaptor.addChild(root_1, stream_deleteData.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:267:7: DELETE deleteWhere
                    {
                    dbg.location(267,7);
                    DELETE157=(Token)match(input,DELETE,FOLLOW_DELETE_in_delete1992);  
                    stream_DELETE.add(DELETE157);

                    dbg.location(267,14);
                    pushFollow(FOLLOW_deleteWhere_in_delete1994);
                    deleteWhere158=deleteWhere();

                    state._fsp--;

                    stream_deleteWhere.add(deleteWhere158.getTree());


                    // AST REWRITE
                    // elements: deleteWhere, DELETE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 267:26: -> ^( DELETE deleteWhere )
                    {
                        dbg.location(267,29);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:267:29: ^( DELETE deleteWhere )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(267,31);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_DELETE.nextNode(), root_1);

                        dbg.location(267,38);
                        adaptor.addChild(root_1, stream_deleteWhere.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(268, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "delete");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "delete"

    public static class deleteData_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "deleteData"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:270:1: deleteData : DATA quadPattern -> ^( DELETE DATA quadPattern ) ;
    public final SparqlParser.deleteData_return deleteData() throws RecognitionException {
        SparqlParser.deleteData_return retval = new SparqlParser.deleteData_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DATA159=null;
        SparqlParser.quadPattern_return quadPattern160 = null;


        CommonTree DATA159_tree=null;
        RewriteRuleTokenStream stream_DATA=new RewriteRuleTokenStream(adaptor,"token DATA");
        RewriteRuleSubtreeStream stream_quadPattern=new RewriteRuleSubtreeStream(adaptor,"rule quadPattern");
        try { dbg.enterRule(getGrammarFileName(), "deleteData");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(270, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:271:5: ( DATA quadPattern -> ^( DELETE DATA quadPattern ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:271:7: DATA quadPattern
            {
            dbg.location(271,7);
            DATA159=(Token)match(input,DATA,FOLLOW_DATA_in_deleteData2019);  
            stream_DATA.add(DATA159);

            dbg.location(271,12);
            pushFollow(FOLLOW_quadPattern_in_deleteData2021);
            quadPattern160=quadPattern();

            state._fsp--;

            stream_quadPattern.add(quadPattern160.getTree());


            // AST REWRITE
            // elements: DATA, quadPattern
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 271:24: -> ^( DELETE DATA quadPattern )
            {
                dbg.location(271,27);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:271:27: ^( DELETE DATA quadPattern )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(271,29);
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DELETE, "DELETE"), root_1);

                dbg.location(271,36);
                adaptor.addChild(root_1, stream_DATA.nextNode());
                dbg.location(271,41);
                adaptor.addChild(root_1, stream_quadPattern.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(272, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "deleteData");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "deleteData"

    public static class deleteWhere_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "deleteWhere"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:274:1: deleteWhere : WHERE quadPattern -> ^( DELETE WHERE quadPattern ) ;
    public final SparqlParser.deleteWhere_return deleteWhere() throws RecognitionException {
        SparqlParser.deleteWhere_return retval = new SparqlParser.deleteWhere_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token WHERE161=null;
        SparqlParser.quadPattern_return quadPattern162 = null;


        CommonTree WHERE161_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleSubtreeStream stream_quadPattern=new RewriteRuleSubtreeStream(adaptor,"rule quadPattern");
        try { dbg.enterRule(getGrammarFileName(), "deleteWhere");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(274, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:275:5: ( WHERE quadPattern -> ^( DELETE WHERE quadPattern ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:275:7: WHERE quadPattern
            {
            dbg.location(275,7);
            WHERE161=(Token)match(input,WHERE,FOLLOW_WHERE_in_deleteWhere2048);  
            stream_WHERE.add(WHERE161);

            dbg.location(275,13);
            pushFollow(FOLLOW_quadPattern_in_deleteWhere2050);
            quadPattern162=quadPattern();

            state._fsp--;

            stream_quadPattern.add(quadPattern162.getTree());


            // AST REWRITE
            // elements: WHERE, quadPattern
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 275:25: -> ^( DELETE WHERE quadPattern )
            {
                dbg.location(275,28);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:275:28: ^( DELETE WHERE quadPattern )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(275,30);
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DELETE, "DELETE"), root_1);

                dbg.location(275,37);
                adaptor.addChild(root_1, stream_WHERE.nextNode());
                dbg.location(275,43);
                adaptor.addChild(root_1, stream_quadPattern.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(276, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "deleteWhere");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "deleteWhere"

    public static class modify_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modify"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:278:1: modify : ( WITH iriRef )? ( deleteClause ( insertClause )? | insertClause ) ( usingClause )* WHERE groupGraphPattern -> ^( MODIFY ( WITH iriRef )? ( deleteClause )* ( insertClause )* ( usingClause )* ^( WHERE_CLAUSE groupGraphPattern ) ) ;
    public final SparqlParser.modify_return modify() throws RecognitionException {
        SparqlParser.modify_return retval = new SparqlParser.modify_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token WITH163=null;
        Token WHERE169=null;
        SparqlParser.iriRef_return iriRef164 = null;

        SparqlParser.deleteClause_return deleteClause165 = null;

        SparqlParser.insertClause_return insertClause166 = null;

        SparqlParser.insertClause_return insertClause167 = null;

        SparqlParser.usingClause_return usingClause168 = null;

        SparqlParser.groupGraphPattern_return groupGraphPattern170 = null;


        CommonTree WITH163_tree=null;
        CommonTree WHERE169_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_WITH=new RewriteRuleTokenStream(adaptor,"token WITH");
        RewriteRuleSubtreeStream stream_deleteClause=new RewriteRuleSubtreeStream(adaptor,"rule deleteClause");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        RewriteRuleSubtreeStream stream_iriRef=new RewriteRuleSubtreeStream(adaptor,"rule iriRef");
        RewriteRuleSubtreeStream stream_insertClause=new RewriteRuleSubtreeStream(adaptor,"rule insertClause");
        RewriteRuleSubtreeStream stream_usingClause=new RewriteRuleSubtreeStream(adaptor,"rule usingClause");
        try { dbg.enterRule(getGrammarFileName(), "modify");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(278, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:279:5: ( ( WITH iriRef )? ( deleteClause ( insertClause )? | insertClause ) ( usingClause )* WHERE groupGraphPattern -> ^( MODIFY ( WITH iriRef )? ( deleteClause )* ( insertClause )* ( usingClause )* ^( WHERE_CLAUSE groupGraphPattern ) ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:279:7: ( WITH iriRef )? ( deleteClause ( insertClause )? | insertClause ) ( usingClause )* WHERE groupGraphPattern
            {
            dbg.location(279,7);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:279:7: ( WITH iriRef )?
            int alt54=2;
            try { dbg.enterSubRule(54);
            try { dbg.enterDecision(54);

            int LA54_0 = input.LA(1);

            if ( (LA54_0==WITH) ) {
                alt54=1;
            }
            } finally {dbg.exitDecision(54);}

            switch (alt54) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:279:8: WITH iriRef
                    {
                    dbg.location(279,8);
                    WITH163=(Token)match(input,WITH,FOLLOW_WITH_in_modify2082);  
                    stream_WITH.add(WITH163);

                    dbg.location(279,13);
                    pushFollow(FOLLOW_iriRef_in_modify2084);
                    iriRef164=iriRef();

                    state._fsp--;

                    stream_iriRef.add(iriRef164.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(54);}

            dbg.location(279,22);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:279:22: ( deleteClause ( insertClause )? | insertClause )
            int alt56=2;
            try { dbg.enterSubRule(56);
            try { dbg.enterDecision(56);

            int LA56_0 = input.LA(1);

            if ( (LA56_0==DELETE) ) {
                alt56=1;
            }
            else if ( (LA56_0==INSERT) ) {
                alt56=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(56);}

            switch (alt56) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:279:23: deleteClause ( insertClause )?
                    {
                    dbg.location(279,23);
                    pushFollow(FOLLOW_deleteClause_in_modify2089);
                    deleteClause165=deleteClause();

                    state._fsp--;

                    stream_deleteClause.add(deleteClause165.getTree());
                    dbg.location(279,36);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:279:36: ( insertClause )?
                    int alt55=2;
                    try { dbg.enterSubRule(55);
                    try { dbg.enterDecision(55);

                    int LA55_0 = input.LA(1);

                    if ( (LA55_0==INSERT) ) {
                        alt55=1;
                    }
                    } finally {dbg.exitDecision(55);}

                    switch (alt55) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:279:36: insertClause
                            {
                            dbg.location(279,36);
                            pushFollow(FOLLOW_insertClause_in_modify2091);
                            insertClause166=insertClause();

                            state._fsp--;

                            stream_insertClause.add(insertClause166.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(55);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:279:52: insertClause
                    {
                    dbg.location(279,52);
                    pushFollow(FOLLOW_insertClause_in_modify2096);
                    insertClause167=insertClause();

                    state._fsp--;

                    stream_insertClause.add(insertClause167.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(56);}

            dbg.location(279,66);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:279:66: ( usingClause )*
            try { dbg.enterSubRule(57);

            loop57:
            do {
                int alt57=2;
                try { dbg.enterDecision(57);

                int LA57_0 = input.LA(1);

                if ( (LA57_0==USING) ) {
                    alt57=1;
                }


                } finally {dbg.exitDecision(57);}

                switch (alt57) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:279:66: usingClause
            	    {
            	    dbg.location(279,66);
            	    pushFollow(FOLLOW_usingClause_in_modify2099);
            	    usingClause168=usingClause();

            	    state._fsp--;

            	    stream_usingClause.add(usingClause168.getTree());

            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);
            } finally {dbg.exitSubRule(57);}

            dbg.location(279,79);
            WHERE169=(Token)match(input,WHERE,FOLLOW_WHERE_in_modify2102);  
            stream_WHERE.add(WHERE169);

            dbg.location(279,85);
            pushFollow(FOLLOW_groupGraphPattern_in_modify2104);
            groupGraphPattern170=groupGraphPattern();

            state._fsp--;

            stream_groupGraphPattern.add(groupGraphPattern170.getTree());


            // AST REWRITE
            // elements: usingClause, iriRef, groupGraphPattern, deleteClause, WITH, insertClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 279:103: -> ^( MODIFY ( WITH iriRef )? ( deleteClause )* ( insertClause )* ( usingClause )* ^( WHERE_CLAUSE groupGraphPattern ) )
            {
                dbg.location(279,106);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:279:106: ^( MODIFY ( WITH iriRef )? ( deleteClause )* ( insertClause )* ( usingClause )* ^( WHERE_CLAUSE groupGraphPattern ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(279,108);
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MODIFY, "MODIFY"), root_1);

                dbg.location(279,115);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:279:115: ( WITH iriRef )?
                if ( stream_iriRef.hasNext()||stream_WITH.hasNext() ) {
                    dbg.location(279,116);
                    adaptor.addChild(root_1, stream_WITH.nextNode());
                    dbg.location(279,121);
                    adaptor.addChild(root_1, stream_iriRef.nextTree());

                }
                stream_iriRef.reset();
                stream_WITH.reset();
                dbg.location(279,130);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:279:130: ( deleteClause )*
                while ( stream_deleteClause.hasNext() ) {
                    dbg.location(279,130);
                    adaptor.addChild(root_1, stream_deleteClause.nextTree());

                }
                stream_deleteClause.reset();
                dbg.location(279,144);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:279:144: ( insertClause )*
                while ( stream_insertClause.hasNext() ) {
                    dbg.location(279,144);
                    adaptor.addChild(root_1, stream_insertClause.nextTree());

                }
                stream_insertClause.reset();
                dbg.location(279,158);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:279:158: ( usingClause )*
                while ( stream_usingClause.hasNext() ) {
                    dbg.location(279,158);
                    adaptor.addChild(root_1, stream_usingClause.nextTree());

                }
                stream_usingClause.reset();
                dbg.location(279,171);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:279:171: ^( WHERE_CLAUSE groupGraphPattern )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                dbg.location(279,173);
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_CLAUSE, "WHERE_CLAUSE"), root_2);

                dbg.location(279,186);
                adaptor.addChild(root_2, stream_groupGraphPattern.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(280, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "modify");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "modify"

    public static class deleteClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "deleteClause"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:282:1: deleteClause : DELETE quadPattern -> ^( DELETE quadPattern ) ;
    public final SparqlParser.deleteClause_return deleteClause() throws RecognitionException {
        SparqlParser.deleteClause_return retval = new SparqlParser.deleteClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DELETE171=null;
        SparqlParser.quadPattern_return quadPattern172 = null;


        CommonTree DELETE171_tree=null;
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_quadPattern=new RewriteRuleSubtreeStream(adaptor,"rule quadPattern");
        try { dbg.enterRule(getGrammarFileName(), "deleteClause");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(282, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:283:5: ( DELETE quadPattern -> ^( DELETE quadPattern ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:283:7: DELETE quadPattern
            {
            dbg.location(283,7);
            DELETE171=(Token)match(input,DELETE,FOLLOW_DELETE_in_deleteClause2151);  
            stream_DELETE.add(DELETE171);

            dbg.location(283,14);
            pushFollow(FOLLOW_quadPattern_in_deleteClause2153);
            quadPattern172=quadPattern();

            state._fsp--;

            stream_quadPattern.add(quadPattern172.getTree());


            // AST REWRITE
            // elements: quadPattern, DELETE
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 283:26: -> ^( DELETE quadPattern )
            {
                dbg.location(283,29);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:283:29: ^( DELETE quadPattern )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(283,31);
                root_1 = (CommonTree)adaptor.becomeRoot(stream_DELETE.nextNode(), root_1);

                dbg.location(283,38);
                adaptor.addChild(root_1, stream_quadPattern.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(284, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "deleteClause");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "deleteClause"

    public static class insertClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insertClause"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:286:1: insertClause : INSERT quadPattern -> ^( INSERT quadPattern ) ;
    public final SparqlParser.insertClause_return insertClause() throws RecognitionException {
        SparqlParser.insertClause_return retval = new SparqlParser.insertClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT173=null;
        SparqlParser.quadPattern_return quadPattern174 = null;


        CommonTree INSERT173_tree=null;
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleSubtreeStream stream_quadPattern=new RewriteRuleSubtreeStream(adaptor,"rule quadPattern");
        try { dbg.enterRule(getGrammarFileName(), "insertClause");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(286, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:287:5: ( INSERT quadPattern -> ^( INSERT quadPattern ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:287:7: INSERT quadPattern
            {
            dbg.location(287,7);
            INSERT173=(Token)match(input,INSERT,FOLLOW_INSERT_in_insertClause2184);  
            stream_INSERT.add(INSERT173);

            dbg.location(287,14);
            pushFollow(FOLLOW_quadPattern_in_insertClause2186);
            quadPattern174=quadPattern();

            state._fsp--;

            stream_quadPattern.add(quadPattern174.getTree());


            // AST REWRITE
            // elements: INSERT, quadPattern
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 287:26: -> ^( INSERT quadPattern )
            {
                dbg.location(287,29);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:287:29: ^( INSERT quadPattern )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(287,31);
                root_1 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_1);

                dbg.location(287,38);
                adaptor.addChild(root_1, stream_quadPattern.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(288, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "insertClause");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "insertClause"

    public static class usingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "usingClause"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:290:1: usingClause : USING ( NAMED )? iriRef -> ^( USING ( NAMED )? iriRef ) ;
    public final SparqlParser.usingClause_return usingClause() throws RecognitionException {
        SparqlParser.usingClause_return retval = new SparqlParser.usingClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token USING175=null;
        Token NAMED176=null;
        SparqlParser.iriRef_return iriRef177 = null;


        CommonTree USING175_tree=null;
        CommonTree NAMED176_tree=null;
        RewriteRuleTokenStream stream_USING=new RewriteRuleTokenStream(adaptor,"token USING");
        RewriteRuleTokenStream stream_NAMED=new RewriteRuleTokenStream(adaptor,"token NAMED");
        RewriteRuleSubtreeStream stream_iriRef=new RewriteRuleSubtreeStream(adaptor,"rule iriRef");
        try { dbg.enterRule(getGrammarFileName(), "usingClause");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(290, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:291:5: ( USING ( NAMED )? iriRef -> ^( USING ( NAMED )? iriRef ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:291:7: USING ( NAMED )? iriRef
            {
            dbg.location(291,7);
            USING175=(Token)match(input,USING,FOLLOW_USING_in_usingClause2211);  
            stream_USING.add(USING175);

            dbg.location(291,13);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:291:13: ( NAMED )?
            int alt58=2;
            try { dbg.enterSubRule(58);
            try { dbg.enterDecision(58);

            int LA58_0 = input.LA(1);

            if ( (LA58_0==NAMED) ) {
                alt58=1;
            }
            } finally {dbg.exitDecision(58);}

            switch (alt58) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:291:13: NAMED
                    {
                    dbg.location(291,13);
                    NAMED176=(Token)match(input,NAMED,FOLLOW_NAMED_in_usingClause2213);  
                    stream_NAMED.add(NAMED176);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(58);}

            dbg.location(291,20);
            pushFollow(FOLLOW_iriRef_in_usingClause2216);
            iriRef177=iriRef();

            state._fsp--;

            stream_iriRef.add(iriRef177.getTree());


            // AST REWRITE
            // elements: USING, iriRef, NAMED
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 291:27: -> ^( USING ( NAMED )? iriRef )
            {
                dbg.location(291,30);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:291:30: ^( USING ( NAMED )? iriRef )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(291,32);
                root_1 = (CommonTree)adaptor.becomeRoot(stream_USING.nextNode(), root_1);

                dbg.location(291,38);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:291:38: ( NAMED )?
                if ( stream_NAMED.hasNext() ) {
                    dbg.location(291,38);
                    adaptor.addChild(root_1, stream_NAMED.nextNode());

                }
                stream_NAMED.reset();
                dbg.location(291,45);
                adaptor.addChild(root_1, stream_iriRef.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(292, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "usingClause");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "usingClause"

    public static class graphOrDefault_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "graphOrDefault"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:294:1: graphOrDefault : ( DEFAULT | ( GRAPH )? iriRef );
    public final SparqlParser.graphOrDefault_return graphOrDefault() throws RecognitionException {
        SparqlParser.graphOrDefault_return retval = new SparqlParser.graphOrDefault_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DEFAULT178=null;
        Token GRAPH179=null;
        SparqlParser.iriRef_return iriRef180 = null;


        CommonTree DEFAULT178_tree=null;
        CommonTree GRAPH179_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "graphOrDefault");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(294, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:295:5: ( DEFAULT | ( GRAPH )? iriRef )
            int alt60=2;
            try { dbg.enterDecision(60);

            int LA60_0 = input.LA(1);

            if ( (LA60_0==DEFAULT) ) {
                alt60=1;
            }
            else if ( (LA60_0==IRI_REF||LA60_0==PNAME_NS||LA60_0==GRAPH||LA60_0==PNAME_LN) ) {
                alt60=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 60, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(60);}

            switch (alt60) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:295:7: DEFAULT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(295,7);
                    DEFAULT178=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_graphOrDefault2247); 
                    DEFAULT178_tree = (CommonTree)adaptor.create(DEFAULT178);
                    adaptor.addChild(root_0, DEFAULT178_tree);


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:296:7: ( GRAPH )? iriRef
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(296,7);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:296:7: ( GRAPH )?
                    int alt59=2;
                    try { dbg.enterSubRule(59);
                    try { dbg.enterDecision(59);

                    int LA59_0 = input.LA(1);

                    if ( (LA59_0==GRAPH) ) {
                        alt59=1;
                    }
                    } finally {dbg.exitDecision(59);}

                    switch (alt59) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:296:7: GRAPH
                            {
                            dbg.location(296,7);
                            GRAPH179=(Token)match(input,GRAPH,FOLLOW_GRAPH_in_graphOrDefault2256); 
                            GRAPH179_tree = (CommonTree)adaptor.create(GRAPH179);
                            adaptor.addChild(root_0, GRAPH179_tree);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(59);}

                    dbg.location(296,14);
                    pushFollow(FOLLOW_iriRef_in_graphOrDefault2259);
                    iriRef180=iriRef();

                    state._fsp--;

                    adaptor.addChild(root_0, iriRef180.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(297, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "graphOrDefault");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "graphOrDefault"

    public static class graphRef_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "graphRef"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:299:1: graphRef : GRAPH iriRef ;
    public final SparqlParser.graphRef_return graphRef() throws RecognitionException {
        SparqlParser.graphRef_return retval = new SparqlParser.graphRef_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token GRAPH181=null;
        SparqlParser.iriRef_return iriRef182 = null;


        CommonTree GRAPH181_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "graphRef");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(299, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:300:5: ( GRAPH iriRef )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:300:7: GRAPH iriRef
            {
            root_0 = (CommonTree)adaptor.nil();

            dbg.location(300,7);
            GRAPH181=(Token)match(input,GRAPH,FOLLOW_GRAPH_in_graphRef2286); 
            GRAPH181_tree = (CommonTree)adaptor.create(GRAPH181);
            adaptor.addChild(root_0, GRAPH181_tree);

            dbg.location(300,13);
            pushFollow(FOLLOW_iriRef_in_graphRef2288);
            iriRef182=iriRef();

            state._fsp--;

            adaptor.addChild(root_0, iriRef182.getTree());

            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(301, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "graphRef");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "graphRef"

    public static class graphRefAll_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "graphRefAll"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:303:1: graphRefAll : ( graphRef | DEFAULT | NAMED | ALL );
    public final SparqlParser.graphRefAll_return graphRefAll() throws RecognitionException {
        SparqlParser.graphRefAll_return retval = new SparqlParser.graphRefAll_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DEFAULT184=null;
        Token NAMED185=null;
        Token ALL186=null;
        SparqlParser.graphRef_return graphRef183 = null;


        CommonTree DEFAULT184_tree=null;
        CommonTree NAMED185_tree=null;
        CommonTree ALL186_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "graphRefAll");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(303, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:304:5: ( graphRef | DEFAULT | NAMED | ALL )
            int alt61=4;
            try { dbg.enterDecision(61);

            switch ( input.LA(1) ) {
            case GRAPH:
                {
                alt61=1;
                }
                break;
            case DEFAULT:
                {
                alt61=2;
                }
                break;
            case NAMED:
                {
                alt61=3;
                }
                break;
            case ALL:
                {
                alt61=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 61, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(61);}

            switch (alt61) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:304:7: graphRef
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(304,7);
                    pushFollow(FOLLOW_graphRef_in_graphRefAll2305);
                    graphRef183=graphRef();

                    state._fsp--;

                    adaptor.addChild(root_0, graphRef183.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:304:18: DEFAULT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(304,18);
                    DEFAULT184=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_graphRefAll2309); 
                    DEFAULT184_tree = (CommonTree)adaptor.create(DEFAULT184);
                    adaptor.addChild(root_0, DEFAULT184_tree);


                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:304:28: NAMED
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(304,28);
                    NAMED185=(Token)match(input,NAMED,FOLLOW_NAMED_in_graphRefAll2313); 
                    NAMED185_tree = (CommonTree)adaptor.create(NAMED185);
                    adaptor.addChild(root_0, NAMED185_tree);


                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:304:36: ALL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(304,36);
                    ALL186=(Token)match(input,ALL,FOLLOW_ALL_in_graphRefAll2317); 
                    ALL186_tree = (CommonTree)adaptor.create(ALL186);
                    adaptor.addChild(root_0, ALL186_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(305, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "graphRefAll");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "graphRefAll"

    public static class quadPattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quadPattern"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:307:1: quadPattern : OPEN_CURLY_BRACE quads CLOSE_CURLY_BRACE -> quads ;
    public final SparqlParser.quadPattern_return quadPattern() throws RecognitionException {
        SparqlParser.quadPattern_return retval = new SparqlParser.quadPattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token OPEN_CURLY_BRACE187=null;
        Token CLOSE_CURLY_BRACE189=null;
        SparqlParser.quads_return quads188 = null;


        CommonTree OPEN_CURLY_BRACE187_tree=null;
        CommonTree CLOSE_CURLY_BRACE189_tree=null;
        RewriteRuleTokenStream stream_OPEN_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_CURLY_BRACE");
        RewriteRuleTokenStream stream_CLOSE_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_CURLY_BRACE");
        RewriteRuleSubtreeStream stream_quads=new RewriteRuleSubtreeStream(adaptor,"rule quads");
        try { dbg.enterRule(getGrammarFileName(), "quadPattern");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(307, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:308:5: ( OPEN_CURLY_BRACE quads CLOSE_CURLY_BRACE -> quads )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:308:7: OPEN_CURLY_BRACE quads CLOSE_CURLY_BRACE
            {
            dbg.location(308,7);
            OPEN_CURLY_BRACE187=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_quadPattern2334);  
            stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE187);

            dbg.location(308,24);
            pushFollow(FOLLOW_quads_in_quadPattern2336);
            quads188=quads();

            state._fsp--;

            stream_quads.add(quads188.getTree());
            dbg.location(308,30);
            CLOSE_CURLY_BRACE189=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_quadPattern2338);  
            stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE189);



            // AST REWRITE
            // elements: quads
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 308:48: -> quads
            {
                dbg.location(308,51);
                adaptor.addChild(root_0, stream_quads.nextTree());

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(309, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "quadPattern");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "quadPattern"

    public static class quads_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quads"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:311:1: quads : ( triplesTemplate )? ( quadsDetails )* -> ( triplesTemplate )? ( quadsDetails )* ;
    public final SparqlParser.quads_return quads() throws RecognitionException {
        SparqlParser.quads_return retval = new SparqlParser.quads_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        SparqlParser.triplesTemplate_return triplesTemplate190 = null;

        SparqlParser.quadsDetails_return quadsDetails191 = null;


        RewriteRuleSubtreeStream stream_triplesTemplate=new RewriteRuleSubtreeStream(adaptor,"rule triplesTemplate");
        RewriteRuleSubtreeStream stream_quadsDetails=new RewriteRuleSubtreeStream(adaptor,"rule quadsDetails");
        try { dbg.enterRule(getGrammarFileName(), "quads");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(311, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:312:5: ( ( triplesTemplate )? ( quadsDetails )* -> ( triplesTemplate )? ( quadsDetails )* )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:312:7: ( triplesTemplate )? ( quadsDetails )*
            {
            dbg.location(312,7);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:312:7: ( triplesTemplate )?
            int alt62=2;
            try { dbg.enterSubRule(62);
            try { dbg.enterDecision(62);

            int LA62_0 = input.LA(1);

            if ( (LA62_0==IRI_REF||LA62_0==PNAME_NS||LA62_0==OPEN_BRACE||LA62_0==INTEGER||LA62_0==OPEN_SQUARE_BRACKET||(LA62_0>=VAR1 && LA62_0<=VAR2)||(LA62_0>=DECIMAL && LA62_0<=BLANK_NODE_LABEL)) ) {
                alt62=1;
            }
            } finally {dbg.exitDecision(62);}

            switch (alt62) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:312:7: triplesTemplate
                    {
                    dbg.location(312,7);
                    pushFollow(FOLLOW_triplesTemplate_in_quads2363);
                    triplesTemplate190=triplesTemplate();

                    state._fsp--;

                    stream_triplesTemplate.add(triplesTemplate190.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(62);}

            dbg.location(312,24);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:312:24: ( quadsDetails )*
            try { dbg.enterSubRule(63);

            loop63:
            do {
                int alt63=2;
                try { dbg.enterDecision(63);

                int LA63_0 = input.LA(1);

                if ( (LA63_0==GRAPH) ) {
                    alt63=1;
                }


                } finally {dbg.exitDecision(63);}

                switch (alt63) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:312:24: quadsDetails
            	    {
            	    dbg.location(312,24);
            	    pushFollow(FOLLOW_quadsDetails_in_quads2366);
            	    quadsDetails191=quadsDetails();

            	    state._fsp--;

            	    stream_quadsDetails.add(quadsDetails191.getTree());

            	    }
            	    break;

            	default :
            	    break loop63;
                }
            } while (true);
            } finally {dbg.exitSubRule(63);}



            // AST REWRITE
            // elements: quadsDetails, triplesTemplate
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 312:38: -> ( triplesTemplate )? ( quadsDetails )*
            {
                dbg.location(312,42);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:312:42: ( triplesTemplate )?
                if ( stream_triplesTemplate.hasNext() ) {
                    dbg.location(312,42);
                    adaptor.addChild(root_0, stream_triplesTemplate.nextTree());

                }
                stream_triplesTemplate.reset();
                dbg.location(312,59);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:312:59: ( quadsDetails )*
                while ( stream_quadsDetails.hasNext() ) {
                    dbg.location(312,59);
                    adaptor.addChild(root_0, stream_quadsDetails.nextTree());

                }
                stream_quadsDetails.reset();

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(313, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "quads");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "quads"

    public static class quadsDetails_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quadsDetails"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:315:1: quadsDetails : quadsNotTriples ( DOT )? ( triplesTemplate )? -> quadsNotTriples ( triplesTemplate )? ;
    public final SparqlParser.quadsDetails_return quadsDetails() throws RecognitionException {
        SparqlParser.quadsDetails_return retval = new SparqlParser.quadsDetails_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT193=null;
        SparqlParser.quadsNotTriples_return quadsNotTriples192 = null;

        SparqlParser.triplesTemplate_return triplesTemplate194 = null;


        CommonTree DOT193_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_triplesTemplate=new RewriteRuleSubtreeStream(adaptor,"rule triplesTemplate");
        RewriteRuleSubtreeStream stream_quadsNotTriples=new RewriteRuleSubtreeStream(adaptor,"rule quadsNotTriples");
        try { dbg.enterRule(getGrammarFileName(), "quadsDetails");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(315, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:316:5: ( quadsNotTriples ( DOT )? ( triplesTemplate )? -> quadsNotTriples ( triplesTemplate )? )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:316:7: quadsNotTriples ( DOT )? ( triplesTemplate )?
            {
            dbg.location(316,7);
            pushFollow(FOLLOW_quadsNotTriples_in_quadsDetails2398);
            quadsNotTriples192=quadsNotTriples();

            state._fsp--;

            stream_quadsNotTriples.add(quadsNotTriples192.getTree());
            dbg.location(316,23);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:316:23: ( DOT )?
            int alt64=2;
            try { dbg.enterSubRule(64);
            try { dbg.enterDecision(64);

            int LA64_0 = input.LA(1);

            if ( (LA64_0==DOT) ) {
                alt64=1;
            }
            } finally {dbg.exitDecision(64);}

            switch (alt64) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:316:23: DOT
                    {
                    dbg.location(316,23);
                    DOT193=(Token)match(input,DOT,FOLLOW_DOT_in_quadsDetails2400);  
                    stream_DOT.add(DOT193);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(64);}

            dbg.location(316,28);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:316:28: ( triplesTemplate )?
            int alt65=2;
            try { dbg.enterSubRule(65);
            try { dbg.enterDecision(65);

            int LA65_0 = input.LA(1);

            if ( (LA65_0==IRI_REF||LA65_0==PNAME_NS||LA65_0==OPEN_BRACE||LA65_0==INTEGER||LA65_0==OPEN_SQUARE_BRACKET||(LA65_0>=VAR1 && LA65_0<=VAR2)||(LA65_0>=DECIMAL && LA65_0<=BLANK_NODE_LABEL)) ) {
                alt65=1;
            }
            } finally {dbg.exitDecision(65);}

            switch (alt65) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:316:28: triplesTemplate
                    {
                    dbg.location(316,28);
                    pushFollow(FOLLOW_triplesTemplate_in_quadsDetails2403);
                    triplesTemplate194=triplesTemplate();

                    state._fsp--;

                    stream_triplesTemplate.add(triplesTemplate194.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(65);}



            // AST REWRITE
            // elements: quadsNotTriples, triplesTemplate
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 316:45: -> quadsNotTriples ( triplesTemplate )?
            {
                dbg.location(316,48);
                adaptor.addChild(root_0, stream_quadsNotTriples.nextTree());
                dbg.location(316,64);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:316:64: ( triplesTemplate )?
                if ( stream_triplesTemplate.hasNext() ) {
                    dbg.location(316,64);
                    adaptor.addChild(root_0, stream_triplesTemplate.nextTree());

                }
                stream_triplesTemplate.reset();

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(317, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "quadsDetails");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "quadsDetails"

    public static class quadsNotTriples_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quadsNotTriples"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:319:1: quadsNotTriples : GRAPH varOrIRIref OPEN_CURLY_BRACE ( triplesTemplate )? CLOSE_CURLY_BRACE -> ^( GRAPH varOrIRIref ( triplesTemplate )? ) ;
    public final SparqlParser.quadsNotTriples_return quadsNotTriples() throws RecognitionException {
        SparqlParser.quadsNotTriples_return retval = new SparqlParser.quadsNotTriples_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token GRAPH195=null;
        Token OPEN_CURLY_BRACE197=null;
        Token CLOSE_CURLY_BRACE199=null;
        SparqlParser.varOrIRIref_return varOrIRIref196 = null;

        SparqlParser.triplesTemplate_return triplesTemplate198 = null;


        CommonTree GRAPH195_tree=null;
        CommonTree OPEN_CURLY_BRACE197_tree=null;
        CommonTree CLOSE_CURLY_BRACE199_tree=null;
        RewriteRuleTokenStream stream_GRAPH=new RewriteRuleTokenStream(adaptor,"token GRAPH");
        RewriteRuleTokenStream stream_OPEN_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_CURLY_BRACE");
        RewriteRuleTokenStream stream_CLOSE_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_CURLY_BRACE");
        RewriteRuleSubtreeStream stream_varOrIRIref=new RewriteRuleSubtreeStream(adaptor,"rule varOrIRIref");
        RewriteRuleSubtreeStream stream_triplesTemplate=new RewriteRuleSubtreeStream(adaptor,"rule triplesTemplate");
        try { dbg.enterRule(getGrammarFileName(), "quadsNotTriples");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(319, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:320:5: ( GRAPH varOrIRIref OPEN_CURLY_BRACE ( triplesTemplate )? CLOSE_CURLY_BRACE -> ^( GRAPH varOrIRIref ( triplesTemplate )? ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:320:7: GRAPH varOrIRIref OPEN_CURLY_BRACE ( triplesTemplate )? CLOSE_CURLY_BRACE
            {
            dbg.location(320,7);
            GRAPH195=(Token)match(input,GRAPH,FOLLOW_GRAPH_in_quadsNotTriples2432);  
            stream_GRAPH.add(GRAPH195);

            dbg.location(320,13);
            pushFollow(FOLLOW_varOrIRIref_in_quadsNotTriples2434);
            varOrIRIref196=varOrIRIref();

            state._fsp--;

            stream_varOrIRIref.add(varOrIRIref196.getTree());
            dbg.location(320,25);
            OPEN_CURLY_BRACE197=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_quadsNotTriples2436);  
            stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE197);

            dbg.location(320,42);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:320:42: ( triplesTemplate )?
            int alt66=2;
            try { dbg.enterSubRule(66);
            try { dbg.enterDecision(66);

            int LA66_0 = input.LA(1);

            if ( (LA66_0==IRI_REF||LA66_0==PNAME_NS||LA66_0==OPEN_BRACE||LA66_0==INTEGER||LA66_0==OPEN_SQUARE_BRACKET||(LA66_0>=VAR1 && LA66_0<=VAR2)||(LA66_0>=DECIMAL && LA66_0<=BLANK_NODE_LABEL)) ) {
                alt66=1;
            }
            } finally {dbg.exitDecision(66);}

            switch (alt66) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:320:42: triplesTemplate
                    {
                    dbg.location(320,42);
                    pushFollow(FOLLOW_triplesTemplate_in_quadsNotTriples2438);
                    triplesTemplate198=triplesTemplate();

                    state._fsp--;

                    stream_triplesTemplate.add(triplesTemplate198.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(66);}

            dbg.location(320,59);
            CLOSE_CURLY_BRACE199=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_quadsNotTriples2441);  
            stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE199);



            // AST REWRITE
            // elements: GRAPH, triplesTemplate, varOrIRIref
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 320:77: -> ^( GRAPH varOrIRIref ( triplesTemplate )? )
            {
                dbg.location(320,80);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:320:80: ^( GRAPH varOrIRIref ( triplesTemplate )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(320,82);
                root_1 = (CommonTree)adaptor.becomeRoot(stream_GRAPH.nextNode(), root_1);

                dbg.location(320,88);
                adaptor.addChild(root_1, stream_varOrIRIref.nextTree());
                dbg.location(320,100);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:320:100: ( triplesTemplate )?
                if ( stream_triplesTemplate.hasNext() ) {
                    dbg.location(320,100);
                    adaptor.addChild(root_1, stream_triplesTemplate.nextTree());

                }
                stream_triplesTemplate.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(321, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "quadsNotTriples");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "quadsNotTriples"

    public static class triplesTemplate_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "triplesTemplate"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:323:1: triplesTemplate : triplesSameSubject ( DOT triplesSameSubject )* ( DOT )? -> ^( TRIPLES_TEMPLATE ( triplesSameSubject )* ) ;
    public final SparqlParser.triplesTemplate_return triplesTemplate() throws RecognitionException {
        SparqlParser.triplesTemplate_return retval = new SparqlParser.triplesTemplate_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT201=null;
        Token DOT203=null;
        SparqlParser.triplesSameSubject_return triplesSameSubject200 = null;

        SparqlParser.triplesSameSubject_return triplesSameSubject202 = null;


        CommonTree DOT201_tree=null;
        CommonTree DOT203_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_triplesSameSubject=new RewriteRuleSubtreeStream(adaptor,"rule triplesSameSubject");
        try { dbg.enterRule(getGrammarFileName(), "triplesTemplate");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(323, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:324:5: ( triplesSameSubject ( DOT triplesSameSubject )* ( DOT )? -> ^( TRIPLES_TEMPLATE ( triplesSameSubject )* ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:324:7: triplesSameSubject ( DOT triplesSameSubject )* ( DOT )?
            {
            dbg.location(324,7);
            pushFollow(FOLLOW_triplesSameSubject_in_triplesTemplate2473);
            triplesSameSubject200=triplesSameSubject();

            state._fsp--;

            stream_triplesSameSubject.add(triplesSameSubject200.getTree());
            dbg.location(324,26);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:324:26: ( DOT triplesSameSubject )*
            try { dbg.enterSubRule(67);

            loop67:
            do {
                int alt67=2;
                try { dbg.enterDecision(67);

                int LA67_0 = input.LA(1);

                if ( (LA67_0==DOT) ) {
                    int LA67_1 = input.LA(2);

                    if ( (LA67_1==IRI_REF||LA67_1==PNAME_NS||LA67_1==OPEN_BRACE||LA67_1==INTEGER||LA67_1==OPEN_SQUARE_BRACKET||(LA67_1>=VAR1 && LA67_1<=VAR2)||(LA67_1>=DECIMAL && LA67_1<=BLANK_NODE_LABEL)) ) {
                        alt67=1;
                    }


                }


                } finally {dbg.exitDecision(67);}

                switch (alt67) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:324:27: DOT triplesSameSubject
            	    {
            	    dbg.location(324,27);
            	    DOT201=(Token)match(input,DOT,FOLLOW_DOT_in_triplesTemplate2476);  
            	    stream_DOT.add(DOT201);

            	    dbg.location(324,31);
            	    pushFollow(FOLLOW_triplesSameSubject_in_triplesTemplate2478);
            	    triplesSameSubject202=triplesSameSubject();

            	    state._fsp--;

            	    stream_triplesSameSubject.add(triplesSameSubject202.getTree());

            	    }
            	    break;

            	default :
            	    break loop67;
                }
            } while (true);
            } finally {dbg.exitSubRule(67);}

            dbg.location(324,52);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:324:52: ( DOT )?
            int alt68=2;
            try { dbg.enterSubRule(68);
            try { dbg.enterDecision(68);

            int LA68_0 = input.LA(1);

            if ( (LA68_0==DOT) ) {
                alt68=1;
            }
            } finally {dbg.exitDecision(68);}

            switch (alt68) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:324:52: DOT
                    {
                    dbg.location(324,52);
                    DOT203=(Token)match(input,DOT,FOLLOW_DOT_in_triplesTemplate2482);  
                    stream_DOT.add(DOT203);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(68);}



            // AST REWRITE
            // elements: triplesSameSubject
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 324:57: -> ^( TRIPLES_TEMPLATE ( triplesSameSubject )* )
            {
                dbg.location(324,60);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:324:60: ^( TRIPLES_TEMPLATE ( triplesSameSubject )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(324,62);
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TRIPLES_TEMPLATE, "TRIPLES_TEMPLATE"), root_1);

                dbg.location(324,79);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:324:79: ( triplesSameSubject )*
                while ( stream_triplesSameSubject.hasNext() ) {
                    dbg.location(324,79);
                    adaptor.addChild(root_1, stream_triplesSameSubject.nextTree());

                }
                stream_triplesSameSubject.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(325, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "triplesTemplate");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "triplesTemplate"

    public static class groupGraphPattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupGraphPattern"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:327:1: groupGraphPattern : ( OPEN_CURLY_BRACE subSelect CLOSE_CURLY_BRACE -> ^( GROUP_GRAPH_PATTERN subSelect ) | OPEN_CURLY_BRACE groupGraphPatternSub CLOSE_CURLY_BRACE -> ^( GROUP_GRAPH_PATTERN groupGraphPatternSub ) | OPEN_CURLY_BRACE CLOSE_CURLY_BRACE -> ^( GROUP_GRAPH_PATTERN GROUP_GRAPH_PATTERN ) );
    public final SparqlParser.groupGraphPattern_return groupGraphPattern() throws RecognitionException {
        SparqlParser.groupGraphPattern_return retval = new SparqlParser.groupGraphPattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token OPEN_CURLY_BRACE204=null;
        Token CLOSE_CURLY_BRACE206=null;
        Token OPEN_CURLY_BRACE207=null;
        Token CLOSE_CURLY_BRACE209=null;
        Token OPEN_CURLY_BRACE210=null;
        Token CLOSE_CURLY_BRACE211=null;
        SparqlParser.subSelect_return subSelect205 = null;

        SparqlParser.groupGraphPatternSub_return groupGraphPatternSub208 = null;


        CommonTree OPEN_CURLY_BRACE204_tree=null;
        CommonTree CLOSE_CURLY_BRACE206_tree=null;
        CommonTree OPEN_CURLY_BRACE207_tree=null;
        CommonTree CLOSE_CURLY_BRACE209_tree=null;
        CommonTree OPEN_CURLY_BRACE210_tree=null;
        CommonTree CLOSE_CURLY_BRACE211_tree=null;
        RewriteRuleTokenStream stream_OPEN_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_CURLY_BRACE");
        RewriteRuleTokenStream stream_CLOSE_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_CURLY_BRACE");
        RewriteRuleSubtreeStream stream_groupGraphPatternSub=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPatternSub");
        RewriteRuleSubtreeStream stream_subSelect=new RewriteRuleSubtreeStream(adaptor,"rule subSelect");
        try { dbg.enterRule(getGrammarFileName(), "groupGraphPattern");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(327, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:328:5: ( OPEN_CURLY_BRACE subSelect CLOSE_CURLY_BRACE -> ^( GROUP_GRAPH_PATTERN subSelect ) | OPEN_CURLY_BRACE groupGraphPatternSub CLOSE_CURLY_BRACE -> ^( GROUP_GRAPH_PATTERN groupGraphPatternSub ) | OPEN_CURLY_BRACE CLOSE_CURLY_BRACE -> ^( GROUP_GRAPH_PATTERN GROUP_GRAPH_PATTERN ) )
            int alt69=3;
            try { dbg.enterDecision(69);

            int LA69_0 = input.LA(1);

            if ( (LA69_0==OPEN_CURLY_BRACE) ) {
                switch ( input.LA(2) ) {
                case CLOSE_CURLY_BRACE:
                    {
                    alt69=3;
                    }
                    break;
                case SELECT:
                    {
                    alt69=1;
                    }
                    break;
                case IRI_REF:
                case PNAME_NS:
                case OPEN_BRACE:
                case OPEN_CURLY_BRACE:
                case INTEGER:
                case GRAPH:
                case OPTIONAL:
                case SERVICE:
                case BIND:
                case MINUS_KEYWORD:
                case FILTER:
                case OPEN_SQUARE_BRACKET:
                case VAR1:
                case VAR2:
                case DECIMAL:
                case DOUBLE:
                case INTEGER_POSITIVE:
                case DECIMAL_POSITIVE:
                case DOUBLE_POSITIVE:
                case INTEGER_NEGATIVE:
                case DECIMAL_NEGATIVE:
                case DOUBLE_NEGATIVE:
                case TRUE:
                case FALSE:
                case STRING_LITERAL1:
                case STRING_LITERAL2:
                case STRING_LITERAL_LONG1:
                case STRING_LITERAL_LONG2:
                case PNAME_LN:
                case BLANK_NODE_LABEL:
                    {
                    alt69=2;
                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("", 69, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(69);}

            switch (alt69) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:328:7: OPEN_CURLY_BRACE subSelect CLOSE_CURLY_BRACE
                    {
                    dbg.location(328,7);
                    OPEN_CURLY_BRACE204=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_groupGraphPattern2514);  
                    stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE204);

                    dbg.location(328,24);
                    pushFollow(FOLLOW_subSelect_in_groupGraphPattern2516);
                    subSelect205=subSelect();

                    state._fsp--;

                    stream_subSelect.add(subSelect205.getTree());
                    dbg.location(328,34);
                    CLOSE_CURLY_BRACE206=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_groupGraphPattern2518);  
                    stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE206);



                    // AST REWRITE
                    // elements: subSelect
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 328:52: -> ^( GROUP_GRAPH_PATTERN subSelect )
                    {
                        dbg.location(328,55);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:328:55: ^( GROUP_GRAPH_PATTERN subSelect )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(328,57);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_GRAPH_PATTERN, "GROUP_GRAPH_PATTERN"), root_1);

                        dbg.location(328,77);
                        adaptor.addChild(root_1, stream_subSelect.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:329:7: OPEN_CURLY_BRACE groupGraphPatternSub CLOSE_CURLY_BRACE
                    {
                    dbg.location(329,7);
                    OPEN_CURLY_BRACE207=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_groupGraphPattern2534);  
                    stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE207);

                    dbg.location(329,24);
                    pushFollow(FOLLOW_groupGraphPatternSub_in_groupGraphPattern2536);
                    groupGraphPatternSub208=groupGraphPatternSub();

                    state._fsp--;

                    stream_groupGraphPatternSub.add(groupGraphPatternSub208.getTree());
                    dbg.location(329,45);
                    CLOSE_CURLY_BRACE209=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_groupGraphPattern2538);  
                    stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE209);



                    // AST REWRITE
                    // elements: groupGraphPatternSub
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 329:63: -> ^( GROUP_GRAPH_PATTERN groupGraphPatternSub )
                    {
                        dbg.location(329,66);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:329:66: ^( GROUP_GRAPH_PATTERN groupGraphPatternSub )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(329,68);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_GRAPH_PATTERN, "GROUP_GRAPH_PATTERN"), root_1);

                        dbg.location(329,88);
                        adaptor.addChild(root_1, stream_groupGraphPatternSub.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:330:7: OPEN_CURLY_BRACE CLOSE_CURLY_BRACE
                    {
                    dbg.location(330,7);
                    OPEN_CURLY_BRACE210=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_groupGraphPattern2554);  
                    stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE210);

                    dbg.location(330,24);
                    CLOSE_CURLY_BRACE211=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_groupGraphPattern2556);  
                    stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE211);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 330:42: -> ^( GROUP_GRAPH_PATTERN GROUP_GRAPH_PATTERN )
                    {
                        dbg.location(330,45);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:330:45: ^( GROUP_GRAPH_PATTERN GROUP_GRAPH_PATTERN )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(330,47);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_GRAPH_PATTERN, "GROUP_GRAPH_PATTERN"), root_1);

                        dbg.location(330,67);
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(GROUP_GRAPH_PATTERN, "GROUP_GRAPH_PATTERN"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(331, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "groupGraphPattern");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "groupGraphPattern"

    public static class groupGraphPatternSub_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupGraphPatternSub"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:333:1: groupGraphPatternSub : ( triplesBlock ( groupGraphPatternSubDetail )* -> triplesBlock ( groupGraphPatternSubDetail )* | ( groupGraphPatternSubDetail )+ -> ( groupGraphPatternSubDetail )+ );
    public final SparqlParser.groupGraphPatternSub_return groupGraphPatternSub() throws RecognitionException {
        SparqlParser.groupGraphPatternSub_return retval = new SparqlParser.groupGraphPatternSub_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        SparqlParser.triplesBlock_return triplesBlock212 = null;

        SparqlParser.groupGraphPatternSubDetail_return groupGraphPatternSubDetail213 = null;

        SparqlParser.groupGraphPatternSubDetail_return groupGraphPatternSubDetail214 = null;


        RewriteRuleSubtreeStream stream_triplesBlock=new RewriteRuleSubtreeStream(adaptor,"rule triplesBlock");
        RewriteRuleSubtreeStream stream_groupGraphPatternSubDetail=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPatternSubDetail");
        try { dbg.enterRule(getGrammarFileName(), "groupGraphPatternSub");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(333, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:334:5: ( triplesBlock ( groupGraphPatternSubDetail )* -> triplesBlock ( groupGraphPatternSubDetail )* | ( groupGraphPatternSubDetail )+ -> ( groupGraphPatternSubDetail )+ )
            int alt72=2;
            try { dbg.enterDecision(72);

            int LA72_0 = input.LA(1);

            if ( (LA72_0==IRI_REF||LA72_0==PNAME_NS||LA72_0==OPEN_BRACE||LA72_0==INTEGER||LA72_0==OPEN_SQUARE_BRACKET||(LA72_0>=VAR1 && LA72_0<=VAR2)||(LA72_0>=DECIMAL && LA72_0<=BLANK_NODE_LABEL)) ) {
                alt72=1;
            }
            else if ( (LA72_0==OPEN_CURLY_BRACE||LA72_0==GRAPH||(LA72_0>=OPTIONAL && LA72_0<=MINUS_KEYWORD)||LA72_0==FILTER) ) {
                alt72=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(72);}

            switch (alt72) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:334:7: triplesBlock ( groupGraphPatternSubDetail )*
                    {
                    dbg.location(334,7);
                    pushFollow(FOLLOW_triplesBlock_in_groupGraphPatternSub2585);
                    triplesBlock212=triplesBlock();

                    state._fsp--;

                    stream_triplesBlock.add(triplesBlock212.getTree());
                    dbg.location(334,20);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:334:20: ( groupGraphPatternSubDetail )*
                    try { dbg.enterSubRule(70);

                    loop70:
                    do {
                        int alt70=2;
                        try { dbg.enterDecision(70);

                        int LA70_0 = input.LA(1);

                        if ( (LA70_0==OPEN_CURLY_BRACE||LA70_0==GRAPH||(LA70_0>=OPTIONAL && LA70_0<=MINUS_KEYWORD)||LA70_0==FILTER) ) {
                            alt70=1;
                        }


                        } finally {dbg.exitDecision(70);}

                        switch (alt70) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:334:20: groupGraphPatternSubDetail
                    	    {
                    	    dbg.location(334,20);
                    	    pushFollow(FOLLOW_groupGraphPatternSubDetail_in_groupGraphPatternSub2587);
                    	    groupGraphPatternSubDetail213=groupGraphPatternSubDetail();

                    	    state._fsp--;

                    	    stream_groupGraphPatternSubDetail.add(groupGraphPatternSubDetail213.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop70;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(70);}



                    // AST REWRITE
                    // elements: groupGraphPatternSubDetail, triplesBlock
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 334:48: -> triplesBlock ( groupGraphPatternSubDetail )*
                    {
                        dbg.location(334,51);
                        adaptor.addChild(root_0, stream_triplesBlock.nextTree());
                        dbg.location(334,64);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:334:64: ( groupGraphPatternSubDetail )*
                        while ( stream_groupGraphPatternSubDetail.hasNext() ) {
                            dbg.location(334,64);
                            adaptor.addChild(root_0, stream_groupGraphPatternSubDetail.nextTree());

                        }
                        stream_groupGraphPatternSubDetail.reset();

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:335:7: ( groupGraphPatternSubDetail )+
                    {
                    dbg.location(335,7);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:335:7: ( groupGraphPatternSubDetail )+
                    int cnt71=0;
                    try { dbg.enterSubRule(71);

                    loop71:
                    do {
                        int alt71=2;
                        try { dbg.enterDecision(71);

                        int LA71_0 = input.LA(1);

                        if ( (LA71_0==OPEN_CURLY_BRACE||LA71_0==GRAPH||(LA71_0>=OPTIONAL && LA71_0<=MINUS_KEYWORD)||LA71_0==FILTER) ) {
                            alt71=1;
                        }


                        } finally {dbg.exitDecision(71);}

                        switch (alt71) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:335:7: groupGraphPatternSubDetail
                    	    {
                    	    dbg.location(335,7);
                    	    pushFollow(FOLLOW_groupGraphPatternSubDetail_in_groupGraphPatternSub2603);
                    	    groupGraphPatternSubDetail214=groupGraphPatternSubDetail();

                    	    state._fsp--;

                    	    stream_groupGraphPatternSubDetail.add(groupGraphPatternSubDetail214.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt71 >= 1 ) break loop71;
                                EarlyExitException eee =
                                    new EarlyExitException(71, input);
                                dbg.recognitionException(eee);

                                throw eee;
                        }
                        cnt71++;
                    } while (true);
                    } finally {dbg.exitSubRule(71);}



                    // AST REWRITE
                    // elements: groupGraphPatternSubDetail
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 335:35: -> ( groupGraphPatternSubDetail )+
                    {
                        dbg.location(335,38);
                        if ( !(stream_groupGraphPatternSubDetail.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_groupGraphPatternSubDetail.hasNext() ) {
                            dbg.location(335,38);
                            adaptor.addChild(root_0, stream_groupGraphPatternSubDetail.nextTree());

                        }
                        stream_groupGraphPatternSubDetail.reset();

                    }

                    retval.tree = root_0;
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(336, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "groupGraphPatternSub");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "groupGraphPatternSub"

    public static class groupGraphPatternSubDetail_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupGraphPatternSubDetail"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:338:1: groupGraphPatternSubDetail : graphPatternNotTriples ( DOT )? ( triplesBlock )? -> graphPatternNotTriples ( triplesBlock )? ;
    public final SparqlParser.groupGraphPatternSubDetail_return groupGraphPatternSubDetail() throws RecognitionException {
        SparqlParser.groupGraphPatternSubDetail_return retval = new SparqlParser.groupGraphPatternSubDetail_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT216=null;
        SparqlParser.graphPatternNotTriples_return graphPatternNotTriples215 = null;

        SparqlParser.triplesBlock_return triplesBlock217 = null;


        CommonTree DOT216_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_triplesBlock=new RewriteRuleSubtreeStream(adaptor,"rule triplesBlock");
        RewriteRuleSubtreeStream stream_graphPatternNotTriples=new RewriteRuleSubtreeStream(adaptor,"rule graphPatternNotTriples");
        try { dbg.enterRule(getGrammarFileName(), "groupGraphPatternSubDetail");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(338, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:339:5: ( graphPatternNotTriples ( DOT )? ( triplesBlock )? -> graphPatternNotTriples ( triplesBlock )? )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:339:7: graphPatternNotTriples ( DOT )? ( triplesBlock )?
            {
            dbg.location(339,7);
            pushFollow(FOLLOW_graphPatternNotTriples_in_groupGraphPatternSubDetail2626);
            graphPatternNotTriples215=graphPatternNotTriples();

            state._fsp--;

            stream_graphPatternNotTriples.add(graphPatternNotTriples215.getTree());
            dbg.location(339,30);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:339:30: ( DOT )?
            int alt73=2;
            try { dbg.enterSubRule(73);
            try { dbg.enterDecision(73);

            int LA73_0 = input.LA(1);

            if ( (LA73_0==DOT) ) {
                alt73=1;
            }
            } finally {dbg.exitDecision(73);}

            switch (alt73) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:339:30: DOT
                    {
                    dbg.location(339,30);
                    DOT216=(Token)match(input,DOT,FOLLOW_DOT_in_groupGraphPatternSubDetail2628);  
                    stream_DOT.add(DOT216);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(73);}

            dbg.location(339,35);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:339:35: ( triplesBlock )?
            int alt74=2;
            try { dbg.enterSubRule(74);
            try { dbg.enterDecision(74);

            int LA74_0 = input.LA(1);

            if ( (LA74_0==IRI_REF||LA74_0==PNAME_NS||LA74_0==OPEN_BRACE||LA74_0==INTEGER||LA74_0==OPEN_SQUARE_BRACKET||(LA74_0>=VAR1 && LA74_0<=VAR2)||(LA74_0>=DECIMAL && LA74_0<=BLANK_NODE_LABEL)) ) {
                alt74=1;
            }
            } finally {dbg.exitDecision(74);}

            switch (alt74) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:339:35: triplesBlock
                    {
                    dbg.location(339,35);
                    pushFollow(FOLLOW_triplesBlock_in_groupGraphPatternSubDetail2631);
                    triplesBlock217=triplesBlock();

                    state._fsp--;

                    stream_triplesBlock.add(triplesBlock217.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(74);}



            // AST REWRITE
            // elements: triplesBlock, graphPatternNotTriples
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 339:49: -> graphPatternNotTriples ( triplesBlock )?
            {
                dbg.location(339,52);
                adaptor.addChild(root_0, stream_graphPatternNotTriples.nextTree());
                dbg.location(339,75);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:339:75: ( triplesBlock )?
                if ( stream_triplesBlock.hasNext() ) {
                    dbg.location(339,75);
                    adaptor.addChild(root_0, stream_triplesBlock.nextTree());

                }
                stream_triplesBlock.reset();

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(340, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "groupGraphPatternSubDetail");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "groupGraphPatternSubDetail"

    public static class triplesBlock_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "triplesBlock"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:342:1: triplesBlock : triplesSameSubjectPath ( DOT triplesSameSubjectPath )* ( DOT )? -> ( triplesSameSubjectPath )+ ;
    public final SparqlParser.triplesBlock_return triplesBlock() throws RecognitionException {
        SparqlParser.triplesBlock_return retval = new SparqlParser.triplesBlock_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT219=null;
        Token DOT221=null;
        SparqlParser.triplesSameSubjectPath_return triplesSameSubjectPath218 = null;

        SparqlParser.triplesSameSubjectPath_return triplesSameSubjectPath220 = null;


        CommonTree DOT219_tree=null;
        CommonTree DOT221_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_triplesSameSubjectPath=new RewriteRuleSubtreeStream(adaptor,"rule triplesSameSubjectPath");
        try { dbg.enterRule(getGrammarFileName(), "triplesBlock");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(342, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:343:5: ( triplesSameSubjectPath ( DOT triplesSameSubjectPath )* ( DOT )? -> ( triplesSameSubjectPath )+ )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:343:7: triplesSameSubjectPath ( DOT triplesSameSubjectPath )* ( DOT )?
            {
            dbg.location(343,7);
            pushFollow(FOLLOW_triplesSameSubjectPath_in_triplesBlock2656);
            triplesSameSubjectPath218=triplesSameSubjectPath();

            state._fsp--;

            stream_triplesSameSubjectPath.add(triplesSameSubjectPath218.getTree());
            dbg.location(343,30);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:343:30: ( DOT triplesSameSubjectPath )*
            try { dbg.enterSubRule(75);

            loop75:
            do {
                int alt75=2;
                try { dbg.enterDecision(75);

                int LA75_0 = input.LA(1);

                if ( (LA75_0==DOT) ) {
                    int LA75_1 = input.LA(2);

                    if ( (LA75_1==IRI_REF||LA75_1==PNAME_NS||LA75_1==OPEN_BRACE||LA75_1==INTEGER||LA75_1==OPEN_SQUARE_BRACKET||(LA75_1>=VAR1 && LA75_1<=VAR2)||(LA75_1>=DECIMAL && LA75_1<=BLANK_NODE_LABEL)) ) {
                        alt75=1;
                    }


                }


                } finally {dbg.exitDecision(75);}

                switch (alt75) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:343:31: DOT triplesSameSubjectPath
            	    {
            	    dbg.location(343,31);
            	    DOT219=(Token)match(input,DOT,FOLLOW_DOT_in_triplesBlock2659);  
            	    stream_DOT.add(DOT219);

            	    dbg.location(343,35);
            	    pushFollow(FOLLOW_triplesSameSubjectPath_in_triplesBlock2661);
            	    triplesSameSubjectPath220=triplesSameSubjectPath();

            	    state._fsp--;

            	    stream_triplesSameSubjectPath.add(triplesSameSubjectPath220.getTree());

            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);
            } finally {dbg.exitSubRule(75);}

            dbg.location(343,60);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:343:60: ( DOT )?
            int alt76=2;
            try { dbg.enterSubRule(76);
            try { dbg.enterDecision(76);

            int LA76_0 = input.LA(1);

            if ( (LA76_0==DOT) ) {
                alt76=1;
            }
            } finally {dbg.exitDecision(76);}

            switch (alt76) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:343:60: DOT
                    {
                    dbg.location(343,60);
                    DOT221=(Token)match(input,DOT,FOLLOW_DOT_in_triplesBlock2665);  
                    stream_DOT.add(DOT221);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(76);}



            // AST REWRITE
            // elements: triplesSameSubjectPath
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 343:65: -> ( triplesSameSubjectPath )+
            {
                dbg.location(343,68);
                if ( !(stream_triplesSameSubjectPath.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_triplesSameSubjectPath.hasNext() ) {
                    dbg.location(343,68);
                    adaptor.addChild(root_0, stream_triplesSameSubjectPath.nextTree());

                }
                stream_triplesSameSubjectPath.reset();

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(344, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "triplesBlock");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "triplesBlock"

    public static class graphPatternNotTriples_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "graphPatternNotTriples"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:346:1: graphPatternNotTriples : ( groupOrUnionGraphPattern | optionalGraphPattern | minusGraphPattern | graphGraphPattern | serviceGraphPattern | filter | bind );
    public final SparqlParser.graphPatternNotTriples_return graphPatternNotTriples() throws RecognitionException {
        SparqlParser.graphPatternNotTriples_return retval = new SparqlParser.graphPatternNotTriples_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        SparqlParser.groupOrUnionGraphPattern_return groupOrUnionGraphPattern222 = null;

        SparqlParser.optionalGraphPattern_return optionalGraphPattern223 = null;

        SparqlParser.minusGraphPattern_return minusGraphPattern224 = null;

        SparqlParser.graphGraphPattern_return graphGraphPattern225 = null;

        SparqlParser.serviceGraphPattern_return serviceGraphPattern226 = null;

        SparqlParser.filter_return filter227 = null;

        SparqlParser.bind_return bind228 = null;



        try { dbg.enterRule(getGrammarFileName(), "graphPatternNotTriples");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(346, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:347:5: ( groupOrUnionGraphPattern | optionalGraphPattern | minusGraphPattern | graphGraphPattern | serviceGraphPattern | filter | bind )
            int alt77=7;
            try { dbg.enterDecision(77);

            switch ( input.LA(1) ) {
            case OPEN_CURLY_BRACE:
                {
                alt77=1;
                }
                break;
            case OPTIONAL:
                {
                alt77=2;
                }
                break;
            case MINUS_KEYWORD:
                {
                alt77=3;
                }
                break;
            case GRAPH:
                {
                alt77=4;
                }
                break;
            case SERVICE:
                {
                alt77=5;
                }
                break;
            case FILTER:
                {
                alt77=6;
                }
                break;
            case BIND:
                {
                alt77=7;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 77, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(77);}

            switch (alt77) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:347:7: groupOrUnionGraphPattern
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(347,7);
                    pushFollow(FOLLOW_groupOrUnionGraphPattern_in_graphPatternNotTriples2688);
                    groupOrUnionGraphPattern222=groupOrUnionGraphPattern();

                    state._fsp--;

                    adaptor.addChild(root_0, groupOrUnionGraphPattern222.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:347:34: optionalGraphPattern
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(347,34);
                    pushFollow(FOLLOW_optionalGraphPattern_in_graphPatternNotTriples2692);
                    optionalGraphPattern223=optionalGraphPattern();

                    state._fsp--;

                    adaptor.addChild(root_0, optionalGraphPattern223.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:347:57: minusGraphPattern
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(347,57);
                    pushFollow(FOLLOW_minusGraphPattern_in_graphPatternNotTriples2696);
                    minusGraphPattern224=minusGraphPattern();

                    state._fsp--;

                    adaptor.addChild(root_0, minusGraphPattern224.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:347:77: graphGraphPattern
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(347,77);
                    pushFollow(FOLLOW_graphGraphPattern_in_graphPatternNotTriples2700);
                    graphGraphPattern225=graphGraphPattern();

                    state._fsp--;

                    adaptor.addChild(root_0, graphGraphPattern225.getTree());

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:347:97: serviceGraphPattern
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(347,97);
                    pushFollow(FOLLOW_serviceGraphPattern_in_graphPatternNotTriples2704);
                    serviceGraphPattern226=serviceGraphPattern();

                    state._fsp--;

                    adaptor.addChild(root_0, serviceGraphPattern226.getTree());

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:347:119: filter
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(347,119);
                    pushFollow(FOLLOW_filter_in_graphPatternNotTriples2708);
                    filter227=filter();

                    state._fsp--;

                    adaptor.addChild(root_0, filter227.getTree());

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:347:128: bind
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(347,128);
                    pushFollow(FOLLOW_bind_in_graphPatternNotTriples2712);
                    bind228=bind();

                    state._fsp--;

                    adaptor.addChild(root_0, bind228.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(348, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "graphPatternNotTriples");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "graphPatternNotTriples"

    public static class optionalGraphPattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "optionalGraphPattern"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:350:1: optionalGraphPattern : OPTIONAL groupGraphPattern -> ^( OPTIONAL groupGraphPattern ) ;
    public final SparqlParser.optionalGraphPattern_return optionalGraphPattern() throws RecognitionException {
        SparqlParser.optionalGraphPattern_return retval = new SparqlParser.optionalGraphPattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token OPTIONAL229=null;
        SparqlParser.groupGraphPattern_return groupGraphPattern230 = null;


        CommonTree OPTIONAL229_tree=null;
        RewriteRuleTokenStream stream_OPTIONAL=new RewriteRuleTokenStream(adaptor,"token OPTIONAL");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try { dbg.enterRule(getGrammarFileName(), "optionalGraphPattern");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(350, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:351:5: ( OPTIONAL groupGraphPattern -> ^( OPTIONAL groupGraphPattern ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:351:7: OPTIONAL groupGraphPattern
            {
            dbg.location(351,7);
            OPTIONAL229=(Token)match(input,OPTIONAL,FOLLOW_OPTIONAL_in_optionalGraphPattern2729);  
            stream_OPTIONAL.add(OPTIONAL229);

            dbg.location(351,16);
            pushFollow(FOLLOW_groupGraphPattern_in_optionalGraphPattern2731);
            groupGraphPattern230=groupGraphPattern();

            state._fsp--;

            stream_groupGraphPattern.add(groupGraphPattern230.getTree());


            // AST REWRITE
            // elements: groupGraphPattern, OPTIONAL
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 351:34: -> ^( OPTIONAL groupGraphPattern )
            {
                dbg.location(351,37);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:351:37: ^( OPTIONAL groupGraphPattern )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(351,39);
                root_1 = (CommonTree)adaptor.becomeRoot(stream_OPTIONAL.nextNode(), root_1);

                dbg.location(351,48);
                adaptor.addChild(root_1, stream_groupGraphPattern.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(352, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "optionalGraphPattern");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "optionalGraphPattern"

    public static class graphGraphPattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "graphGraphPattern"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:354:1: graphGraphPattern : GRAPH varOrIRIref groupGraphPattern -> ^( GRAPH varOrIRIref groupGraphPattern ) ;
    public final SparqlParser.graphGraphPattern_return graphGraphPattern() throws RecognitionException {
        SparqlParser.graphGraphPattern_return retval = new SparqlParser.graphGraphPattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token GRAPH231=null;
        SparqlParser.varOrIRIref_return varOrIRIref232 = null;

        SparqlParser.groupGraphPattern_return groupGraphPattern233 = null;


        CommonTree GRAPH231_tree=null;
        RewriteRuleTokenStream stream_GRAPH=new RewriteRuleTokenStream(adaptor,"token GRAPH");
        RewriteRuleSubtreeStream stream_varOrIRIref=new RewriteRuleSubtreeStream(adaptor,"rule varOrIRIref");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try { dbg.enterRule(getGrammarFileName(), "graphGraphPattern");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(354, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:355:5: ( GRAPH varOrIRIref groupGraphPattern -> ^( GRAPH varOrIRIref groupGraphPattern ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:355:7: GRAPH varOrIRIref groupGraphPattern
            {
            dbg.location(355,7);
            GRAPH231=(Token)match(input,GRAPH,FOLLOW_GRAPH_in_graphGraphPattern2756);  
            stream_GRAPH.add(GRAPH231);

            dbg.location(355,13);
            pushFollow(FOLLOW_varOrIRIref_in_graphGraphPattern2758);
            varOrIRIref232=varOrIRIref();

            state._fsp--;

            stream_varOrIRIref.add(varOrIRIref232.getTree());
            dbg.location(355,25);
            pushFollow(FOLLOW_groupGraphPattern_in_graphGraphPattern2760);
            groupGraphPattern233=groupGraphPattern();

            state._fsp--;

            stream_groupGraphPattern.add(groupGraphPattern233.getTree());


            // AST REWRITE
            // elements: groupGraphPattern, varOrIRIref, GRAPH
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 355:43: -> ^( GRAPH varOrIRIref groupGraphPattern )
            {
                dbg.location(355,46);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:355:46: ^( GRAPH varOrIRIref groupGraphPattern )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(355,48);
                root_1 = (CommonTree)adaptor.becomeRoot(stream_GRAPH.nextNode(), root_1);

                dbg.location(355,54);
                adaptor.addChild(root_1, stream_varOrIRIref.nextTree());
                dbg.location(355,66);
                adaptor.addChild(root_1, stream_groupGraphPattern.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(356, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "graphGraphPattern");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "graphGraphPattern"

    public static class serviceGraphPattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "serviceGraphPattern"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:358:1: serviceGraphPattern : SERVICE ( SILENT )? varOrIRIref groupGraphPattern -> ^( SERVICE ( SILENT )? varOrIRIref groupGraphPattern ) ;
    public final SparqlParser.serviceGraphPattern_return serviceGraphPattern() throws RecognitionException {
        SparqlParser.serviceGraphPattern_return retval = new SparqlParser.serviceGraphPattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SERVICE234=null;
        Token SILENT235=null;
        SparqlParser.varOrIRIref_return varOrIRIref236 = null;

        SparqlParser.groupGraphPattern_return groupGraphPattern237 = null;


        CommonTree SERVICE234_tree=null;
        CommonTree SILENT235_tree=null;
        RewriteRuleTokenStream stream_SILENT=new RewriteRuleTokenStream(adaptor,"token SILENT");
        RewriteRuleTokenStream stream_SERVICE=new RewriteRuleTokenStream(adaptor,"token SERVICE");
        RewriteRuleSubtreeStream stream_varOrIRIref=new RewriteRuleSubtreeStream(adaptor,"rule varOrIRIref");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try { dbg.enterRule(getGrammarFileName(), "serviceGraphPattern");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(358, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:359:5: ( SERVICE ( SILENT )? varOrIRIref groupGraphPattern -> ^( SERVICE ( SILENT )? varOrIRIref groupGraphPattern ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:359:7: SERVICE ( SILENT )? varOrIRIref groupGraphPattern
            {
            dbg.location(359,7);
            SERVICE234=(Token)match(input,SERVICE,FOLLOW_SERVICE_in_serviceGraphPattern2787);  
            stream_SERVICE.add(SERVICE234);

            dbg.location(359,15);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:359:15: ( SILENT )?
            int alt78=2;
            try { dbg.enterSubRule(78);
            try { dbg.enterDecision(78);

            int LA78_0 = input.LA(1);

            if ( (LA78_0==SILENT) ) {
                alt78=1;
            }
            } finally {dbg.exitDecision(78);}

            switch (alt78) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:359:15: SILENT
                    {
                    dbg.location(359,15);
                    SILENT235=(Token)match(input,SILENT,FOLLOW_SILENT_in_serviceGraphPattern2789);  
                    stream_SILENT.add(SILENT235);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(78);}

            dbg.location(359,23);
            pushFollow(FOLLOW_varOrIRIref_in_serviceGraphPattern2792);
            varOrIRIref236=varOrIRIref();

            state._fsp--;

            stream_varOrIRIref.add(varOrIRIref236.getTree());
            dbg.location(359,35);
            pushFollow(FOLLOW_groupGraphPattern_in_serviceGraphPattern2794);
            groupGraphPattern237=groupGraphPattern();

            state._fsp--;

            stream_groupGraphPattern.add(groupGraphPattern237.getTree());


            // AST REWRITE
            // elements: groupGraphPattern, varOrIRIref, SILENT, SERVICE
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 359:53: -> ^( SERVICE ( SILENT )? varOrIRIref groupGraphPattern )
            {
                dbg.location(359,56);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:359:56: ^( SERVICE ( SILENT )? varOrIRIref groupGraphPattern )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(359,58);
                root_1 = (CommonTree)adaptor.becomeRoot(stream_SERVICE.nextNode(), root_1);

                dbg.location(359,66);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:359:66: ( SILENT )?
                if ( stream_SILENT.hasNext() ) {
                    dbg.location(359,66);
                    adaptor.addChild(root_1, stream_SILENT.nextNode());

                }
                stream_SILENT.reset();
                dbg.location(359,74);
                adaptor.addChild(root_1, stream_varOrIRIref.nextTree());
                dbg.location(359,86);
                adaptor.addChild(root_1, stream_groupGraphPattern.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(360, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "serviceGraphPattern");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "serviceGraphPattern"

    public static class bind_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bind"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:362:1: bind : BIND OPEN_BRACE expression AS var CLOSE_BRACE -> ^( BIND expression ^( AS var ) ) ;
    public final SparqlParser.bind_return bind() throws RecognitionException {
        SparqlParser.bind_return retval = new SparqlParser.bind_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BIND238=null;
        Token OPEN_BRACE239=null;
        Token AS241=null;
        Token CLOSE_BRACE243=null;
        SparqlParser.expression_return expression240 = null;

        SparqlParser.var_return var242 = null;


        CommonTree BIND238_tree=null;
        CommonTree OPEN_BRACE239_tree=null;
        CommonTree AS241_tree=null;
        CommonTree CLOSE_BRACE243_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_BIND=new RewriteRuleTokenStream(adaptor,"token BIND");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        try { dbg.enterRule(getGrammarFileName(), "bind");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(362, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:363:5: ( BIND OPEN_BRACE expression AS var CLOSE_BRACE -> ^( BIND expression ^( AS var ) ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:363:7: BIND OPEN_BRACE expression AS var CLOSE_BRACE
            {
            dbg.location(363,7);
            BIND238=(Token)match(input,BIND,FOLLOW_BIND_in_bind2828);  
            stream_BIND.add(BIND238);

            dbg.location(363,12);
            OPEN_BRACE239=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_bind2830);  
            stream_OPEN_BRACE.add(OPEN_BRACE239);

            dbg.location(363,23);
            pushFollow(FOLLOW_expression_in_bind2832);
            expression240=expression();

            state._fsp--;

            stream_expression.add(expression240.getTree());
            dbg.location(363,34);
            AS241=(Token)match(input,AS,FOLLOW_AS_in_bind2834);  
            stream_AS.add(AS241);

            dbg.location(363,37);
            pushFollow(FOLLOW_var_in_bind2836);
            var242=var();

            state._fsp--;

            stream_var.add(var242.getTree());
            dbg.location(363,41);
            CLOSE_BRACE243=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_bind2838);  
            stream_CLOSE_BRACE.add(CLOSE_BRACE243);



            // AST REWRITE
            // elements: expression, var, BIND, AS
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 363:53: -> ^( BIND expression ^( AS var ) )
            {
                dbg.location(363,56);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:363:56: ^( BIND expression ^( AS var ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(363,58);
                root_1 = (CommonTree)adaptor.becomeRoot(stream_BIND.nextNode(), root_1);

                dbg.location(363,63);
                adaptor.addChild(root_1, stream_expression.nextTree());
                dbg.location(363,74);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:363:74: ^( AS var )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                dbg.location(363,76);
                root_2 = (CommonTree)adaptor.becomeRoot(stream_AS.nextNode(), root_2);

                dbg.location(363,79);
                adaptor.addChild(root_2, stream_var.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(364, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "bind");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "bind"

    public static class minusGraphPattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minusGraphPattern"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:366:1: minusGraphPattern : MINUS_KEYWORD groupGraphPattern -> ^( MINUS_KEYWORD groupGraphPattern ) ;
    public final SparqlParser.minusGraphPattern_return minusGraphPattern() throws RecognitionException {
        SparqlParser.minusGraphPattern_return retval = new SparqlParser.minusGraphPattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MINUS_KEYWORD244=null;
        SparqlParser.groupGraphPattern_return groupGraphPattern245 = null;


        CommonTree MINUS_KEYWORD244_tree=null;
        RewriteRuleTokenStream stream_MINUS_KEYWORD=new RewriteRuleTokenStream(adaptor,"token MINUS_KEYWORD");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try { dbg.enterRule(getGrammarFileName(), "minusGraphPattern");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(366, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:367:5: ( MINUS_KEYWORD groupGraphPattern -> ^( MINUS_KEYWORD groupGraphPattern ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:367:7: MINUS_KEYWORD groupGraphPattern
            {
            dbg.location(367,7);
            MINUS_KEYWORD244=(Token)match(input,MINUS_KEYWORD,FOLLOW_MINUS_KEYWORD_in_minusGraphPattern2875);  
            stream_MINUS_KEYWORD.add(MINUS_KEYWORD244);

            dbg.location(367,21);
            pushFollow(FOLLOW_groupGraphPattern_in_minusGraphPattern2877);
            groupGraphPattern245=groupGraphPattern();

            state._fsp--;

            stream_groupGraphPattern.add(groupGraphPattern245.getTree());


            // AST REWRITE
            // elements: MINUS_KEYWORD, groupGraphPattern
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 367:39: -> ^( MINUS_KEYWORD groupGraphPattern )
            {
                dbg.location(367,42);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:367:42: ^( MINUS_KEYWORD groupGraphPattern )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(367,44);
                root_1 = (CommonTree)adaptor.becomeRoot(stream_MINUS_KEYWORD.nextNode(), root_1);

                dbg.location(367,58);
                adaptor.addChild(root_1, stream_groupGraphPattern.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(368, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "minusGraphPattern");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "minusGraphPattern"

    public static class groupOrUnionGraphPattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupOrUnionGraphPattern"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:370:1: groupOrUnionGraphPattern : (g1= groupGraphPattern -> $g1) ( ( UNION g2= groupGraphPattern ) -> ^( UNION $groupOrUnionGraphPattern $g2) )* ;
    public final SparqlParser.groupOrUnionGraphPattern_return groupOrUnionGraphPattern() throws RecognitionException {
        SparqlParser.groupOrUnionGraphPattern_return retval = new SparqlParser.groupOrUnionGraphPattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token UNION246=null;
        SparqlParser.groupGraphPattern_return g1 = null;

        SparqlParser.groupGraphPattern_return g2 = null;


        CommonTree UNION246_tree=null;
        RewriteRuleTokenStream stream_UNION=new RewriteRuleTokenStream(adaptor,"token UNION");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try { dbg.enterRule(getGrammarFileName(), "groupOrUnionGraphPattern");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(370, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:371:5: ( (g1= groupGraphPattern -> $g1) ( ( UNION g2= groupGraphPattern ) -> ^( UNION $groupOrUnionGraphPattern $g2) )* )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:371:7: (g1= groupGraphPattern -> $g1) ( ( UNION g2= groupGraphPattern ) -> ^( UNION $groupOrUnionGraphPattern $g2) )*
            {
            dbg.location(371,7);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:371:7: (g1= groupGraphPattern -> $g1)
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:371:8: g1= groupGraphPattern
            {
            dbg.location(371,10);
            pushFollow(FOLLOW_groupGraphPattern_in_groupOrUnionGraphPattern2905);
            g1=groupGraphPattern();

            state._fsp--;

            stream_groupGraphPattern.add(g1.getTree());


            // AST REWRITE
            // elements: g1
            // token labels: 
            // rule labels: retval, g1
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_g1=new RewriteRuleSubtreeStream(adaptor,"rule g1",g1!=null?g1.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 371:28: -> $g1
            {
                dbg.location(371,30);
                adaptor.addChild(root_0, stream_g1.nextTree());

            }

            retval.tree = root_0;
            }

            dbg.location(371,35);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:371:35: ( ( UNION g2= groupGraphPattern ) -> ^( UNION $groupOrUnionGraphPattern $g2) )*
            try { dbg.enterSubRule(79);

            loop79:
            do {
                int alt79=2;
                try { dbg.enterDecision(79);

                int LA79_0 = input.LA(1);

                if ( (LA79_0==UNION) ) {
                    alt79=1;
                }


                } finally {dbg.exitDecision(79);}

                switch (alt79) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:371:36: ( UNION g2= groupGraphPattern )
            	    {
            	    dbg.location(371,36);
            	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:371:36: ( UNION g2= groupGraphPattern )
            	    dbg.enterAlt(1);

            	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:371:37: UNION g2= groupGraphPattern
            	    {
            	    dbg.location(371,37);
            	    UNION246=(Token)match(input,UNION,FOLLOW_UNION_in_groupOrUnionGraphPattern2913);  
            	    stream_UNION.add(UNION246);

            	    dbg.location(371,45);
            	    pushFollow(FOLLOW_groupGraphPattern_in_groupOrUnionGraphPattern2917);
            	    g2=groupGraphPattern();

            	    state._fsp--;

            	    stream_groupGraphPattern.add(g2.getTree());

            	    }



            	    // AST REWRITE
            	    // elements: g2, groupOrUnionGraphPattern, UNION
            	    // token labels: 
            	    // rule labels: retval, g2
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            	    RewriteRuleSubtreeStream stream_g2=new RewriteRuleSubtreeStream(adaptor,"rule g2",g2!=null?g2.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 371:65: -> ^( UNION $groupOrUnionGraphPattern $g2)
            	    {
            	        dbg.location(371,68);
            	        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:371:68: ^( UNION $groupOrUnionGraphPattern $g2)
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        dbg.location(371,70);
            	        root_1 = (CommonTree)adaptor.becomeRoot(stream_UNION.nextNode(), root_1);

            	        dbg.location(371,76);
            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        dbg.location(371,102);
            	        adaptor.addChild(root_1, stream_g2.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;
            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);
            } finally {dbg.exitSubRule(79);}


            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(372, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "groupOrUnionGraphPattern");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "groupOrUnionGraphPattern"

    public static class filter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "filter"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:374:1: filter : FILTER constraint -> ^( FILTER constraint ) ;
    public final SparqlParser.filter_return filter() throws RecognitionException {
        SparqlParser.filter_return retval = new SparqlParser.filter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token FILTER247=null;
        SparqlParser.constraint_return constraint248 = null;


        CommonTree FILTER247_tree=null;
        RewriteRuleTokenStream stream_FILTER=new RewriteRuleTokenStream(adaptor,"token FILTER");
        RewriteRuleSubtreeStream stream_constraint=new RewriteRuleSubtreeStream(adaptor,"rule constraint");
        try { dbg.enterRule(getGrammarFileName(), "filter");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(374, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:375:5: ( FILTER constraint -> ^( FILTER constraint ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:375:7: FILTER constraint
            {
            dbg.location(375,7);
            FILTER247=(Token)match(input,FILTER,FOLLOW_FILTER_in_filter2949);  
            stream_FILTER.add(FILTER247);

            dbg.location(375,14);
            pushFollow(FOLLOW_constraint_in_filter2951);
            constraint248=constraint();

            state._fsp--;

            stream_constraint.add(constraint248.getTree());


            // AST REWRITE
            // elements: FILTER, constraint
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 375:25: -> ^( FILTER constraint )
            {
                dbg.location(375,28);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:375:28: ^( FILTER constraint )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(375,30);
                root_1 = (CommonTree)adaptor.becomeRoot(stream_FILTER.nextNode(), root_1);

                dbg.location(375,37);
                adaptor.addChild(root_1, stream_constraint.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(376, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "filter");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "filter"

    public static class constraint_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constraint"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:378:1: constraint : ( brackettedExpression -> ^( EXPRESSION brackettedExpression ) | builtInCall -> ^( CALL builtInCall ) | functionCall -> ^( FUNCTION functionCall ) );
    public final SparqlParser.constraint_return constraint() throws RecognitionException {
        SparqlParser.constraint_return retval = new SparqlParser.constraint_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        SparqlParser.brackettedExpression_return brackettedExpression249 = null;

        SparqlParser.builtInCall_return builtInCall250 = null;

        SparqlParser.functionCall_return functionCall251 = null;


        RewriteRuleSubtreeStream stream_functionCall=new RewriteRuleSubtreeStream(adaptor,"rule functionCall");
        RewriteRuleSubtreeStream stream_builtInCall=new RewriteRuleSubtreeStream(adaptor,"rule builtInCall");
        RewriteRuleSubtreeStream stream_brackettedExpression=new RewriteRuleSubtreeStream(adaptor,"rule brackettedExpression");
        try { dbg.enterRule(getGrammarFileName(), "constraint");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(378, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:379:5: ( brackettedExpression -> ^( EXPRESSION brackettedExpression ) | builtInCall -> ^( CALL builtInCall ) | functionCall -> ^( FUNCTION functionCall ) )
            int alt80=3;
            try { dbg.enterDecision(80);

            switch ( input.LA(1) ) {
            case OPEN_BRACE:
                {
                alt80=1;
                }
                break;
            case NOT:
            case STR:
            case LANG:
            case LANGMATCHES:
            case DATATYPE:
            case BOUND:
            case IRI:
            case URI:
            case BNODE:
            case RAND:
            case ABS:
            case CEIL:
            case FLOOR:
            case ROUND:
            case CONCAT:
            case STRLEN:
            case UCASE:
            case LCASE:
            case ENCODE_FOR_URI:
            case CONTAINS:
            case STRSTARTS:
            case STRENDS:
            case STRBEFORE:
            case STRAFTER:
            case YEAR:
            case MONTH:
            case DAY:
            case HOURS:
            case MINUTES:
            case SECONDS:
            case TIMEZONE:
            case TZ:
            case NOW:
            case MD5:
            case SHA1:
            case SHA256:
            case SHA384:
            case SHA512:
            case COALESCE:
            case IF:
            case STRLANG:
            case STRDT:
            case SAMETERM:
            case ISIRI:
            case ISURI:
            case ISBLANK:
            case ISLITERAL:
            case ISNUMERIC:
            case REGEX:
            case SUBSTR:
            case REPLACE:
            case EXISTS:
                {
                alt80=2;
                }
                break;
            case IRI_REF:
            case PNAME_NS:
            case PNAME_LN:
                {
                alt80=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 80, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(80);}

            switch (alt80) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:379:7: brackettedExpression
                    {
                    dbg.location(379,7);
                    pushFollow(FOLLOW_brackettedExpression_in_constraint2976);
                    brackettedExpression249=brackettedExpression();

                    state._fsp--;

                    stream_brackettedExpression.add(brackettedExpression249.getTree());


                    // AST REWRITE
                    // elements: brackettedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 379:28: -> ^( EXPRESSION brackettedExpression )
                    {
                        dbg.location(379,31);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:379:31: ^( EXPRESSION brackettedExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(379,33);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPRESSION, "EXPRESSION"), root_1);

                        dbg.location(379,44);
                        adaptor.addChild(root_1, stream_brackettedExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:380:7: builtInCall
                    {
                    dbg.location(380,7);
                    pushFollow(FOLLOW_builtInCall_in_constraint2993);
                    builtInCall250=builtInCall();

                    state._fsp--;

                    stream_builtInCall.add(builtInCall250.getTree());


                    // AST REWRITE
                    // elements: builtInCall
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 380:19: -> ^( CALL builtInCall )
                    {
                        dbg.location(380,22);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:380:22: ^( CALL builtInCall )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(380,24);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CALL, "CALL"), root_1);

                        dbg.location(380,29);
                        adaptor.addChild(root_1, stream_builtInCall.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:381:7: functionCall
                    {
                    dbg.location(381,7);
                    pushFollow(FOLLOW_functionCall_in_constraint3009);
                    functionCall251=functionCall();

                    state._fsp--;

                    stream_functionCall.add(functionCall251.getTree());


                    // AST REWRITE
                    // elements: functionCall
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 381:20: -> ^( FUNCTION functionCall )
                    {
                        dbg.location(381,23);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:381:23: ^( FUNCTION functionCall )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(381,25);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION, "FUNCTION"), root_1);

                        dbg.location(381,34);
                        adaptor.addChild(root_1, stream_functionCall.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(382, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "constraint");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "constraint"

    public static class functionCall_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "functionCall"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:384:1: functionCall : iriRef argList -> ^( FUNCTION iriRef ^( ARG_LIST argList ) ) ;
    public final SparqlParser.functionCall_return functionCall() throws RecognitionException {
        SparqlParser.functionCall_return retval = new SparqlParser.functionCall_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        SparqlParser.iriRef_return iriRef252 = null;

        SparqlParser.argList_return argList253 = null;


        RewriteRuleSubtreeStream stream_argList=new RewriteRuleSubtreeStream(adaptor,"rule argList");
        RewriteRuleSubtreeStream stream_iriRef=new RewriteRuleSubtreeStream(adaptor,"rule iriRef");
        try { dbg.enterRule(getGrammarFileName(), "functionCall");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(384, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:385:5: ( iriRef argList -> ^( FUNCTION iriRef ^( ARG_LIST argList ) ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:385:7: iriRef argList
            {
            dbg.location(385,7);
            pushFollow(FOLLOW_iriRef_in_functionCall3035);
            iriRef252=iriRef();

            state._fsp--;

            stream_iriRef.add(iriRef252.getTree());
            dbg.location(385,14);
            pushFollow(FOLLOW_argList_in_functionCall3037);
            argList253=argList();

            state._fsp--;

            stream_argList.add(argList253.getTree());


            // AST REWRITE
            // elements: iriRef, argList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 385:22: -> ^( FUNCTION iriRef ^( ARG_LIST argList ) )
            {
                dbg.location(385,25);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:385:25: ^( FUNCTION iriRef ^( ARG_LIST argList ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(385,27);
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION, "FUNCTION"), root_1);

                dbg.location(385,36);
                adaptor.addChild(root_1, stream_iriRef.nextTree());
                dbg.location(385,43);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:385:43: ^( ARG_LIST argList )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                dbg.location(385,45);
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARG_LIST, "ARG_LIST"), root_2);

                dbg.location(385,54);
                adaptor.addChild(root_2, stream_argList.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(386, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "functionCall");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "functionCall"

    public static class argList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "argList"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:388:1: argList : ( nil -> nil | OPEN_BRACE ( DISTINCT )? expression ( COMMA expression )* CLOSE_BRACE -> ( DISTINCT )? ( expression )* );
    public final SparqlParser.argList_return argList() throws RecognitionException {
        SparqlParser.argList_return retval = new SparqlParser.argList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token OPEN_BRACE255=null;
        Token DISTINCT256=null;
        Token COMMA258=null;
        Token CLOSE_BRACE260=null;
        SparqlParser.nil_return nil254 = null;

        SparqlParser.expression_return expression257 = null;

        SparqlParser.expression_return expression259 = null;


        CommonTree OPEN_BRACE255_tree=null;
        CommonTree DISTINCT256_tree=null;
        CommonTree COMMA258_tree=null;
        CommonTree CLOSE_BRACE260_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_nil=new RewriteRuleSubtreeStream(adaptor,"rule nil");
        try { dbg.enterRule(getGrammarFileName(), "argList");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(388, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:389:5: ( nil -> nil | OPEN_BRACE ( DISTINCT )? expression ( COMMA expression )* CLOSE_BRACE -> ( DISTINCT )? ( expression )* )
            int alt83=2;
            try { dbg.enterDecision(83);

            int LA83_0 = input.LA(1);

            if ( (LA83_0==OPEN_BRACE) ) {
                int LA83_1 = input.LA(2);

                if ( (LA83_1==CLOSE_BRACE) ) {
                    alt83=1;
                }
                else if ( (LA83_1==IRI_REF||LA83_1==PNAME_NS||LA83_1==DISTINCT||LA83_1==OPEN_BRACE||LA83_1==INTEGER||(LA83_1>=PLUS && LA83_1<=NEGATION)||(LA83_1>=VAR1 && LA83_1<=VAR2)||(LA83_1>=NOT && LA83_1<=GROUP_CONCAT)||(LA83_1>=DECIMAL && LA83_1<=PNAME_LN)) ) {
                    alt83=2;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 83, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 83, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(83);}

            switch (alt83) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:389:7: nil
                    {
                    dbg.location(389,7);
                    pushFollow(FOLLOW_nil_in_argList3068);
                    nil254=nil();

                    state._fsp--;

                    stream_nil.add(nil254.getTree());


                    // AST REWRITE
                    // elements: nil
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 389:11: -> nil
                    {
                        dbg.location(389,14);
                        adaptor.addChild(root_0, stream_nil.nextTree());

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:390:7: OPEN_BRACE ( DISTINCT )? expression ( COMMA expression )* CLOSE_BRACE
                    {
                    dbg.location(390,7);
                    OPEN_BRACE255=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_argList3080);  
                    stream_OPEN_BRACE.add(OPEN_BRACE255);

                    dbg.location(390,18);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:390:18: ( DISTINCT )?
                    int alt81=2;
                    try { dbg.enterSubRule(81);
                    try { dbg.enterDecision(81);

                    int LA81_0 = input.LA(1);

                    if ( (LA81_0==DISTINCT) ) {
                        alt81=1;
                    }
                    } finally {dbg.exitDecision(81);}

                    switch (alt81) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:390:18: DISTINCT
                            {
                            dbg.location(390,18);
                            DISTINCT256=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_argList3082);  
                            stream_DISTINCT.add(DISTINCT256);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(81);}

                    dbg.location(390,28);
                    pushFollow(FOLLOW_expression_in_argList3085);
                    expression257=expression();

                    state._fsp--;

                    stream_expression.add(expression257.getTree());
                    dbg.location(390,39);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:390:39: ( COMMA expression )*
                    try { dbg.enterSubRule(82);

                    loop82:
                    do {
                        int alt82=2;
                        try { dbg.enterDecision(82);

                        int LA82_0 = input.LA(1);

                        if ( (LA82_0==COMMA) ) {
                            alt82=1;
                        }


                        } finally {dbg.exitDecision(82);}

                        switch (alt82) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:390:40: COMMA expression
                    	    {
                    	    dbg.location(390,40);
                    	    COMMA258=(Token)match(input,COMMA,FOLLOW_COMMA_in_argList3088);  
                    	    stream_COMMA.add(COMMA258);

                    	    dbg.location(390,46);
                    	    pushFollow(FOLLOW_expression_in_argList3090);
                    	    expression259=expression();

                    	    state._fsp--;

                    	    stream_expression.add(expression259.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop82;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(82);}

                    dbg.location(390,59);
                    CLOSE_BRACE260=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_argList3094);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE260);



                    // AST REWRITE
                    // elements: DISTINCT, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 390:71: -> ( DISTINCT )? ( expression )*
                    {
                        dbg.location(390,74);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:390:74: ( DISTINCT )?
                        if ( stream_DISTINCT.hasNext() ) {
                            dbg.location(390,74);
                            adaptor.addChild(root_0, stream_DISTINCT.nextNode());

                        }
                        stream_DISTINCT.reset();
                        dbg.location(390,84);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:390:84: ( expression )*
                        while ( stream_expression.hasNext() ) {
                            dbg.location(390,84);
                            adaptor.addChild(root_0, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                    }

                    retval.tree = root_0;
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(391, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "argList");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "argList"

    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:393:1: expressionList : ( nil | OPEN_BRACE expression ( COMMA expression )* CLOSE_BRACE ) -> ^( EXPRESSION_LIST ( nil )* ( expression )* ) ;
    public final SparqlParser.expressionList_return expressionList() throws RecognitionException {
        SparqlParser.expressionList_return retval = new SparqlParser.expressionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token OPEN_BRACE262=null;
        Token COMMA264=null;
        Token CLOSE_BRACE266=null;
        SparqlParser.nil_return nil261 = null;

        SparqlParser.expression_return expression263 = null;

        SparqlParser.expression_return expression265 = null;


        CommonTree OPEN_BRACE262_tree=null;
        CommonTree COMMA264_tree=null;
        CommonTree CLOSE_BRACE266_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_nil=new RewriteRuleSubtreeStream(adaptor,"rule nil");
        try { dbg.enterRule(getGrammarFileName(), "expressionList");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(393, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:394:5: ( ( nil | OPEN_BRACE expression ( COMMA expression )* CLOSE_BRACE ) -> ^( EXPRESSION_LIST ( nil )* ( expression )* ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:394:7: ( nil | OPEN_BRACE expression ( COMMA expression )* CLOSE_BRACE )
            {
            dbg.location(394,7);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:394:7: ( nil | OPEN_BRACE expression ( COMMA expression )* CLOSE_BRACE )
            int alt85=2;
            try { dbg.enterSubRule(85);
            try { dbg.enterDecision(85);

            int LA85_0 = input.LA(1);

            if ( (LA85_0==OPEN_BRACE) ) {
                int LA85_1 = input.LA(2);

                if ( (LA85_1==CLOSE_BRACE) ) {
                    alt85=1;
                }
                else if ( (LA85_1==IRI_REF||LA85_1==PNAME_NS||LA85_1==OPEN_BRACE||LA85_1==INTEGER||(LA85_1>=PLUS && LA85_1<=NEGATION)||(LA85_1>=VAR1 && LA85_1<=VAR2)||(LA85_1>=NOT && LA85_1<=GROUP_CONCAT)||(LA85_1>=DECIMAL && LA85_1<=PNAME_LN)) ) {
                    alt85=2;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 85, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(85);}

            switch (alt85) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:394:8: nil
                    {
                    dbg.location(394,8);
                    pushFollow(FOLLOW_nil_in_expressionList3120);
                    nil261=nil();

                    state._fsp--;

                    stream_nil.add(nil261.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:394:14: OPEN_BRACE expression ( COMMA expression )* CLOSE_BRACE
                    {
                    dbg.location(394,14);
                    OPEN_BRACE262=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_expressionList3124);  
                    stream_OPEN_BRACE.add(OPEN_BRACE262);

                    dbg.location(394,25);
                    pushFollow(FOLLOW_expression_in_expressionList3126);
                    expression263=expression();

                    state._fsp--;

                    stream_expression.add(expression263.getTree());
                    dbg.location(394,36);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:394:36: ( COMMA expression )*
                    try { dbg.enterSubRule(84);

                    loop84:
                    do {
                        int alt84=2;
                        try { dbg.enterDecision(84);

                        int LA84_0 = input.LA(1);

                        if ( (LA84_0==COMMA) ) {
                            alt84=1;
                        }


                        } finally {dbg.exitDecision(84);}

                        switch (alt84) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:394:37: COMMA expression
                    	    {
                    	    dbg.location(394,37);
                    	    COMMA264=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList3129);  
                    	    stream_COMMA.add(COMMA264);

                    	    dbg.location(394,43);
                    	    pushFollow(FOLLOW_expression_in_expressionList3131);
                    	    expression265=expression();

                    	    state._fsp--;

                    	    stream_expression.add(expression265.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop84;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(84);}

                    dbg.location(394,56);
                    CLOSE_BRACE266=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_expressionList3135);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE266);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(85);}



            // AST REWRITE
            // elements: nil, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 394:69: -> ^( EXPRESSION_LIST ( nil )* ( expression )* )
            {
                dbg.location(394,72);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:394:72: ^( EXPRESSION_LIST ( nil )* ( expression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(394,74);
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPRESSION_LIST, "EXPRESSION_LIST"), root_1);

                dbg.location(394,90);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:394:90: ( nil )*
                while ( stream_nil.hasNext() ) {
                    dbg.location(394,90);
                    adaptor.addChild(root_1, stream_nil.nextTree());

                }
                stream_nil.reset();
                dbg.location(394,95);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:394:95: ( expression )*
                while ( stream_expression.hasNext() ) {
                    dbg.location(394,95);
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(395, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "expressionList");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "expressionList"

    public static class constructTemplate_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructTemplate"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:397:1: constructTemplate : OPEN_CURLY_BRACE ( constructTriples )? CLOSE_CURLY_BRACE -> ^( CONSTRUCT_TRIPLES ( constructTriples )? ) ;
    public final SparqlParser.constructTemplate_return constructTemplate() throws RecognitionException {
        SparqlParser.constructTemplate_return retval = new SparqlParser.constructTemplate_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token OPEN_CURLY_BRACE267=null;
        Token CLOSE_CURLY_BRACE269=null;
        SparqlParser.constructTriples_return constructTriples268 = null;


        CommonTree OPEN_CURLY_BRACE267_tree=null;
        CommonTree CLOSE_CURLY_BRACE269_tree=null;
        RewriteRuleTokenStream stream_OPEN_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_CURLY_BRACE");
        RewriteRuleTokenStream stream_CLOSE_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_CURLY_BRACE");
        RewriteRuleSubtreeStream stream_constructTriples=new RewriteRuleSubtreeStream(adaptor,"rule constructTriples");
        try { dbg.enterRule(getGrammarFileName(), "constructTemplate");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(397, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:398:5: ( OPEN_CURLY_BRACE ( constructTriples )? CLOSE_CURLY_BRACE -> ^( CONSTRUCT_TRIPLES ( constructTriples )? ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:398:7: OPEN_CURLY_BRACE ( constructTriples )? CLOSE_CURLY_BRACE
            {
            dbg.location(398,7);
            OPEN_CURLY_BRACE267=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_constructTemplate3166);  
            stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE267);

            dbg.location(398,24);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:398:24: ( constructTriples )?
            int alt86=2;
            try { dbg.enterSubRule(86);
            try { dbg.enterDecision(86);

            int LA86_0 = input.LA(1);

            if ( (LA86_0==IRI_REF||LA86_0==PNAME_NS||LA86_0==OPEN_BRACE||LA86_0==INTEGER||LA86_0==OPEN_SQUARE_BRACKET||(LA86_0>=VAR1 && LA86_0<=VAR2)||(LA86_0>=DECIMAL && LA86_0<=BLANK_NODE_LABEL)) ) {
                alt86=1;
            }
            } finally {dbg.exitDecision(86);}

            switch (alt86) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:398:24: constructTriples
                    {
                    dbg.location(398,24);
                    pushFollow(FOLLOW_constructTriples_in_constructTemplate3168);
                    constructTriples268=constructTriples();

                    state._fsp--;

                    stream_constructTriples.add(constructTriples268.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(86);}

            dbg.location(398,42);
            CLOSE_CURLY_BRACE269=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_constructTemplate3171);  
            stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE269);



            // AST REWRITE
            // elements: constructTriples
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 398:60: -> ^( CONSTRUCT_TRIPLES ( constructTriples )? )
            {
                dbg.location(398,63);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:398:63: ^( CONSTRUCT_TRIPLES ( constructTriples )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(398,65);
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONSTRUCT_TRIPLES, "CONSTRUCT_TRIPLES"), root_1);

                dbg.location(398,83);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:398:83: ( constructTriples )?
                if ( stream_constructTriples.hasNext() ) {
                    dbg.location(398,83);
                    adaptor.addChild(root_1, stream_constructTriples.nextTree());

                }
                stream_constructTriples.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(399, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "constructTemplate");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "constructTemplate"

    public static class constructTriples_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructTriples"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:401:1: constructTriples : triplesSameSubject ( DOT triplesSameSubject )* ( DOT )? -> ( triplesSameSubject )+ ;
    public final SparqlParser.constructTriples_return constructTriples() throws RecognitionException {
        SparqlParser.constructTriples_return retval = new SparqlParser.constructTriples_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT271=null;
        Token DOT273=null;
        SparqlParser.triplesSameSubject_return triplesSameSubject270 = null;

        SparqlParser.triplesSameSubject_return triplesSameSubject272 = null;


        CommonTree DOT271_tree=null;
        CommonTree DOT273_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_triplesSameSubject=new RewriteRuleSubtreeStream(adaptor,"rule triplesSameSubject");
        try { dbg.enterRule(getGrammarFileName(), "constructTriples");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(401, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:402:5: ( triplesSameSubject ( DOT triplesSameSubject )* ( DOT )? -> ( triplesSameSubject )+ )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:402:7: triplesSameSubject ( DOT triplesSameSubject )* ( DOT )?
            {
            dbg.location(402,7);
            pushFollow(FOLLOW_triplesSameSubject_in_constructTriples3197);
            triplesSameSubject270=triplesSameSubject();

            state._fsp--;

            stream_triplesSameSubject.add(triplesSameSubject270.getTree());
            dbg.location(402,26);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:402:26: ( DOT triplesSameSubject )*
            try { dbg.enterSubRule(87);

            loop87:
            do {
                int alt87=2;
                try { dbg.enterDecision(87);

                int LA87_0 = input.LA(1);

                if ( (LA87_0==DOT) ) {
                    int LA87_1 = input.LA(2);

                    if ( (LA87_1==IRI_REF||LA87_1==PNAME_NS||LA87_1==OPEN_BRACE||LA87_1==INTEGER||LA87_1==OPEN_SQUARE_BRACKET||(LA87_1>=VAR1 && LA87_1<=VAR2)||(LA87_1>=DECIMAL && LA87_1<=BLANK_NODE_LABEL)) ) {
                        alt87=1;
                    }


                }


                } finally {dbg.exitDecision(87);}

                switch (alt87) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:402:27: DOT triplesSameSubject
            	    {
            	    dbg.location(402,27);
            	    DOT271=(Token)match(input,DOT,FOLLOW_DOT_in_constructTriples3200);  
            	    stream_DOT.add(DOT271);

            	    dbg.location(402,31);
            	    pushFollow(FOLLOW_triplesSameSubject_in_constructTriples3202);
            	    triplesSameSubject272=triplesSameSubject();

            	    state._fsp--;

            	    stream_triplesSameSubject.add(triplesSameSubject272.getTree());

            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);
            } finally {dbg.exitSubRule(87);}

            dbg.location(402,52);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:402:52: ( DOT )?
            int alt88=2;
            try { dbg.enterSubRule(88);
            try { dbg.enterDecision(88);

            int LA88_0 = input.LA(1);

            if ( (LA88_0==DOT) ) {
                alt88=1;
            }
            } finally {dbg.exitDecision(88);}

            switch (alt88) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:402:52: DOT
                    {
                    dbg.location(402,52);
                    DOT273=(Token)match(input,DOT,FOLLOW_DOT_in_constructTriples3206);  
                    stream_DOT.add(DOT273);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(88);}



            // AST REWRITE
            // elements: triplesSameSubject
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 402:57: -> ( triplesSameSubject )+
            {
                dbg.location(402,60);
                if ( !(stream_triplesSameSubject.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_triplesSameSubject.hasNext() ) {
                    dbg.location(402,60);
                    adaptor.addChild(root_0, stream_triplesSameSubject.nextTree());

                }
                stream_triplesSameSubject.reset();

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(403, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "constructTriples");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "constructTriples"

    public static class triplesSameSubject_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "triplesSameSubject"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:405:1: triplesSameSubject : ( varOrTerm ( propertyListNotEmpty )? -> ^( TRIPLES_SAME_SUBJECT ^( SUBJECT varOrTerm ) ^( PROPERTY_LIST ( propertyListNotEmpty )? ) ) | triplesNode ( propertyListNotEmpty )? -> ^( TRIPLES_SAME_SUBJECT triplesNode ^( PROPERTY_LIST ( propertyListNotEmpty )? ) ) );
    public final SparqlParser.triplesSameSubject_return triplesSameSubject() throws RecognitionException {
        SparqlParser.triplesSameSubject_return retval = new SparqlParser.triplesSameSubject_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        SparqlParser.varOrTerm_return varOrTerm274 = null;

        SparqlParser.propertyListNotEmpty_return propertyListNotEmpty275 = null;

        SparqlParser.triplesNode_return triplesNode276 = null;

        SparqlParser.propertyListNotEmpty_return propertyListNotEmpty277 = null;


        RewriteRuleSubtreeStream stream_varOrTerm=new RewriteRuleSubtreeStream(adaptor,"rule varOrTerm");
        RewriteRuleSubtreeStream stream_propertyListNotEmpty=new RewriteRuleSubtreeStream(adaptor,"rule propertyListNotEmpty");
        RewriteRuleSubtreeStream stream_triplesNode=new RewriteRuleSubtreeStream(adaptor,"rule triplesNode");
        try { dbg.enterRule(getGrammarFileName(), "triplesSameSubject");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(405, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:406:5: ( varOrTerm ( propertyListNotEmpty )? -> ^( TRIPLES_SAME_SUBJECT ^( SUBJECT varOrTerm ) ^( PROPERTY_LIST ( propertyListNotEmpty )? ) ) | triplesNode ( propertyListNotEmpty )? -> ^( TRIPLES_SAME_SUBJECT triplesNode ^( PROPERTY_LIST ( propertyListNotEmpty )? ) ) )
            int alt91=2;
            try { dbg.enterDecision(91);

            switch ( input.LA(1) ) {
            case IRI_REF:
            case PNAME_NS:
            case INTEGER:
            case VAR1:
            case VAR2:
            case DECIMAL:
            case DOUBLE:
            case INTEGER_POSITIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE_POSITIVE:
            case INTEGER_NEGATIVE:
            case DECIMAL_NEGATIVE:
            case DOUBLE_NEGATIVE:
            case TRUE:
            case FALSE:
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
            case PNAME_LN:
            case BLANK_NODE_LABEL:
                {
                alt91=1;
                }
                break;
            case OPEN_SQUARE_BRACKET:
                {
                int LA91_2 = input.LA(2);

                if ( (LA91_2==CLOSE_SQUARE_BRACKET) ) {
                    alt91=1;
                }
                else if ( (LA91_2==IRI_REF||LA91_2==PNAME_NS||LA91_2==OPEN_BRACE||LA91_2==A||LA91_2==INVERSE||LA91_2==NEGATION||(LA91_2>=VAR1 && LA91_2<=VAR2)||LA91_2==PNAME_LN) ) {
                    alt91=2;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 91, 2, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                }
                break;
            case OPEN_BRACE:
                {
                int LA91_3 = input.LA(2);

                if ( (LA91_3==CLOSE_BRACE) ) {
                    alt91=1;
                }
                else if ( (LA91_3==IRI_REF||LA91_3==PNAME_NS||LA91_3==OPEN_BRACE||LA91_3==INTEGER||LA91_3==OPEN_SQUARE_BRACKET||(LA91_3>=VAR1 && LA91_3<=VAR2)||(LA91_3>=DECIMAL && LA91_3<=BLANK_NODE_LABEL)) ) {
                    alt91=2;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 91, 3, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(91);}

            switch (alt91) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:406:7: varOrTerm ( propertyListNotEmpty )?
                    {
                    dbg.location(406,7);
                    pushFollow(FOLLOW_varOrTerm_in_triplesSameSubject3229);
                    varOrTerm274=varOrTerm();

                    state._fsp--;

                    stream_varOrTerm.add(varOrTerm274.getTree());
                    dbg.location(406,17);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:406:17: ( propertyListNotEmpty )?
                    int alt89=2;
                    try { dbg.enterSubRule(89);
                    try { dbg.enterDecision(89);

                    int LA89_0 = input.LA(1);

                    if ( (LA89_0==IRI_REF||LA89_0==PNAME_NS||LA89_0==OPEN_BRACE||LA89_0==A||LA89_0==INVERSE||LA89_0==NEGATION||(LA89_0>=VAR1 && LA89_0<=VAR2)||LA89_0==PNAME_LN) ) {
                        alt89=1;
                    }
                    } finally {dbg.exitDecision(89);}

                    switch (alt89) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:406:17: propertyListNotEmpty
                            {
                            dbg.location(406,17);
                            pushFollow(FOLLOW_propertyListNotEmpty_in_triplesSameSubject3231);
                            propertyListNotEmpty275=propertyListNotEmpty();

                            state._fsp--;

                            stream_propertyListNotEmpty.add(propertyListNotEmpty275.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(89);}



                    // AST REWRITE
                    // elements: propertyListNotEmpty, varOrTerm
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 406:39: -> ^( TRIPLES_SAME_SUBJECT ^( SUBJECT varOrTerm ) ^( PROPERTY_LIST ( propertyListNotEmpty )? ) )
                    {
                        dbg.location(406,42);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:406:42: ^( TRIPLES_SAME_SUBJECT ^( SUBJECT varOrTerm ) ^( PROPERTY_LIST ( propertyListNotEmpty )? ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(406,44);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TRIPLES_SAME_SUBJECT, "TRIPLES_SAME_SUBJECT"), root_1);

                        dbg.location(406,65);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:406:65: ^( SUBJECT varOrTerm )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        dbg.location(406,67);
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBJECT, "SUBJECT"), root_2);

                        dbg.location(406,75);
                        adaptor.addChild(root_2, stream_varOrTerm.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        dbg.location(406,86);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:406:86: ^( PROPERTY_LIST ( propertyListNotEmpty )? )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        dbg.location(406,88);
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_LIST, "PROPERTY_LIST"), root_2);

                        dbg.location(406,103);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:406:103: ( propertyListNotEmpty )?
                        if ( stream_propertyListNotEmpty.hasNext() ) {
                            dbg.location(406,103);
                            adaptor.addChild(root_2, stream_propertyListNotEmpty.nextTree());

                        }
                        stream_propertyListNotEmpty.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:407:7: triplesNode ( propertyListNotEmpty )?
                    {
                    dbg.location(407,7);
                    pushFollow(FOLLOW_triplesNode_in_triplesSameSubject3260);
                    triplesNode276=triplesNode();

                    state._fsp--;

                    stream_triplesNode.add(triplesNode276.getTree());
                    dbg.location(407,19);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:407:19: ( propertyListNotEmpty )?
                    int alt90=2;
                    try { dbg.enterSubRule(90);
                    try { dbg.enterDecision(90);

                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==IRI_REF||LA90_0==PNAME_NS||LA90_0==OPEN_BRACE||LA90_0==A||LA90_0==INVERSE||LA90_0==NEGATION||(LA90_0>=VAR1 && LA90_0<=VAR2)||LA90_0==PNAME_LN) ) {
                        alt90=1;
                    }
                    } finally {dbg.exitDecision(90);}

                    switch (alt90) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:407:19: propertyListNotEmpty
                            {
                            dbg.location(407,19);
                            pushFollow(FOLLOW_propertyListNotEmpty_in_triplesSameSubject3262);
                            propertyListNotEmpty277=propertyListNotEmpty();

                            state._fsp--;

                            stream_propertyListNotEmpty.add(propertyListNotEmpty277.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(90);}



                    // AST REWRITE
                    // elements: propertyListNotEmpty, triplesNode
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 407:41: -> ^( TRIPLES_SAME_SUBJECT triplesNode ^( PROPERTY_LIST ( propertyListNotEmpty )? ) )
                    {
                        dbg.location(407,44);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:407:44: ^( TRIPLES_SAME_SUBJECT triplesNode ^( PROPERTY_LIST ( propertyListNotEmpty )? ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(407,46);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TRIPLES_SAME_SUBJECT, "TRIPLES_SAME_SUBJECT"), root_1);

                        dbg.location(407,67);
                        adaptor.addChild(root_1, stream_triplesNode.nextTree());
                        dbg.location(407,79);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:407:79: ^( PROPERTY_LIST ( propertyListNotEmpty )? )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        dbg.location(407,81);
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_LIST, "PROPERTY_LIST"), root_2);

                        dbg.location(407,95);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:407:95: ( propertyListNotEmpty )?
                        if ( stream_propertyListNotEmpty.hasNext() ) {
                            dbg.location(407,95);
                            adaptor.addChild(root_2, stream_propertyListNotEmpty.nextTree());

                        }
                        stream_propertyListNotEmpty.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(408, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "triplesSameSubject");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "triplesSameSubject"

    public static class propertyListNotEmpty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyListNotEmpty"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:410:1: propertyListNotEmpty : propertyListNotEmptyDetails ( SEMICOLON ( propertyListNotEmptyDetails )? )* -> ( propertyListNotEmptyDetails )+ ;
    public final SparqlParser.propertyListNotEmpty_return propertyListNotEmpty() throws RecognitionException {
        SparqlParser.propertyListNotEmpty_return retval = new SparqlParser.propertyListNotEmpty_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SEMICOLON279=null;
        SparqlParser.propertyListNotEmptyDetails_return propertyListNotEmptyDetails278 = null;

        SparqlParser.propertyListNotEmptyDetails_return propertyListNotEmptyDetails280 = null;


        CommonTree SEMICOLON279_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_propertyListNotEmptyDetails=new RewriteRuleSubtreeStream(adaptor,"rule propertyListNotEmptyDetails");
        try { dbg.enterRule(getGrammarFileName(), "propertyListNotEmpty");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(410, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:411:5: ( propertyListNotEmptyDetails ( SEMICOLON ( propertyListNotEmptyDetails )? )* -> ( propertyListNotEmptyDetails )+ )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:411:7: propertyListNotEmptyDetails ( SEMICOLON ( propertyListNotEmptyDetails )? )*
            {
            dbg.location(411,7);
            pushFollow(FOLLOW_propertyListNotEmptyDetails_in_propertyListNotEmpty3296);
            propertyListNotEmptyDetails278=propertyListNotEmptyDetails();

            state._fsp--;

            stream_propertyListNotEmptyDetails.add(propertyListNotEmptyDetails278.getTree());
            dbg.location(411,35);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:411:35: ( SEMICOLON ( propertyListNotEmptyDetails )? )*
            try { dbg.enterSubRule(93);

            loop93:
            do {
                int alt93=2;
                try { dbg.enterDecision(93);

                int LA93_0 = input.LA(1);

                if ( (LA93_0==SEMICOLON) ) {
                    alt93=1;
                }


                } finally {dbg.exitDecision(93);}

                switch (alt93) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:411:36: SEMICOLON ( propertyListNotEmptyDetails )?
            	    {
            	    dbg.location(411,36);
            	    SEMICOLON279=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_propertyListNotEmpty3299);  
            	    stream_SEMICOLON.add(SEMICOLON279);

            	    dbg.location(411,46);
            	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:411:46: ( propertyListNotEmptyDetails )?
            	    int alt92=2;
            	    try { dbg.enterSubRule(92);
            	    try { dbg.enterDecision(92);

            	    int LA92_0 = input.LA(1);

            	    if ( (LA92_0==IRI_REF||LA92_0==PNAME_NS||LA92_0==OPEN_BRACE||LA92_0==A||LA92_0==INVERSE||LA92_0==NEGATION||(LA92_0>=VAR1 && LA92_0<=VAR2)||LA92_0==PNAME_LN) ) {
            	        alt92=1;
            	    }
            	    } finally {dbg.exitDecision(92);}

            	    switch (alt92) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:411:46: propertyListNotEmptyDetails
            	            {
            	            dbg.location(411,46);
            	            pushFollow(FOLLOW_propertyListNotEmptyDetails_in_propertyListNotEmpty3301);
            	            propertyListNotEmptyDetails280=propertyListNotEmptyDetails();

            	            state._fsp--;

            	            stream_propertyListNotEmptyDetails.add(propertyListNotEmptyDetails280.getTree());

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(92);}


            	    }
            	    break;

            	default :
            	    break loop93;
                }
            } while (true);
            } finally {dbg.exitSubRule(93);}



            // AST REWRITE
            // elements: propertyListNotEmptyDetails
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 411:77: -> ( propertyListNotEmptyDetails )+
            {
                dbg.location(411,80);
                if ( !(stream_propertyListNotEmptyDetails.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_propertyListNotEmptyDetails.hasNext() ) {
                    dbg.location(411,80);
                    adaptor.addChild(root_0, stream_propertyListNotEmptyDetails.nextTree());

                }
                stream_propertyListNotEmptyDetails.reset();

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(412, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "propertyListNotEmpty");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "propertyListNotEmpty"

    public static class objectList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "objectList"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:414:1: objectList : graphNode ( COMMA graphNode )* -> ( ^( OBJECT graphNode ) )+ ;
    public final SparqlParser.objectList_return objectList() throws RecognitionException {
        SparqlParser.objectList_return retval = new SparqlParser.objectList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA282=null;
        SparqlParser.graphNode_return graphNode281 = null;

        SparqlParser.graphNode_return graphNode283 = null;


        CommonTree COMMA282_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_graphNode=new RewriteRuleSubtreeStream(adaptor,"rule graphNode");
        try { dbg.enterRule(getGrammarFileName(), "objectList");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(414, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:415:5: ( graphNode ( COMMA graphNode )* -> ( ^( OBJECT graphNode ) )+ )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:415:7: graphNode ( COMMA graphNode )*
            {
            dbg.location(415,7);
            pushFollow(FOLLOW_graphNode_in_objectList3327);
            graphNode281=graphNode();

            state._fsp--;

            stream_graphNode.add(graphNode281.getTree());
            dbg.location(415,17);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:415:17: ( COMMA graphNode )*
            try { dbg.enterSubRule(94);

            loop94:
            do {
                int alt94=2;
                try { dbg.enterDecision(94);

                int LA94_0 = input.LA(1);

                if ( (LA94_0==COMMA) ) {
                    alt94=1;
                }


                } finally {dbg.exitDecision(94);}

                switch (alt94) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:415:18: COMMA graphNode
            	    {
            	    dbg.location(415,18);
            	    COMMA282=(Token)match(input,COMMA,FOLLOW_COMMA_in_objectList3330);  
            	    stream_COMMA.add(COMMA282);

            	    dbg.location(415,24);
            	    pushFollow(FOLLOW_graphNode_in_objectList3332);
            	    graphNode283=graphNode();

            	    state._fsp--;

            	    stream_graphNode.add(graphNode283.getTree());

            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);
            } finally {dbg.exitSubRule(94);}



            // AST REWRITE
            // elements: graphNode
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 415:36: -> ( ^( OBJECT graphNode ) )+
            {
                dbg.location(415,39);
                if ( !(stream_graphNode.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_graphNode.hasNext() ) {
                    dbg.location(415,39);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:415:39: ^( OBJECT graphNode )
                    {
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    dbg.location(415,41);
                    root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT, "OBJECT"), root_1);

                    dbg.location(415,48);
                    adaptor.addChild(root_1, stream_graphNode.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_graphNode.reset();

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(416, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "objectList");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "objectList"

    public static class verb_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verb"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:418:1: verb : ( varOrIRIref | A );
    public final SparqlParser.verb_return verb() throws RecognitionException {
        SparqlParser.verb_return retval = new SparqlParser.verb_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token A285=null;
        SparqlParser.varOrIRIref_return varOrIRIref284 = null;


        CommonTree A285_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "verb");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(418, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:419:5: ( varOrIRIref | A )
            int alt95=2;
            try { dbg.enterDecision(95);

            int LA95_0 = input.LA(1);

            if ( (LA95_0==IRI_REF||LA95_0==PNAME_NS||(LA95_0>=VAR1 && LA95_0<=VAR2)||LA95_0==PNAME_LN) ) {
                alt95=1;
            }
            else if ( (LA95_0==A) ) {
                alt95=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 95, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(95);}

            switch (alt95) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:419:7: varOrIRIref
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(419,7);
                    pushFollow(FOLLOW_varOrIRIref_in_verb3360);
                    varOrIRIref284=varOrIRIref();

                    state._fsp--;

                    adaptor.addChild(root_0, varOrIRIref284.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:420:7: A
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(420,7);
                    A285=(Token)match(input,A,FOLLOW_A_in_verb3368); 
                    A285_tree = (CommonTree)adaptor.create(A285);
                    adaptor.addChild(root_0, A285_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(421, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "verb");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "verb"

    public static class triplesSameSubjectPath_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "triplesSameSubjectPath"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:423:1: triplesSameSubjectPath : ( varOrTerm propertyListNotEmptyPath -> ^( TRIPLES_SAME_SUBJECT ^( SUBJECT varOrTerm ) propertyListNotEmptyPath ) | triplesNode ( propertyListNotEmpty )? -> ^( TRIPLES_SAME_SUBJECT triplesNode ( propertyListNotEmpty )? ) );
    public final SparqlParser.triplesSameSubjectPath_return triplesSameSubjectPath() throws RecognitionException {
        SparqlParser.triplesSameSubjectPath_return retval = new SparqlParser.triplesSameSubjectPath_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        SparqlParser.varOrTerm_return varOrTerm286 = null;

        SparqlParser.propertyListNotEmptyPath_return propertyListNotEmptyPath287 = null;

        SparqlParser.triplesNode_return triplesNode288 = null;

        SparqlParser.propertyListNotEmpty_return propertyListNotEmpty289 = null;


        RewriteRuleSubtreeStream stream_propertyListNotEmpty=new RewriteRuleSubtreeStream(adaptor,"rule propertyListNotEmpty");
        RewriteRuleSubtreeStream stream_varOrTerm=new RewriteRuleSubtreeStream(adaptor,"rule varOrTerm");
        RewriteRuleSubtreeStream stream_triplesNode=new RewriteRuleSubtreeStream(adaptor,"rule triplesNode");
        RewriteRuleSubtreeStream stream_propertyListNotEmptyPath=new RewriteRuleSubtreeStream(adaptor,"rule propertyListNotEmptyPath");
        try { dbg.enterRule(getGrammarFileName(), "triplesSameSubjectPath");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(423, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:424:5: ( varOrTerm propertyListNotEmptyPath -> ^( TRIPLES_SAME_SUBJECT ^( SUBJECT varOrTerm ) propertyListNotEmptyPath ) | triplesNode ( propertyListNotEmpty )? -> ^( TRIPLES_SAME_SUBJECT triplesNode ( propertyListNotEmpty )? ) )
            int alt97=2;
            try { dbg.enterDecision(97);

            switch ( input.LA(1) ) {
            case IRI_REF:
            case PNAME_NS:
            case INTEGER:
            case VAR1:
            case VAR2:
            case DECIMAL:
            case DOUBLE:
            case INTEGER_POSITIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE_POSITIVE:
            case INTEGER_NEGATIVE:
            case DECIMAL_NEGATIVE:
            case DOUBLE_NEGATIVE:
            case TRUE:
            case FALSE:
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
            case PNAME_LN:
            case BLANK_NODE_LABEL:
                {
                alt97=1;
                }
                break;
            case OPEN_SQUARE_BRACKET:
                {
                int LA97_2 = input.LA(2);

                if ( (LA97_2==CLOSE_SQUARE_BRACKET) ) {
                    alt97=1;
                }
                else if ( (LA97_2==IRI_REF||LA97_2==PNAME_NS||LA97_2==OPEN_BRACE||LA97_2==A||LA97_2==INVERSE||LA97_2==NEGATION||(LA97_2>=VAR1 && LA97_2<=VAR2)||LA97_2==PNAME_LN) ) {
                    alt97=2;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 2, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                }
                break;
            case OPEN_BRACE:
                {
                int LA97_3 = input.LA(2);

                if ( (LA97_3==CLOSE_BRACE) ) {
                    alt97=1;
                }
                else if ( (LA97_3==IRI_REF||LA97_3==PNAME_NS||LA97_3==OPEN_BRACE||LA97_3==INTEGER||LA97_3==OPEN_SQUARE_BRACKET||(LA97_3>=VAR1 && LA97_3<=VAR2)||(LA97_3>=DECIMAL && LA97_3<=BLANK_NODE_LABEL)) ) {
                    alt97=2;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 3, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(97);}

            switch (alt97) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:424:7: varOrTerm propertyListNotEmptyPath
                    {
                    dbg.location(424,7);
                    pushFollow(FOLLOW_varOrTerm_in_triplesSameSubjectPath3385);
                    varOrTerm286=varOrTerm();

                    state._fsp--;

                    stream_varOrTerm.add(varOrTerm286.getTree());
                    dbg.location(424,17);
                    pushFollow(FOLLOW_propertyListNotEmptyPath_in_triplesSameSubjectPath3387);
                    propertyListNotEmptyPath287=propertyListNotEmptyPath();

                    state._fsp--;

                    stream_propertyListNotEmptyPath.add(propertyListNotEmptyPath287.getTree());


                    // AST REWRITE
                    // elements: varOrTerm, propertyListNotEmptyPath
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 424:42: -> ^( TRIPLES_SAME_SUBJECT ^( SUBJECT varOrTerm ) propertyListNotEmptyPath )
                    {
                        dbg.location(424,45);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:424:45: ^( TRIPLES_SAME_SUBJECT ^( SUBJECT varOrTerm ) propertyListNotEmptyPath )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(424,47);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TRIPLES_SAME_SUBJECT, "TRIPLES_SAME_SUBJECT"), root_1);

                        dbg.location(424,68);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:424:68: ^( SUBJECT varOrTerm )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        dbg.location(424,70);
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBJECT, "SUBJECT"), root_2);

                        dbg.location(424,78);
                        adaptor.addChild(root_2, stream_varOrTerm.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        dbg.location(424,89);
                        adaptor.addChild(root_1, stream_propertyListNotEmptyPath.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:425:7: triplesNode ( propertyListNotEmpty )?
                    {
                    dbg.location(425,7);
                    pushFollow(FOLLOW_triplesNode_in_triplesSameSubjectPath3409);
                    triplesNode288=triplesNode();

                    state._fsp--;

                    stream_triplesNode.add(triplesNode288.getTree());
                    dbg.location(425,19);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:425:19: ( propertyListNotEmpty )?
                    int alt96=2;
                    try { dbg.enterSubRule(96);
                    try { dbg.enterDecision(96);

                    int LA96_0 = input.LA(1);

                    if ( (LA96_0==IRI_REF||LA96_0==PNAME_NS||LA96_0==OPEN_BRACE||LA96_0==A||LA96_0==INVERSE||LA96_0==NEGATION||(LA96_0>=VAR1 && LA96_0<=VAR2)||LA96_0==PNAME_LN) ) {
                        alt96=1;
                    }
                    } finally {dbg.exitDecision(96);}

                    switch (alt96) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:425:19: propertyListNotEmpty
                            {
                            dbg.location(425,19);
                            pushFollow(FOLLOW_propertyListNotEmpty_in_triplesSameSubjectPath3411);
                            propertyListNotEmpty289=propertyListNotEmpty();

                            state._fsp--;

                            stream_propertyListNotEmpty.add(propertyListNotEmpty289.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(96);}



                    // AST REWRITE
                    // elements: triplesNode, propertyListNotEmpty
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 425:41: -> ^( TRIPLES_SAME_SUBJECT triplesNode ( propertyListNotEmpty )? )
                    {
                        dbg.location(425,44);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:425:44: ^( TRIPLES_SAME_SUBJECT triplesNode ( propertyListNotEmpty )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(425,46);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TRIPLES_SAME_SUBJECT, "TRIPLES_SAME_SUBJECT"), root_1);

                        dbg.location(425,68);
                        adaptor.addChild(root_1, stream_triplesNode.nextTree());
                        dbg.location(425,80);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:425:80: ( propertyListNotEmpty )?
                        if ( stream_propertyListNotEmpty.hasNext() ) {
                            dbg.location(425,80);
                            adaptor.addChild(root_1, stream_propertyListNotEmpty.nextTree());

                        }
                        stream_propertyListNotEmpty.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(426, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "triplesSameSubjectPath");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "triplesSameSubjectPath"

    public static class propertyListNotEmptyPath_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyListNotEmptyPath"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:428:1: propertyListNotEmptyPath : propertyListNotEmptyDetails ( SEMICOLON ( propertyListNotEmptyDetails )? )* -> ( propertyListNotEmptyDetails )+ ;
    public final SparqlParser.propertyListNotEmptyPath_return propertyListNotEmptyPath() throws RecognitionException {
        SparqlParser.propertyListNotEmptyPath_return retval = new SparqlParser.propertyListNotEmptyPath_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SEMICOLON291=null;
        SparqlParser.propertyListNotEmptyDetails_return propertyListNotEmptyDetails290 = null;

        SparqlParser.propertyListNotEmptyDetails_return propertyListNotEmptyDetails292 = null;


        CommonTree SEMICOLON291_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_propertyListNotEmptyDetails=new RewriteRuleSubtreeStream(adaptor,"rule propertyListNotEmptyDetails");
        try { dbg.enterRule(getGrammarFileName(), "propertyListNotEmptyPath");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(428, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:429:5: ( propertyListNotEmptyDetails ( SEMICOLON ( propertyListNotEmptyDetails )? )* -> ( propertyListNotEmptyDetails )+ )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:429:7: propertyListNotEmptyDetails ( SEMICOLON ( propertyListNotEmptyDetails )? )*
            {
            dbg.location(429,7);
            pushFollow(FOLLOW_propertyListNotEmptyDetails_in_propertyListNotEmptyPath3443);
            propertyListNotEmptyDetails290=propertyListNotEmptyDetails();

            state._fsp--;

            stream_propertyListNotEmptyDetails.add(propertyListNotEmptyDetails290.getTree());
            dbg.location(429,35);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:429:35: ( SEMICOLON ( propertyListNotEmptyDetails )? )*
            try { dbg.enterSubRule(99);

            loop99:
            do {
                int alt99=2;
                try { dbg.enterDecision(99);

                int LA99_0 = input.LA(1);

                if ( (LA99_0==SEMICOLON) ) {
                    alt99=1;
                }


                } finally {dbg.exitDecision(99);}

                switch (alt99) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:429:36: SEMICOLON ( propertyListNotEmptyDetails )?
            	    {
            	    dbg.location(429,36);
            	    SEMICOLON291=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_propertyListNotEmptyPath3446);  
            	    stream_SEMICOLON.add(SEMICOLON291);

            	    dbg.location(429,46);
            	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:429:46: ( propertyListNotEmptyDetails )?
            	    int alt98=2;
            	    try { dbg.enterSubRule(98);
            	    try { dbg.enterDecision(98);

            	    int LA98_0 = input.LA(1);

            	    if ( (LA98_0==IRI_REF||LA98_0==PNAME_NS||LA98_0==OPEN_BRACE||LA98_0==A||LA98_0==INVERSE||LA98_0==NEGATION||(LA98_0>=VAR1 && LA98_0<=VAR2)||LA98_0==PNAME_LN) ) {
            	        alt98=1;
            	    }
            	    } finally {dbg.exitDecision(98);}

            	    switch (alt98) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:429:46: propertyListNotEmptyDetails
            	            {
            	            dbg.location(429,46);
            	            pushFollow(FOLLOW_propertyListNotEmptyDetails_in_propertyListNotEmptyPath3448);
            	            propertyListNotEmptyDetails292=propertyListNotEmptyDetails();

            	            state._fsp--;

            	            stream_propertyListNotEmptyDetails.add(propertyListNotEmptyDetails292.getTree());

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(98);}


            	    }
            	    break;

            	default :
            	    break loop99;
                }
            } while (true);
            } finally {dbg.exitSubRule(99);}



            // AST REWRITE
            // elements: propertyListNotEmptyDetails
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 429:77: -> ( propertyListNotEmptyDetails )+
            {
                dbg.location(429,80);
                if ( !(stream_propertyListNotEmptyDetails.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_propertyListNotEmptyDetails.hasNext() ) {
                    dbg.location(429,80);
                    adaptor.addChild(root_0, stream_propertyListNotEmptyDetails.nextTree());

                }
                stream_propertyListNotEmptyDetails.reset();

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(430, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "propertyListNotEmptyPath");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "propertyListNotEmptyPath"

    public static class propertyListNotEmptyDetails_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyListNotEmptyDetails"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:432:1: propertyListNotEmptyDetails : verbSimpleOrPath objectList -> ^( PREDICATE verbSimpleOrPath objectList ) ;
    public final SparqlParser.propertyListNotEmptyDetails_return propertyListNotEmptyDetails() throws RecognitionException {
        SparqlParser.propertyListNotEmptyDetails_return retval = new SparqlParser.propertyListNotEmptyDetails_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        SparqlParser.verbSimpleOrPath_return verbSimpleOrPath293 = null;

        SparqlParser.objectList_return objectList294 = null;


        RewriteRuleSubtreeStream stream_verbSimpleOrPath=new RewriteRuleSubtreeStream(adaptor,"rule verbSimpleOrPath");
        RewriteRuleSubtreeStream stream_objectList=new RewriteRuleSubtreeStream(adaptor,"rule objectList");
        try { dbg.enterRule(getGrammarFileName(), "propertyListNotEmptyDetails");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(432, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:433:5: ( verbSimpleOrPath objectList -> ^( PREDICATE verbSimpleOrPath objectList ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:433:7: verbSimpleOrPath objectList
            {
            dbg.location(433,7);
            pushFollow(FOLLOW_verbSimpleOrPath_in_propertyListNotEmptyDetails3475);
            verbSimpleOrPath293=verbSimpleOrPath();

            state._fsp--;

            stream_verbSimpleOrPath.add(verbSimpleOrPath293.getTree());
            dbg.location(433,24);
            pushFollow(FOLLOW_objectList_in_propertyListNotEmptyDetails3477);
            objectList294=objectList();

            state._fsp--;

            stream_objectList.add(objectList294.getTree());


            // AST REWRITE
            // elements: objectList, verbSimpleOrPath
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 433:35: -> ^( PREDICATE verbSimpleOrPath objectList )
            {
                dbg.location(433,38);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:433:38: ^( PREDICATE verbSimpleOrPath objectList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(433,40);
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PREDICATE, "PREDICATE"), root_1);

                dbg.location(433,51);
                adaptor.addChild(root_1, stream_verbSimpleOrPath.nextTree());
                dbg.location(433,68);
                adaptor.addChild(root_1, stream_objectList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(434, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "propertyListNotEmptyDetails");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "propertyListNotEmptyDetails"

    public static class verbSimpleOrPath_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbSimpleOrPath"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:436:1: verbSimpleOrPath : ( verbPath | verbSimple );
    public final SparqlParser.verbSimpleOrPath_return verbSimpleOrPath() throws RecognitionException {
        SparqlParser.verbSimpleOrPath_return retval = new SparqlParser.verbSimpleOrPath_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        SparqlParser.verbPath_return verbPath295 = null;

        SparqlParser.verbSimple_return verbSimple296 = null;



        try { dbg.enterRule(getGrammarFileName(), "verbSimpleOrPath");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(436, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:437:5: ( verbPath | verbSimple )
            int alt100=2;
            try { dbg.enterDecision(100);

            int LA100_0 = input.LA(1);

            if ( (LA100_0==IRI_REF||LA100_0==PNAME_NS||LA100_0==OPEN_BRACE||LA100_0==A||LA100_0==INVERSE||LA100_0==NEGATION||LA100_0==PNAME_LN) ) {
                alt100=1;
            }
            else if ( ((LA100_0>=VAR1 && LA100_0<=VAR2)) ) {
                alt100=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 100, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(100);}

            switch (alt100) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:437:7: verbPath
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(437,7);
                    pushFollow(FOLLOW_verbPath_in_verbSimpleOrPath3507);
                    verbPath295=verbPath();

                    state._fsp--;

                    adaptor.addChild(root_0, verbPath295.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:438:7: verbSimple
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(438,7);
                    pushFollow(FOLLOW_verbSimple_in_verbSimpleOrPath3515);
                    verbSimple296=verbSimple();

                    state._fsp--;

                    adaptor.addChild(root_0, verbSimple296.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(439, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "verbSimpleOrPath");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "verbSimpleOrPath"

    public static class verbPath_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbPath"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:441:1: verbPath : path ;
    public final SparqlParser.verbPath_return verbPath() throws RecognitionException {
        SparqlParser.verbPath_return retval = new SparqlParser.verbPath_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        SparqlParser.path_return path297 = null;



        try { dbg.enterRule(getGrammarFileName(), "verbPath");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(441, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:442:5: ( path )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:442:7: path
            {
            root_0 = (CommonTree)adaptor.nil();

            dbg.location(442,7);
            pushFollow(FOLLOW_path_in_verbPath3534);
            path297=path();

            state._fsp--;

            adaptor.addChild(root_0, path297.getTree());

            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(443, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "verbPath");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "verbPath"

    public static class verbSimple_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbSimple"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:445:1: verbSimple : var -> ^( VAR var ) ;
    public final SparqlParser.verbSimple_return verbSimple() throws RecognitionException {
        SparqlParser.verbSimple_return retval = new SparqlParser.verbSimple_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        SparqlParser.var_return var298 = null;


        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        try { dbg.enterRule(getGrammarFileName(), "verbSimple");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(445, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:446:5: ( var -> ^( VAR var ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:446:7: var
            {
            dbg.location(446,7);
            pushFollow(FOLLOW_var_in_verbSimple3555);
            var298=var();

            state._fsp--;

            stream_var.add(var298.getTree());


            // AST REWRITE
            // elements: var
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 446:11: -> ^( VAR var )
            {
                dbg.location(446,14);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:446:14: ^( VAR var )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(446,16);
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR, "VAR"), root_1);

                dbg.location(446,20);
                adaptor.addChild(root_1, stream_var.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(447, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "verbSimple");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "verbSimple"

    public static class path_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "path"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:449:1: path : pathSequence ( PIPE pathSequence )* -> ^( PATH ( pathSequence )+ ) ;
    public final SparqlParser.path_return path() throws RecognitionException {
        SparqlParser.path_return retval = new SparqlParser.path_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PIPE300=null;
        SparqlParser.pathSequence_return pathSequence299 = null;

        SparqlParser.pathSequence_return pathSequence301 = null;


        CommonTree PIPE300_tree=null;
        RewriteRuleTokenStream stream_PIPE=new RewriteRuleTokenStream(adaptor,"token PIPE");
        RewriteRuleSubtreeStream stream_pathSequence=new RewriteRuleSubtreeStream(adaptor,"rule pathSequence");
        try { dbg.enterRule(getGrammarFileName(), "path");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(449, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:450:5: ( pathSequence ( PIPE pathSequence )* -> ^( PATH ( pathSequence )+ ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:450:7: pathSequence ( PIPE pathSequence )*
            {
            dbg.location(450,7);
            pushFollow(FOLLOW_pathSequence_in_path3585);
            pathSequence299=pathSequence();

            state._fsp--;

            stream_pathSequence.add(pathSequence299.getTree());
            dbg.location(450,20);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:450:20: ( PIPE pathSequence )*
            try { dbg.enterSubRule(101);

            loop101:
            do {
                int alt101=2;
                try { dbg.enterDecision(101);

                int LA101_0 = input.LA(1);

                if ( (LA101_0==PIPE) ) {
                    alt101=1;
                }


                } finally {dbg.exitDecision(101);}

                switch (alt101) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:450:21: PIPE pathSequence
            	    {
            	    dbg.location(450,21);
            	    PIPE300=(Token)match(input,PIPE,FOLLOW_PIPE_in_path3588);  
            	    stream_PIPE.add(PIPE300);

            	    dbg.location(450,26);
            	    pushFollow(FOLLOW_pathSequence_in_path3590);
            	    pathSequence301=pathSequence();

            	    state._fsp--;

            	    stream_pathSequence.add(pathSequence301.getTree());

            	    }
            	    break;

            	default :
            	    break loop101;
                }
            } while (true);
            } finally {dbg.exitSubRule(101);}



            // AST REWRITE
            // elements: pathSequence
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 450:41: -> ^( PATH ( pathSequence )+ )
            {
                dbg.location(450,44);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:450:44: ^( PATH ( pathSequence )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(450,46);
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATH, "PATH"), root_1);

                dbg.location(450,51);
                if ( !(stream_pathSequence.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_pathSequence.hasNext() ) {
                    dbg.location(450,51);
                    adaptor.addChild(root_1, stream_pathSequence.nextTree());

                }
                stream_pathSequence.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(451, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "path");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "path"

    public static class pathSequence_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pathSequence"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:453:1: pathSequence : pathEltOrInverse ( DIVIDE pathEltOrInverse )* -> ^( PATH_SEQUENCE ( pathEltOrInverse )+ ) ;
    public final SparqlParser.pathSequence_return pathSequence() throws RecognitionException {
        SparqlParser.pathSequence_return retval = new SparqlParser.pathSequence_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DIVIDE303=null;
        SparqlParser.pathEltOrInverse_return pathEltOrInverse302 = null;

        SparqlParser.pathEltOrInverse_return pathEltOrInverse304 = null;


        CommonTree DIVIDE303_tree=null;
        RewriteRuleTokenStream stream_DIVIDE=new RewriteRuleTokenStream(adaptor,"token DIVIDE");
        RewriteRuleSubtreeStream stream_pathEltOrInverse=new RewriteRuleSubtreeStream(adaptor,"rule pathEltOrInverse");
        try { dbg.enterRule(getGrammarFileName(), "pathSequence");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(453, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:454:5: ( pathEltOrInverse ( DIVIDE pathEltOrInverse )* -> ^( PATH_SEQUENCE ( pathEltOrInverse )+ ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:454:7: pathEltOrInverse ( DIVIDE pathEltOrInverse )*
            {
            dbg.location(454,7);
            pushFollow(FOLLOW_pathEltOrInverse_in_pathSequence3619);
            pathEltOrInverse302=pathEltOrInverse();

            state._fsp--;

            stream_pathEltOrInverse.add(pathEltOrInverse302.getTree());
            dbg.location(454,24);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:454:24: ( DIVIDE pathEltOrInverse )*
            try { dbg.enterSubRule(102);

            loop102:
            do {
                int alt102=2;
                try { dbg.enterDecision(102);

                int LA102_0 = input.LA(1);

                if ( (LA102_0==DIVIDE) ) {
                    alt102=1;
                }


                } finally {dbg.exitDecision(102);}

                switch (alt102) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:454:25: DIVIDE pathEltOrInverse
            	    {
            	    dbg.location(454,25);
            	    DIVIDE303=(Token)match(input,DIVIDE,FOLLOW_DIVIDE_in_pathSequence3622);  
            	    stream_DIVIDE.add(DIVIDE303);

            	    dbg.location(454,32);
            	    pushFollow(FOLLOW_pathEltOrInverse_in_pathSequence3624);
            	    pathEltOrInverse304=pathEltOrInverse();

            	    state._fsp--;

            	    stream_pathEltOrInverse.add(pathEltOrInverse304.getTree());

            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);
            } finally {dbg.exitSubRule(102);}



            // AST REWRITE
            // elements: pathEltOrInverse
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 454:51: -> ^( PATH_SEQUENCE ( pathEltOrInverse )+ )
            {
                dbg.location(454,54);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:454:54: ^( PATH_SEQUENCE ( pathEltOrInverse )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(454,56);
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATH_SEQUENCE, "PATH_SEQUENCE"), root_1);

                dbg.location(454,70);
                if ( !(stream_pathEltOrInverse.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_pathEltOrInverse.hasNext() ) {
                    dbg.location(454,70);
                    adaptor.addChild(root_1, stream_pathEltOrInverse.nextTree());

                }
                stream_pathEltOrInverse.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(455, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pathSequence");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "pathSequence"

    public static class pathEltOrInverse_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pathEltOrInverse"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:457:1: pathEltOrInverse : (i= INVERSE )? pathElt -> ^( PATH_ELT_OR_INVERSE ( $i)? pathElt ) ;
    public final SparqlParser.pathEltOrInverse_return pathEltOrInverse() throws RecognitionException {
        SparqlParser.pathEltOrInverse_return retval = new SparqlParser.pathEltOrInverse_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        SparqlParser.pathElt_return pathElt305 = null;


        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_INVERSE=new RewriteRuleTokenStream(adaptor,"token INVERSE");
        RewriteRuleSubtreeStream stream_pathElt=new RewriteRuleSubtreeStream(adaptor,"rule pathElt");
        try { dbg.enterRule(getGrammarFileName(), "pathEltOrInverse");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(457, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:458:5: ( (i= INVERSE )? pathElt -> ^( PATH_ELT_OR_INVERSE ( $i)? pathElt ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:458:7: (i= INVERSE )? pathElt
            {
            dbg.location(458,7);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:458:7: (i= INVERSE )?
            int alt103=2;
            try { dbg.enterSubRule(103);
            try { dbg.enterDecision(103);

            int LA103_0 = input.LA(1);

            if ( (LA103_0==INVERSE) ) {
                alt103=1;
            }
            } finally {dbg.exitDecision(103);}

            switch (alt103) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:458:8: i= INVERSE
                    {
                    dbg.location(458,9);
                    i=(Token)match(input,INVERSE,FOLLOW_INVERSE_in_pathEltOrInverse3655);  
                    stream_INVERSE.add(i);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(103);}

            dbg.location(458,20);
            pushFollow(FOLLOW_pathElt_in_pathEltOrInverse3659);
            pathElt305=pathElt();

            state._fsp--;

            stream_pathElt.add(pathElt305.getTree());


            // AST REWRITE
            // elements: i, pathElt
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 458:28: -> ^( PATH_ELT_OR_INVERSE ( $i)? pathElt )
            {
                dbg.location(458,31);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:458:31: ^( PATH_ELT_OR_INVERSE ( $i)? pathElt )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(458,33);
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATH_ELT_OR_INVERSE, "PATH_ELT_OR_INVERSE"), root_1);

                dbg.location(458,53);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:458:53: ( $i)?
                if ( stream_i.hasNext() ) {
                    dbg.location(458,53);
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                dbg.location(458,57);
                adaptor.addChild(root_1, stream_pathElt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(459, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pathEltOrInverse");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "pathEltOrInverse"

    public static class pathElt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pathElt"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:461:1: pathElt : pathPrimary ( pathMod )? ;
    public final SparqlParser.pathElt_return pathElt() throws RecognitionException {
        SparqlParser.pathElt_return retval = new SparqlParser.pathElt_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        SparqlParser.pathPrimary_return pathPrimary306 = null;

        SparqlParser.pathMod_return pathMod307 = null;



        try { dbg.enterRule(getGrammarFileName(), "pathElt");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(461, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:462:5: ( pathPrimary ( pathMod )? )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:462:7: pathPrimary ( pathMod )?
            {
            root_0 = (CommonTree)adaptor.nil();

            dbg.location(462,7);
            pushFollow(FOLLOW_pathPrimary_in_pathElt3699);
            pathPrimary306=pathPrimary();

            state._fsp--;

            adaptor.addChild(root_0, pathPrimary306.getTree());
            dbg.location(462,19);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:462:19: ( pathMod )?
            int alt104=2;
            try { dbg.enterSubRule(104);
            try { dbg.enterDecision(104);

            int LA104_0 = input.LA(1);

            if ( (LA104_0==ASTERISK||LA104_0==OPEN_CURLY_BRACE||(LA104_0>=QUESTION_MARK && LA104_0<=PLUS)) ) {
                alt104=1;
            }
            } finally {dbg.exitDecision(104);}

            switch (alt104) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:462:19: pathMod
                    {
                    dbg.location(462,19);
                    pushFollow(FOLLOW_pathMod_in_pathElt3701);
                    pathMod307=pathMod();

                    state._fsp--;

                    adaptor.addChild(root_0, pathMod307.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(104);}


            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(463, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pathElt");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "pathElt"

    public static class pathMod_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pathMod"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:465:1: pathMod : ( ASTERISK -> PATH_MOD ASTERISK | QUESTION_MARK -> PATH_MOD QUESTION_MARK | PLUS -> PATH_MOD PLUS | OPEN_CURLY_BRACE i1= INTEGER CLOSE_CURLY_BRACE -> PATH_MOD $i1 | OPEN_CURLY_BRACE i1= INTEGER c= COMMA CLOSE_CURLY_BRACE -> PATH_MOD $i1 $c | OPEN_CURLY_BRACE i1= INTEGER COMMA i2= INTEGER CLOSE_CURLY_BRACE -> PATH_MOD $i1 $i2 | OPEN_CURLY_BRACE c= COMMA i2= INTEGER CLOSE_CURLY_BRACE -> PATH_MOD $c $i2);
    public final SparqlParser.pathMod_return pathMod() throws RecognitionException {
        SparqlParser.pathMod_return retval = new SparqlParser.pathMod_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token c=null;
        Token i2=null;
        Token ASTERISK308=null;
        Token QUESTION_MARK309=null;
        Token PLUS310=null;
        Token OPEN_CURLY_BRACE311=null;
        Token CLOSE_CURLY_BRACE312=null;
        Token OPEN_CURLY_BRACE313=null;
        Token CLOSE_CURLY_BRACE314=null;
        Token OPEN_CURLY_BRACE315=null;
        Token COMMA316=null;
        Token CLOSE_CURLY_BRACE317=null;
        Token OPEN_CURLY_BRACE318=null;
        Token CLOSE_CURLY_BRACE319=null;

        CommonTree i1_tree=null;
        CommonTree c_tree=null;
        CommonTree i2_tree=null;
        CommonTree ASTERISK308_tree=null;
        CommonTree QUESTION_MARK309_tree=null;
        CommonTree PLUS310_tree=null;
        CommonTree OPEN_CURLY_BRACE311_tree=null;
        CommonTree CLOSE_CURLY_BRACE312_tree=null;
        CommonTree OPEN_CURLY_BRACE313_tree=null;
        CommonTree CLOSE_CURLY_BRACE314_tree=null;
        CommonTree OPEN_CURLY_BRACE315_tree=null;
        CommonTree COMMA316_tree=null;
        CommonTree CLOSE_CURLY_BRACE317_tree=null;
        CommonTree OPEN_CURLY_BRACE318_tree=null;
        CommonTree CLOSE_CURLY_BRACE319_tree=null;
        RewriteRuleTokenStream stream_INTEGER=new RewriteRuleTokenStream(adaptor,"token INTEGER");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OPEN_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_CURLY_BRACE");
        RewriteRuleTokenStream stream_CLOSE_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_CURLY_BRACE");
        RewriteRuleTokenStream stream_ASTERISK=new RewriteRuleTokenStream(adaptor,"token ASTERISK");
        RewriteRuleTokenStream stream_QUESTION_MARK=new RewriteRuleTokenStream(adaptor,"token QUESTION_MARK");

        try { dbg.enterRule(getGrammarFileName(), "pathMod");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(465, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:466:5: ( ASTERISK -> PATH_MOD ASTERISK | QUESTION_MARK -> PATH_MOD QUESTION_MARK | PLUS -> PATH_MOD PLUS | OPEN_CURLY_BRACE i1= INTEGER CLOSE_CURLY_BRACE -> PATH_MOD $i1 | OPEN_CURLY_BRACE i1= INTEGER c= COMMA CLOSE_CURLY_BRACE -> PATH_MOD $i1 $c | OPEN_CURLY_BRACE i1= INTEGER COMMA i2= INTEGER CLOSE_CURLY_BRACE -> PATH_MOD $i1 $i2 | OPEN_CURLY_BRACE c= COMMA i2= INTEGER CLOSE_CURLY_BRACE -> PATH_MOD $c $i2)
            int alt105=7;
            try { dbg.enterDecision(105);

            try {
                isCyclicDecision = true;
                alt105 = dfa105.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(105);}

            switch (alt105) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:466:7: ASTERISK
                    {
                    dbg.location(466,7);
                    ASTERISK308=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_pathMod3719);  
                    stream_ASTERISK.add(ASTERISK308);



                    // AST REWRITE
                    // elements: ASTERISK
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 466:16: -> PATH_MOD ASTERISK
                    {
                        dbg.location(466,19);
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PATH_MOD, "PATH_MOD"));
                        dbg.location(466,28);
                        adaptor.addChild(root_0, stream_ASTERISK.nextNode());

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:467:7: QUESTION_MARK
                    {
                    dbg.location(467,7);
                    QUESTION_MARK309=(Token)match(input,QUESTION_MARK,FOLLOW_QUESTION_MARK_in_pathMod3733);  
                    stream_QUESTION_MARK.add(QUESTION_MARK309);



                    // AST REWRITE
                    // elements: QUESTION_MARK
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 467:21: -> PATH_MOD QUESTION_MARK
                    {
                        dbg.location(467,24);
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PATH_MOD, "PATH_MOD"));
                        dbg.location(467,33);
                        adaptor.addChild(root_0, stream_QUESTION_MARK.nextNode());

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:468:7: PLUS
                    {
                    dbg.location(468,7);
                    PLUS310=(Token)match(input,PLUS,FOLLOW_PLUS_in_pathMod3748);  
                    stream_PLUS.add(PLUS310);



                    // AST REWRITE
                    // elements: PLUS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 468:12: -> PATH_MOD PLUS
                    {
                        dbg.location(468,15);
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PATH_MOD, "PATH_MOD"));
                        dbg.location(468,24);
                        adaptor.addChild(root_0, stream_PLUS.nextNode());

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:469:7: OPEN_CURLY_BRACE i1= INTEGER CLOSE_CURLY_BRACE
                    {
                    dbg.location(469,7);
                    OPEN_CURLY_BRACE311=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_pathMod3763);  
                    stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE311);

                    dbg.location(469,26);
                    i1=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_pathMod3767);  
                    stream_INTEGER.add(i1);

                    dbg.location(469,35);
                    CLOSE_CURLY_BRACE312=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_pathMod3769);  
                    stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE312);



                    // AST REWRITE
                    // elements: i1
                    // token labels: i1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 469:53: -> PATH_MOD $i1
                    {
                        dbg.location(469,56);
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PATH_MOD, "PATH_MOD"));
                        dbg.location(469,65);
                        adaptor.addChild(root_0, stream_i1.nextNode());

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:470:7: OPEN_CURLY_BRACE i1= INTEGER c= COMMA CLOSE_CURLY_BRACE
                    {
                    dbg.location(470,7);
                    OPEN_CURLY_BRACE313=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_pathMod3784);  
                    stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE313);

                    dbg.location(470,26);
                    i1=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_pathMod3788);  
                    stream_INTEGER.add(i1);

                    dbg.location(470,36);
                    c=(Token)match(input,COMMA,FOLLOW_COMMA_in_pathMod3792);  
                    stream_COMMA.add(c);

                    dbg.location(470,43);
                    CLOSE_CURLY_BRACE314=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_pathMod3794);  
                    stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE314);



                    // AST REWRITE
                    // elements: i1, c
                    // token labels: c, i1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
                    RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 470:61: -> PATH_MOD $i1 $c
                    {
                        dbg.location(470,64);
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PATH_MOD, "PATH_MOD"));
                        dbg.location(470,73);
                        adaptor.addChild(root_0, stream_i1.nextNode());
                        dbg.location(470,77);
                        adaptor.addChild(root_0, stream_c.nextNode());

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:471:7: OPEN_CURLY_BRACE i1= INTEGER COMMA i2= INTEGER CLOSE_CURLY_BRACE
                    {
                    dbg.location(471,7);
                    OPEN_CURLY_BRACE315=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_pathMod3812);  
                    stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE315);

                    dbg.location(471,26);
                    i1=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_pathMod3816);  
                    stream_INTEGER.add(i1);

                    dbg.location(471,35);
                    COMMA316=(Token)match(input,COMMA,FOLLOW_COMMA_in_pathMod3818);  
                    stream_COMMA.add(COMMA316);

                    dbg.location(471,43);
                    i2=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_pathMod3822);  
                    stream_INTEGER.add(i2);

                    dbg.location(471,52);
                    CLOSE_CURLY_BRACE317=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_pathMod3824);  
                    stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE317);



                    // AST REWRITE
                    // elements: i2, i1
                    // token labels: i2, i1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
                    RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 471:71: -> PATH_MOD $i1 $i2
                    {
                        dbg.location(471,74);
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PATH_MOD, "PATH_MOD"));
                        dbg.location(471,83);
                        adaptor.addChild(root_0, stream_i1.nextNode());
                        dbg.location(471,87);
                        adaptor.addChild(root_0, stream_i2.nextNode());

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:472:7: OPEN_CURLY_BRACE c= COMMA i2= INTEGER CLOSE_CURLY_BRACE
                    {
                    dbg.location(472,7);
                    OPEN_CURLY_BRACE318=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_pathMod3843);  
                    stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE318);

                    dbg.location(472,25);
                    c=(Token)match(input,COMMA,FOLLOW_COMMA_in_pathMod3847);  
                    stream_COMMA.add(c);

                    dbg.location(472,34);
                    i2=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_pathMod3851);  
                    stream_INTEGER.add(i2);

                    dbg.location(472,43);
                    CLOSE_CURLY_BRACE319=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_pathMod3853);  
                    stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE319);



                    // AST REWRITE
                    // elements: c, i2
                    // token labels: c, i2
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
                    RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 472:61: -> PATH_MOD $c $i2
                    {
                        dbg.location(472,64);
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PATH_MOD, "PATH_MOD"));
                        dbg.location(472,73);
                        adaptor.addChild(root_0, stream_c.nextNode());
                        dbg.location(472,76);
                        adaptor.addChild(root_0, stream_i2.nextNode());

                    }

                    retval.tree = root_0;
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(473, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pathMod");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "pathMod"

    public static class pathPrimary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pathPrimary"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:475:1: pathPrimary : ( iriRef -> ^( PATH_PRIMARY iriRef ) | A -> ^( PATH_PRIMARY A ) | NEGATION pathNegatedPropertySet -> ^( PATH_PRIMARY pathNegatedPropertySet ) | OPEN_BRACE path CLOSE_BRACE -> ^( PATH_PRIMARY path ) );
    public final SparqlParser.pathPrimary_return pathPrimary() throws RecognitionException {
        SparqlParser.pathPrimary_return retval = new SparqlParser.pathPrimary_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token A321=null;
        Token NEGATION322=null;
        Token OPEN_BRACE324=null;
        Token CLOSE_BRACE326=null;
        SparqlParser.iriRef_return iriRef320 = null;

        SparqlParser.pathNegatedPropertySet_return pathNegatedPropertySet323 = null;

        SparqlParser.path_return path325 = null;


        CommonTree A321_tree=null;
        CommonTree NEGATION322_tree=null;
        CommonTree OPEN_BRACE324_tree=null;
        CommonTree CLOSE_BRACE326_tree=null;
        RewriteRuleTokenStream stream_A=new RewriteRuleTokenStream(adaptor,"token A");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_NEGATION=new RewriteRuleTokenStream(adaptor,"token NEGATION");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleSubtreeStream stream_path=new RewriteRuleSubtreeStream(adaptor,"rule path");
        RewriteRuleSubtreeStream stream_iriRef=new RewriteRuleSubtreeStream(adaptor,"rule iriRef");
        RewriteRuleSubtreeStream stream_pathNegatedPropertySet=new RewriteRuleSubtreeStream(adaptor,"rule pathNegatedPropertySet");
        try { dbg.enterRule(getGrammarFileName(), "pathPrimary");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(475, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:476:5: ( iriRef -> ^( PATH_PRIMARY iriRef ) | A -> ^( PATH_PRIMARY A ) | NEGATION pathNegatedPropertySet -> ^( PATH_PRIMARY pathNegatedPropertySet ) | OPEN_BRACE path CLOSE_BRACE -> ^( PATH_PRIMARY path ) )
            int alt106=4;
            try { dbg.enterDecision(106);

            switch ( input.LA(1) ) {
            case IRI_REF:
            case PNAME_NS:
            case PNAME_LN:
                {
                alt106=1;
                }
                break;
            case A:
                {
                alt106=2;
                }
                break;
            case NEGATION:
                {
                alt106=3;
                }
                break;
            case OPEN_BRACE:
                {
                alt106=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 106, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(106);}

            switch (alt106) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:476:7: iriRef
                    {
                    dbg.location(476,7);
                    pushFollow(FOLLOW_iriRef_in_pathPrimary3880);
                    iriRef320=iriRef();

                    state._fsp--;

                    stream_iriRef.add(iriRef320.getTree());


                    // AST REWRITE
                    // elements: iriRef
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 476:14: -> ^( PATH_PRIMARY iriRef )
                    {
                        dbg.location(476,17);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:476:17: ^( PATH_PRIMARY iriRef )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(476,19);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATH_PRIMARY, "PATH_PRIMARY"), root_1);

                        dbg.location(476,32);
                        adaptor.addChild(root_1, stream_iriRef.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:477:7: A
                    {
                    dbg.location(477,7);
                    A321=(Token)match(input,A,FOLLOW_A_in_pathPrimary3896);  
                    stream_A.add(A321);



                    // AST REWRITE
                    // elements: A
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 477:9: -> ^( PATH_PRIMARY A )
                    {
                        dbg.location(477,12);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:477:12: ^( PATH_PRIMARY A )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(477,14);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATH_PRIMARY, "PATH_PRIMARY"), root_1);

                        dbg.location(477,27);
                        adaptor.addChild(root_1, stream_A.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:478:7: NEGATION pathNegatedPropertySet
                    {
                    dbg.location(478,7);
                    NEGATION322=(Token)match(input,NEGATION,FOLLOW_NEGATION_in_pathPrimary3912);  
                    stream_NEGATION.add(NEGATION322);

                    dbg.location(478,16);
                    pushFollow(FOLLOW_pathNegatedPropertySet_in_pathPrimary3914);
                    pathNegatedPropertySet323=pathNegatedPropertySet();

                    state._fsp--;

                    stream_pathNegatedPropertySet.add(pathNegatedPropertySet323.getTree());


                    // AST REWRITE
                    // elements: pathNegatedPropertySet
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 478:39: -> ^( PATH_PRIMARY pathNegatedPropertySet )
                    {
                        dbg.location(478,42);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:478:42: ^( PATH_PRIMARY pathNegatedPropertySet )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(478,44);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATH_PRIMARY, "PATH_PRIMARY"), root_1);

                        dbg.location(478,57);
                        adaptor.addChild(root_1, stream_pathNegatedPropertySet.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:479:7: OPEN_BRACE path CLOSE_BRACE
                    {
                    dbg.location(479,7);
                    OPEN_BRACE324=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_pathPrimary3930);  
                    stream_OPEN_BRACE.add(OPEN_BRACE324);

                    dbg.location(479,18);
                    pushFollow(FOLLOW_path_in_pathPrimary3932);
                    path325=path();

                    state._fsp--;

                    stream_path.add(path325.getTree());
                    dbg.location(479,23);
                    CLOSE_BRACE326=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_pathPrimary3934);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE326);



                    // AST REWRITE
                    // elements: path
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 479:35: -> ^( PATH_PRIMARY path )
                    {
                        dbg.location(479,38);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:479:38: ^( PATH_PRIMARY path )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(479,40);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATH_PRIMARY, "PATH_PRIMARY"), root_1);

                        dbg.location(479,53);
                        adaptor.addChild(root_1, stream_path.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(480, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pathPrimary");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "pathPrimary"

    public static class pathNegatedPropertySet_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pathNegatedPropertySet"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:482:1: pathNegatedPropertySet : ( pathOneInPropertySet -> ^( PATH_NEGATED pathOneInPropertySet ) | OPEN_BRACE ( pathOneInPropertySet ( PIPE pathOneInPropertySet )* )? CLOSE_BRACE -> ^( PATH_NEGATED ( pathOneInPropertySet )+ ) );
    public final SparqlParser.pathNegatedPropertySet_return pathNegatedPropertySet() throws RecognitionException {
        SparqlParser.pathNegatedPropertySet_return retval = new SparqlParser.pathNegatedPropertySet_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token OPEN_BRACE328=null;
        Token PIPE330=null;
        Token CLOSE_BRACE332=null;
        SparqlParser.pathOneInPropertySet_return pathOneInPropertySet327 = null;

        SparqlParser.pathOneInPropertySet_return pathOneInPropertySet329 = null;

        SparqlParser.pathOneInPropertySet_return pathOneInPropertySet331 = null;


        CommonTree OPEN_BRACE328_tree=null;
        CommonTree PIPE330_tree=null;
        CommonTree CLOSE_BRACE332_tree=null;
        RewriteRuleTokenStream stream_PIPE=new RewriteRuleTokenStream(adaptor,"token PIPE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleSubtreeStream stream_pathOneInPropertySet=new RewriteRuleSubtreeStream(adaptor,"rule pathOneInPropertySet");
        try { dbg.enterRule(getGrammarFileName(), "pathNegatedPropertySet");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(482, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:483:5: ( pathOneInPropertySet -> ^( PATH_NEGATED pathOneInPropertySet ) | OPEN_BRACE ( pathOneInPropertySet ( PIPE pathOneInPropertySet )* )? CLOSE_BRACE -> ^( PATH_NEGATED ( pathOneInPropertySet )+ ) )
            int alt109=2;
            try { dbg.enterDecision(109);

            int LA109_0 = input.LA(1);

            if ( (LA109_0==IRI_REF||LA109_0==PNAME_NS||LA109_0==A||LA109_0==INVERSE||LA109_0==PNAME_LN) ) {
                alt109=1;
            }
            else if ( (LA109_0==OPEN_BRACE) ) {
                alt109=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 109, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(109);}

            switch (alt109) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:483:7: pathOneInPropertySet
                    {
                    dbg.location(483,7);
                    pushFollow(FOLLOW_pathOneInPropertySet_in_pathNegatedPropertySet3959);
                    pathOneInPropertySet327=pathOneInPropertySet();

                    state._fsp--;

                    stream_pathOneInPropertySet.add(pathOneInPropertySet327.getTree());


                    // AST REWRITE
                    // elements: pathOneInPropertySet
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 483:28: -> ^( PATH_NEGATED pathOneInPropertySet )
                    {
                        dbg.location(483,31);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:483:31: ^( PATH_NEGATED pathOneInPropertySet )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(483,33);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATH_NEGATED, "PATH_NEGATED"), root_1);

                        dbg.location(483,46);
                        adaptor.addChild(root_1, stream_pathOneInPropertySet.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:484:7: OPEN_BRACE ( pathOneInPropertySet ( PIPE pathOneInPropertySet )* )? CLOSE_BRACE
                    {
                    dbg.location(484,7);
                    OPEN_BRACE328=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_pathNegatedPropertySet3975);  
                    stream_OPEN_BRACE.add(OPEN_BRACE328);

                    dbg.location(484,18);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:484:18: ( pathOneInPropertySet ( PIPE pathOneInPropertySet )* )?
                    int alt108=2;
                    try { dbg.enterSubRule(108);
                    try { dbg.enterDecision(108);

                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==IRI_REF||LA108_0==PNAME_NS||LA108_0==A||LA108_0==INVERSE||LA108_0==PNAME_LN) ) {
                        alt108=1;
                    }
                    } finally {dbg.exitDecision(108);}

                    switch (alt108) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:484:19: pathOneInPropertySet ( PIPE pathOneInPropertySet )*
                            {
                            dbg.location(484,19);
                            pushFollow(FOLLOW_pathOneInPropertySet_in_pathNegatedPropertySet3978);
                            pathOneInPropertySet329=pathOneInPropertySet();

                            state._fsp--;

                            stream_pathOneInPropertySet.add(pathOneInPropertySet329.getTree());
                            dbg.location(484,40);
                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:484:40: ( PIPE pathOneInPropertySet )*
                            try { dbg.enterSubRule(107);

                            loop107:
                            do {
                                int alt107=2;
                                try { dbg.enterDecision(107);

                                int LA107_0 = input.LA(1);

                                if ( (LA107_0==PIPE) ) {
                                    alt107=1;
                                }


                                } finally {dbg.exitDecision(107);}

                                switch (alt107) {
                            	case 1 :
                            	    dbg.enterAlt(1);

                            	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:484:41: PIPE pathOneInPropertySet
                            	    {
                            	    dbg.location(484,41);
                            	    PIPE330=(Token)match(input,PIPE,FOLLOW_PIPE_in_pathNegatedPropertySet3981);  
                            	    stream_PIPE.add(PIPE330);

                            	    dbg.location(484,46);
                            	    pushFollow(FOLLOW_pathOneInPropertySet_in_pathNegatedPropertySet3983);
                            	    pathOneInPropertySet331=pathOneInPropertySet();

                            	    state._fsp--;

                            	    stream_pathOneInPropertySet.add(pathOneInPropertySet331.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop107;
                                }
                            } while (true);
                            } finally {dbg.exitSubRule(107);}


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(108);}

                    dbg.location(484,71);
                    CLOSE_BRACE332=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_pathNegatedPropertySet3989);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE332);



                    // AST REWRITE
                    // elements: pathOneInPropertySet
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 484:83: -> ^( PATH_NEGATED ( pathOneInPropertySet )+ )
                    {
                        dbg.location(484,86);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:484:86: ^( PATH_NEGATED ( pathOneInPropertySet )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(484,88);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATH_NEGATED, "PATH_NEGATED"), root_1);

                        dbg.location(484,101);
                        if ( !(stream_pathOneInPropertySet.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_pathOneInPropertySet.hasNext() ) {
                            dbg.location(484,101);
                            adaptor.addChild(root_1, stream_pathOneInPropertySet.nextTree());

                        }
                        stream_pathOneInPropertySet.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(485, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pathNegatedPropertySet");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "pathNegatedPropertySet"

    public static class pathOneInPropertySet_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pathOneInPropertySet"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:487:1: pathOneInPropertySet : ( INVERSE )? ( iriRef | A ) ;
    public final SparqlParser.pathOneInPropertySet_return pathOneInPropertySet() throws RecognitionException {
        SparqlParser.pathOneInPropertySet_return retval = new SparqlParser.pathOneInPropertySet_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INVERSE333=null;
        Token A335=null;
        SparqlParser.iriRef_return iriRef334 = null;


        CommonTree INVERSE333_tree=null;
        CommonTree A335_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "pathOneInPropertySet");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(487, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:488:5: ( ( INVERSE )? ( iriRef | A ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:488:7: ( INVERSE )? ( iriRef | A )
            {
            root_0 = (CommonTree)adaptor.nil();

            dbg.location(488,7);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:488:7: ( INVERSE )?
            int alt110=2;
            try { dbg.enterSubRule(110);
            try { dbg.enterDecision(110);

            int LA110_0 = input.LA(1);

            if ( (LA110_0==INVERSE) ) {
                alt110=1;
            }
            } finally {dbg.exitDecision(110);}

            switch (alt110) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:488:7: INVERSE
                    {
                    dbg.location(488,7);
                    INVERSE333=(Token)match(input,INVERSE,FOLLOW_INVERSE_in_pathOneInPropertySet4018); 
                    INVERSE333_tree = (CommonTree)adaptor.create(INVERSE333);
                    adaptor.addChild(root_0, INVERSE333_tree);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(110);}

            dbg.location(488,16);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:488:16: ( iriRef | A )
            int alt111=2;
            try { dbg.enterSubRule(111);
            try { dbg.enterDecision(111);

            int LA111_0 = input.LA(1);

            if ( (LA111_0==IRI_REF||LA111_0==PNAME_NS||LA111_0==PNAME_LN) ) {
                alt111=1;
            }
            else if ( (LA111_0==A) ) {
                alt111=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(111);}

            switch (alt111) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:488:17: iriRef
                    {
                    dbg.location(488,17);
                    pushFollow(FOLLOW_iriRef_in_pathOneInPropertySet4022);
                    iriRef334=iriRef();

                    state._fsp--;

                    adaptor.addChild(root_0, iriRef334.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:488:26: A
                    {
                    dbg.location(488,26);
                    A335=(Token)match(input,A,FOLLOW_A_in_pathOneInPropertySet4026); 
                    A335_tree = (CommonTree)adaptor.create(A335);
                    adaptor.addChild(root_0, A335_tree);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(111);}


            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(489, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "pathOneInPropertySet");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "pathOneInPropertySet"

    public static class triplesNode_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "triplesNode"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:491:1: triplesNode : ( OPEN_BRACE ( graphNode )+ CLOSE_BRACE -> ^( COLLECTION ( graphNode )+ ) | OPEN_SQUARE_BRACKET propertyListNotEmpty CLOSE_SQUARE_BRACKET -> ^( TRIPLES_NODE propertyListNotEmpty ) );
    public final SparqlParser.triplesNode_return triplesNode() throws RecognitionException {
        SparqlParser.triplesNode_return retval = new SparqlParser.triplesNode_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token OPEN_BRACE336=null;
        Token CLOSE_BRACE338=null;
        Token OPEN_SQUARE_BRACKET339=null;
        Token CLOSE_SQUARE_BRACKET341=null;
        SparqlParser.graphNode_return graphNode337 = null;

        SparqlParser.propertyListNotEmpty_return propertyListNotEmpty340 = null;


        CommonTree OPEN_BRACE336_tree=null;
        CommonTree CLOSE_BRACE338_tree=null;
        CommonTree OPEN_SQUARE_BRACKET339_tree=null;
        CommonTree CLOSE_SQUARE_BRACKET341_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_OPEN_SQUARE_BRACKET=new RewriteRuleTokenStream(adaptor,"token OPEN_SQUARE_BRACKET");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_SQUARE_BRACKET=new RewriteRuleTokenStream(adaptor,"token CLOSE_SQUARE_BRACKET");
        RewriteRuleSubtreeStream stream_graphNode=new RewriteRuleSubtreeStream(adaptor,"rule graphNode");
        RewriteRuleSubtreeStream stream_propertyListNotEmpty=new RewriteRuleSubtreeStream(adaptor,"rule propertyListNotEmpty");
        try { dbg.enterRule(getGrammarFileName(), "triplesNode");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(491, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:492:5: ( OPEN_BRACE ( graphNode )+ CLOSE_BRACE -> ^( COLLECTION ( graphNode )+ ) | OPEN_SQUARE_BRACKET propertyListNotEmpty CLOSE_SQUARE_BRACKET -> ^( TRIPLES_NODE propertyListNotEmpty ) )
            int alt113=2;
            try { dbg.enterDecision(113);

            int LA113_0 = input.LA(1);

            if ( (LA113_0==OPEN_BRACE) ) {
                alt113=1;
            }
            else if ( (LA113_0==OPEN_SQUARE_BRACKET) ) {
                alt113=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(113);}

            switch (alt113) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:492:7: OPEN_BRACE ( graphNode )+ CLOSE_BRACE
                    {
                    dbg.location(492,7);
                    OPEN_BRACE336=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_triplesNode4045);  
                    stream_OPEN_BRACE.add(OPEN_BRACE336);

                    dbg.location(492,18);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:492:18: ( graphNode )+
                    int cnt112=0;
                    try { dbg.enterSubRule(112);

                    loop112:
                    do {
                        int alt112=2;
                        try { dbg.enterDecision(112);

                        int LA112_0 = input.LA(1);

                        if ( (LA112_0==IRI_REF||LA112_0==PNAME_NS||LA112_0==OPEN_BRACE||LA112_0==INTEGER||LA112_0==OPEN_SQUARE_BRACKET||(LA112_0>=VAR1 && LA112_0<=VAR2)||(LA112_0>=DECIMAL && LA112_0<=BLANK_NODE_LABEL)) ) {
                            alt112=1;
                        }


                        } finally {dbg.exitDecision(112);}

                        switch (alt112) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:492:18: graphNode
                    	    {
                    	    dbg.location(492,18);
                    	    pushFollow(FOLLOW_graphNode_in_triplesNode4047);
                    	    graphNode337=graphNode();

                    	    state._fsp--;

                    	    stream_graphNode.add(graphNode337.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt112 >= 1 ) break loop112;
                                EarlyExitException eee =
                                    new EarlyExitException(112, input);
                                dbg.recognitionException(eee);

                                throw eee;
                        }
                        cnt112++;
                    } while (true);
                    } finally {dbg.exitSubRule(112);}

                    dbg.location(492,29);
                    CLOSE_BRACE338=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_triplesNode4050);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE338);



                    // AST REWRITE
                    // elements: graphNode
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 492:41: -> ^( COLLECTION ( graphNode )+ )
                    {
                        dbg.location(492,44);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:492:44: ^( COLLECTION ( graphNode )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(492,46);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COLLECTION, "COLLECTION"), root_1);

                        dbg.location(492,57);
                        if ( !(stream_graphNode.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_graphNode.hasNext() ) {
                            dbg.location(492,57);
                            adaptor.addChild(root_1, stream_graphNode.nextTree());

                        }
                        stream_graphNode.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:493:7: OPEN_SQUARE_BRACKET propertyListNotEmpty CLOSE_SQUARE_BRACKET
                    {
                    dbg.location(493,7);
                    OPEN_SQUARE_BRACKET339=(Token)match(input,OPEN_SQUARE_BRACKET,FOLLOW_OPEN_SQUARE_BRACKET_in_triplesNode4067);  
                    stream_OPEN_SQUARE_BRACKET.add(OPEN_SQUARE_BRACKET339);

                    dbg.location(493,27);
                    pushFollow(FOLLOW_propertyListNotEmpty_in_triplesNode4069);
                    propertyListNotEmpty340=propertyListNotEmpty();

                    state._fsp--;

                    stream_propertyListNotEmpty.add(propertyListNotEmpty340.getTree());
                    dbg.location(493,48);
                    CLOSE_SQUARE_BRACKET341=(Token)match(input,CLOSE_SQUARE_BRACKET,FOLLOW_CLOSE_SQUARE_BRACKET_in_triplesNode4071);  
                    stream_CLOSE_SQUARE_BRACKET.add(CLOSE_SQUARE_BRACKET341);



                    // AST REWRITE
                    // elements: propertyListNotEmpty
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 493:69: -> ^( TRIPLES_NODE propertyListNotEmpty )
                    {
                        dbg.location(493,72);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:493:72: ^( TRIPLES_NODE propertyListNotEmpty )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(493,74);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TRIPLES_NODE, "TRIPLES_NODE"), root_1);

                        dbg.location(493,87);
                        adaptor.addChild(root_1, stream_propertyListNotEmpty.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(494, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "triplesNode");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "triplesNode"

    public static class graphNode_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "graphNode"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:496:1: graphNode : ( varOrTerm | triplesNode );
    public final SparqlParser.graphNode_return graphNode() throws RecognitionException {
        SparqlParser.graphNode_return retval = new SparqlParser.graphNode_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        SparqlParser.varOrTerm_return varOrTerm342 = null;

        SparqlParser.triplesNode_return triplesNode343 = null;



        try { dbg.enterRule(getGrammarFileName(), "graphNode");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(496, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:497:5: ( varOrTerm | triplesNode )
            int alt114=2;
            try { dbg.enterDecision(114);

            switch ( input.LA(1) ) {
            case IRI_REF:
            case PNAME_NS:
            case INTEGER:
            case VAR1:
            case VAR2:
            case DECIMAL:
            case DOUBLE:
            case INTEGER_POSITIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE_POSITIVE:
            case INTEGER_NEGATIVE:
            case DECIMAL_NEGATIVE:
            case DOUBLE_NEGATIVE:
            case TRUE:
            case FALSE:
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
            case PNAME_LN:
            case BLANK_NODE_LABEL:
                {
                alt114=1;
                }
                break;
            case OPEN_SQUARE_BRACKET:
                {
                int LA114_2 = input.LA(2);

                if ( (LA114_2==CLOSE_SQUARE_BRACKET) ) {
                    alt114=1;
                }
                else if ( (LA114_2==IRI_REF||LA114_2==PNAME_NS||LA114_2==OPEN_BRACE||LA114_2==A||LA114_2==INVERSE||LA114_2==NEGATION||(LA114_2>=VAR1 && LA114_2<=VAR2)||LA114_2==PNAME_LN) ) {
                    alt114=2;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 114, 2, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                }
                break;
            case OPEN_BRACE:
                {
                int LA114_3 = input.LA(2);

                if ( (LA114_3==CLOSE_BRACE) ) {
                    alt114=1;
                }
                else if ( (LA114_3==IRI_REF||LA114_3==PNAME_NS||LA114_3==OPEN_BRACE||LA114_3==INTEGER||LA114_3==OPEN_SQUARE_BRACKET||(LA114_3>=VAR1 && LA114_3<=VAR2)||(LA114_3>=DECIMAL && LA114_3<=BLANK_NODE_LABEL)) ) {
                    alt114=2;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 114, 3, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(114);}

            switch (alt114) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:497:7: varOrTerm
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(497,7);
                    pushFollow(FOLLOW_varOrTerm_in_graphNode4096);
                    varOrTerm342=varOrTerm();

                    state._fsp--;

                    adaptor.addChild(root_0, varOrTerm342.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:497:19: triplesNode
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(497,19);
                    pushFollow(FOLLOW_triplesNode_in_graphNode4100);
                    triplesNode343=triplesNode();

                    state._fsp--;

                    adaptor.addChild(root_0, triplesNode343.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(498, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "graphNode");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "graphNode"

    public static class varOrTerm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "varOrTerm"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:500:1: varOrTerm : ( var -> ^( VAR var ) | graphTerm -> ^( TERM graphTerm ) );
    public final SparqlParser.varOrTerm_return varOrTerm() throws RecognitionException {
        SparqlParser.varOrTerm_return retval = new SparqlParser.varOrTerm_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        SparqlParser.var_return var344 = null;

        SparqlParser.graphTerm_return graphTerm345 = null;


        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        RewriteRuleSubtreeStream stream_graphTerm=new RewriteRuleSubtreeStream(adaptor,"rule graphTerm");
        try { dbg.enterRule(getGrammarFileName(), "varOrTerm");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(500, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:501:5: ( var -> ^( VAR var ) | graphTerm -> ^( TERM graphTerm ) )
            int alt115=2;
            try { dbg.enterDecision(115);

            int LA115_0 = input.LA(1);

            if ( ((LA115_0>=VAR1 && LA115_0<=VAR2)) ) {
                alt115=1;
            }
            else if ( (LA115_0==IRI_REF||LA115_0==PNAME_NS||LA115_0==OPEN_BRACE||LA115_0==INTEGER||LA115_0==OPEN_SQUARE_BRACKET||(LA115_0>=DECIMAL && LA115_0<=BLANK_NODE_LABEL)) ) {
                alt115=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 115, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(115);}

            switch (alt115) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:501:7: var
                    {
                    dbg.location(501,7);
                    pushFollow(FOLLOW_var_in_varOrTerm4117);
                    var344=var();

                    state._fsp--;

                    stream_var.add(var344.getTree());


                    // AST REWRITE
                    // elements: var
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 501:11: -> ^( VAR var )
                    {
                        dbg.location(501,14);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:501:14: ^( VAR var )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(501,16);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR, "VAR"), root_1);

                        dbg.location(501,20);
                        adaptor.addChild(root_1, stream_var.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:502:7: graphTerm
                    {
                    dbg.location(502,7);
                    pushFollow(FOLLOW_graphTerm_in_varOrTerm4133);
                    graphTerm345=graphTerm();

                    state._fsp--;

                    stream_graphTerm.add(graphTerm345.getTree());


                    // AST REWRITE
                    // elements: graphTerm
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 502:17: -> ^( TERM graphTerm )
                    {
                        dbg.location(502,20);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:502:20: ^( TERM graphTerm )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(502,22);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TERM, "TERM"), root_1);

                        dbg.location(502,27);
                        adaptor.addChild(root_1, stream_graphTerm.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(503, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "varOrTerm");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "varOrTerm"

    public static class varOrIRIref_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "varOrIRIref"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:505:1: varOrIRIref : ( var -> ^( VAR var ) | iriRef -> ^( TERM iriRef ) );
    public final SparqlParser.varOrIRIref_return varOrIRIref() throws RecognitionException {
        SparqlParser.varOrIRIref_return retval = new SparqlParser.varOrIRIref_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        SparqlParser.var_return var346 = null;

        SparqlParser.iriRef_return iriRef347 = null;


        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        RewriteRuleSubtreeStream stream_iriRef=new RewriteRuleSubtreeStream(adaptor,"rule iriRef");
        try { dbg.enterRule(getGrammarFileName(), "varOrIRIref");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(505, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:506:5: ( var -> ^( VAR var ) | iriRef -> ^( TERM iriRef ) )
            int alt116=2;
            try { dbg.enterDecision(116);

            int LA116_0 = input.LA(1);

            if ( ((LA116_0>=VAR1 && LA116_0<=VAR2)) ) {
                alt116=1;
            }
            else if ( (LA116_0==IRI_REF||LA116_0==PNAME_NS||LA116_0==PNAME_LN) ) {
                alt116=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(116);}

            switch (alt116) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:506:7: var
                    {
                    dbg.location(506,7);
                    pushFollow(FOLLOW_var_in_varOrIRIref4158);
                    var346=var();

                    state._fsp--;

                    stream_var.add(var346.getTree());


                    // AST REWRITE
                    // elements: var
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 506:11: -> ^( VAR var )
                    {
                        dbg.location(506,14);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:506:14: ^( VAR var )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(506,16);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR, "VAR"), root_1);

                        dbg.location(506,20);
                        adaptor.addChild(root_1, stream_var.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:507:7: iriRef
                    {
                    dbg.location(507,7);
                    pushFollow(FOLLOW_iriRef_in_varOrIRIref4174);
                    iriRef347=iriRef();

                    state._fsp--;

                    stream_iriRef.add(iriRef347.getTree());


                    // AST REWRITE
                    // elements: iriRef
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 507:14: -> ^( TERM iriRef )
                    {
                        dbg.location(507,17);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:507:17: ^( TERM iriRef )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(507,19);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TERM, "TERM"), root_1);

                        dbg.location(507,24);
                        adaptor.addChild(root_1, stream_iriRef.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(508, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "varOrIRIref");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "varOrIRIref"

    public static class var_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "var"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:510:1: var : ( VAR1 | VAR2 );
    public final SparqlParser.var_return var() throws RecognitionException {
        SparqlParser.var_return retval = new SparqlParser.var_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set348=null;

        CommonTree set348_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "var");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(510, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:511:5: ( VAR1 | VAR2 )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            dbg.location(511,5);
            set348=(Token)input.LT(1);
            if ( (input.LA(1)>=VAR1 && input.LA(1)<=VAR2) ) {
                input.consume();
                adaptor.addChild(root_0, (CommonTree)adaptor.create(set348));
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(512, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "var");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "var"

    public static class graphTerm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "graphTerm"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:514:1: graphTerm : ( iriRef | rdfLiteral | numericLiteral | booleanLiteral | blankNode | nil );
    public final SparqlParser.graphTerm_return graphTerm() throws RecognitionException {
        SparqlParser.graphTerm_return retval = new SparqlParser.graphTerm_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        SparqlParser.iriRef_return iriRef349 = null;

        SparqlParser.rdfLiteral_return rdfLiteral350 = null;

        SparqlParser.numericLiteral_return numericLiteral351 = null;

        SparqlParser.booleanLiteral_return booleanLiteral352 = null;

        SparqlParser.blankNode_return blankNode353 = null;

        SparqlParser.nil_return nil354 = null;



        try { dbg.enterRule(getGrammarFileName(), "graphTerm");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(514, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:515:5: ( iriRef | rdfLiteral | numericLiteral | booleanLiteral | blankNode | nil )
            int alt117=6;
            try { dbg.enterDecision(117);

            switch ( input.LA(1) ) {
            case IRI_REF:
            case PNAME_NS:
            case PNAME_LN:
                {
                alt117=1;
                }
                break;
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
                {
                alt117=2;
                }
                break;
            case INTEGER:
            case DECIMAL:
            case DOUBLE:
            case INTEGER_POSITIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE_POSITIVE:
            case INTEGER_NEGATIVE:
            case DECIMAL_NEGATIVE:
            case DOUBLE_NEGATIVE:
                {
                alt117=3;
                }
                break;
            case TRUE:
            case FALSE:
                {
                alt117=4;
                }
                break;
            case OPEN_SQUARE_BRACKET:
            case BLANK_NODE_LABEL:
                {
                alt117=5;
                }
                break;
            case OPEN_BRACE:
                {
                alt117=6;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(117);}

            switch (alt117) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:515:7: iriRef
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(515,7);
                    pushFollow(FOLLOW_iriRef_in_graphTerm4220);
                    iriRef349=iriRef();

                    state._fsp--;

                    adaptor.addChild(root_0, iriRef349.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:516:7: rdfLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(516,7);
                    pushFollow(FOLLOW_rdfLiteral_in_graphTerm4228);
                    rdfLiteral350=rdfLiteral();

                    state._fsp--;

                    adaptor.addChild(root_0, rdfLiteral350.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:517:7: numericLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(517,7);
                    pushFollow(FOLLOW_numericLiteral_in_graphTerm4236);
                    numericLiteral351=numericLiteral();

                    state._fsp--;

                    adaptor.addChild(root_0, numericLiteral351.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:518:7: booleanLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(518,7);
                    pushFollow(FOLLOW_booleanLiteral_in_graphTerm4244);
                    booleanLiteral352=booleanLiteral();

                    state._fsp--;

                    adaptor.addChild(root_0, booleanLiteral352.getTree());

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:519:7: blankNode
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(519,7);
                    pushFollow(FOLLOW_blankNode_in_graphTerm4252);
                    blankNode353=blankNode();

                    state._fsp--;

                    adaptor.addChild(root_0, blankNode353.getTree());

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:520:7: nil
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(520,7);
                    pushFollow(FOLLOW_nil_in_graphTerm4260);
                    nil354=nil();

                    state._fsp--;

                    adaptor.addChild(root_0, nil354.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(521, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "graphTerm");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "graphTerm"

    public static class nil_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nil"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:523:1: nil : OPEN_BRACE CLOSE_BRACE -> NIL ;
    public final SparqlParser.nil_return nil() throws RecognitionException {
        SparqlParser.nil_return retval = new SparqlParser.nil_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token OPEN_BRACE355=null;
        Token CLOSE_BRACE356=null;

        CommonTree OPEN_BRACE355_tree=null;
        CommonTree CLOSE_BRACE356_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");

        try { dbg.enterRule(getGrammarFileName(), "nil");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(523, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:524:5: ( OPEN_BRACE CLOSE_BRACE -> NIL )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:524:7: OPEN_BRACE CLOSE_BRACE
            {
            dbg.location(524,7);
            OPEN_BRACE355=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_nil4281);  
            stream_OPEN_BRACE.add(OPEN_BRACE355);

            dbg.location(524,18);
            CLOSE_BRACE356=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_nil4283);  
            stream_CLOSE_BRACE.add(CLOSE_BRACE356);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 524:30: -> NIL
            {
                dbg.location(524,33);
                adaptor.addChild(root_0, (CommonTree)adaptor.create(NIL, "NIL"));

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(525, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nil");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nil"

    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:527:1: expression : conditionalOrExpression ;
    public final SparqlParser.expression_return expression() throws RecognitionException {
        SparqlParser.expression_return retval = new SparqlParser.expression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        SparqlParser.conditionalOrExpression_return conditionalOrExpression357 = null;



        try { dbg.enterRule(getGrammarFileName(), "expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(527, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:528:5: ( conditionalOrExpression )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:528:7: conditionalOrExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            dbg.location(528,7);
            pushFollow(FOLLOW_conditionalOrExpression_in_expression4304);
            conditionalOrExpression357=conditionalOrExpression();

            state._fsp--;

            adaptor.addChild(root_0, conditionalOrExpression357.getTree());

            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(529, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "expression"

    public static class conditionalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalOrExpression"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:531:1: conditionalOrExpression : (c1= conditionalAndExpression -> $c1) ( OR c2= conditionalAndExpression -> ^( OR $conditionalOrExpression $c2) )* ;
    public final SparqlParser.conditionalOrExpression_return conditionalOrExpression() throws RecognitionException {
        SparqlParser.conditionalOrExpression_return retval = new SparqlParser.conditionalOrExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token OR358=null;
        SparqlParser.conditionalAndExpression_return c1 = null;

        SparqlParser.conditionalAndExpression_return c2 = null;


        CommonTree OR358_tree=null;
        RewriteRuleTokenStream stream_OR=new RewriteRuleTokenStream(adaptor,"token OR");
        RewriteRuleSubtreeStream stream_conditionalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalAndExpression");
        try { dbg.enterRule(getGrammarFileName(), "conditionalOrExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(531, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:532:5: ( (c1= conditionalAndExpression -> $c1) ( OR c2= conditionalAndExpression -> ^( OR $conditionalOrExpression $c2) )* )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:532:7: (c1= conditionalAndExpression -> $c1) ( OR c2= conditionalAndExpression -> ^( OR $conditionalOrExpression $c2) )*
            {
            dbg.location(532,7);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:532:7: (c1= conditionalAndExpression -> $c1)
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:532:8: c1= conditionalAndExpression
            {
            dbg.location(532,10);
            pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression4324);
            c1=conditionalAndExpression();

            state._fsp--;

            stream_conditionalAndExpression.add(c1.getTree());


            // AST REWRITE
            // elements: c1
            // token labels: 
            // rule labels: retval, c1
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_c1=new RewriteRuleSubtreeStream(adaptor,"rule c1",c1!=null?c1.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 532:36: -> $c1
            {
                dbg.location(532,39);
                adaptor.addChild(root_0, stream_c1.nextTree());

            }

            retval.tree = root_0;
            }

            dbg.location(532,44);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:532:44: ( OR c2= conditionalAndExpression -> ^( OR $conditionalOrExpression $c2) )*
            try { dbg.enterSubRule(118);

            loop118:
            do {
                int alt118=2;
                try { dbg.enterDecision(118);

                int LA118_0 = input.LA(1);

                if ( (LA118_0==OR) ) {
                    alt118=1;
                }


                } finally {dbg.exitDecision(118);}

                switch (alt118) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:532:45: OR c2= conditionalAndExpression
            	    {
            	    dbg.location(532,45);
            	    OR358=(Token)match(input,OR,FOLLOW_OR_in_conditionalOrExpression4333);  
            	    stream_OR.add(OR358);

            	    dbg.location(532,50);
            	    pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression4337);
            	    c2=conditionalAndExpression();

            	    state._fsp--;

            	    stream_conditionalAndExpression.add(c2.getTree());


            	    // AST REWRITE
            	    // elements: c2, conditionalOrExpression, OR
            	    // token labels: 
            	    // rule labels: retval, c2
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            	    RewriteRuleSubtreeStream stream_c2=new RewriteRuleSubtreeStream(adaptor,"rule c2",c2!=null?c2.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 532:76: -> ^( OR $conditionalOrExpression $c2)
            	    {
            	        dbg.location(532,79);
            	        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:532:79: ^( OR $conditionalOrExpression $c2)
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        dbg.location(532,81);
            	        root_1 = (CommonTree)adaptor.becomeRoot(stream_OR.nextNode(), root_1);

            	        dbg.location(532,84);
            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        dbg.location(532,109);
            	        adaptor.addChild(root_1, stream_c2.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;
            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);
            } finally {dbg.exitSubRule(118);}


            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(533, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "conditionalOrExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "conditionalOrExpression"

    public static class conditionalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalAndExpression"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:535:1: conditionalAndExpression : (v1= valueLogical -> $v1) ( AND v2= valueLogical -> ^( AND $conditionalAndExpression $v2) )* ;
    public final SparqlParser.conditionalAndExpression_return conditionalAndExpression() throws RecognitionException {
        SparqlParser.conditionalAndExpression_return retval = new SparqlParser.conditionalAndExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AND359=null;
        SparqlParser.valueLogical_return v1 = null;

        SparqlParser.valueLogical_return v2 = null;


        CommonTree AND359_tree=null;
        RewriteRuleTokenStream stream_AND=new RewriteRuleTokenStream(adaptor,"token AND");
        RewriteRuleSubtreeStream stream_valueLogical=new RewriteRuleSubtreeStream(adaptor,"rule valueLogical");
        try { dbg.enterRule(getGrammarFileName(), "conditionalAndExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(535, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:536:5: ( (v1= valueLogical -> $v1) ( AND v2= valueLogical -> ^( AND $conditionalAndExpression $v2) )* )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:536:7: (v1= valueLogical -> $v1) ( AND v2= valueLogical -> ^( AND $conditionalAndExpression $v2) )*
            {
            dbg.location(536,7);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:536:7: (v1= valueLogical -> $v1)
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:536:8: v1= valueLogical
            {
            dbg.location(536,10);
            pushFollow(FOLLOW_valueLogical_in_conditionalAndExpression4371);
            v1=valueLogical();

            state._fsp--;

            stream_valueLogical.add(v1.getTree());


            // AST REWRITE
            // elements: v1
            // token labels: 
            // rule labels: v1, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_v1=new RewriteRuleSubtreeStream(adaptor,"rule v1",v1!=null?v1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 536:24: -> $v1
            {
                dbg.location(536,27);
                adaptor.addChild(root_0, stream_v1.nextTree());

            }

            retval.tree = root_0;
            }

            dbg.location(536,32);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:536:32: ( AND v2= valueLogical -> ^( AND $conditionalAndExpression $v2) )*
            try { dbg.enterSubRule(119);

            loop119:
            do {
                int alt119=2;
                try { dbg.enterDecision(119);

                int LA119_0 = input.LA(1);

                if ( (LA119_0==AND) ) {
                    alt119=1;
                }


                } finally {dbg.exitDecision(119);}

                switch (alt119) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:536:33: AND v2= valueLogical
            	    {
            	    dbg.location(536,33);
            	    AND359=(Token)match(input,AND,FOLLOW_AND_in_conditionalAndExpression4380);  
            	    stream_AND.add(AND359);

            	    dbg.location(536,39);
            	    pushFollow(FOLLOW_valueLogical_in_conditionalAndExpression4384);
            	    v2=valueLogical();

            	    state._fsp--;

            	    stream_valueLogical.add(v2.getTree());


            	    // AST REWRITE
            	    // elements: conditionalAndExpression, AND, v2
            	    // token labels: 
            	    // rule labels: retval, v2
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            	    RewriteRuleSubtreeStream stream_v2=new RewriteRuleSubtreeStream(adaptor,"rule v2",v2!=null?v2.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 536:53: -> ^( AND $conditionalAndExpression $v2)
            	    {
            	        dbg.location(536,56);
            	        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:536:56: ^( AND $conditionalAndExpression $v2)
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        dbg.location(536,58);
            	        root_1 = (CommonTree)adaptor.becomeRoot(stream_AND.nextNode(), root_1);

            	        dbg.location(536,62);
            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        dbg.location(536,88);
            	        adaptor.addChild(root_1, stream_v2.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;
            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);
            } finally {dbg.exitSubRule(119);}


            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(537, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "conditionalAndExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "conditionalAndExpression"

    public static class valueLogical_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "valueLogical"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:539:1: valueLogical : relationalExpression ;
    public final SparqlParser.valueLogical_return valueLogical() throws RecognitionException {
        SparqlParser.valueLogical_return retval = new SparqlParser.valueLogical_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        SparqlParser.relationalExpression_return relationalExpression360 = null;



        try { dbg.enterRule(getGrammarFileName(), "valueLogical");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(539, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:540:5: ( relationalExpression )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:540:7: relationalExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            dbg.location(540,7);
            pushFollow(FOLLOW_relationalExpression_in_valueLogical4415);
            relationalExpression360=relationalExpression();

            state._fsp--;

            adaptor.addChild(root_0, relationalExpression360.getTree());

            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(541, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "valueLogical");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "valueLogical"

    public static class relationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalExpression"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:543:1: relationalExpression : (n1= numericExpression -> $n1) ( ( EQUAL n2= numericExpression -> ^( EQUAL $relationalExpression $n2) ) | ( NOT_EQUAL n3= numericExpression -> ^( NOT_EQUAL $relationalExpression $n3) ) | ( LESS n4= numericExpression -> ^( LESS $relationalExpression $n4) ) | ( GREATER n5= numericExpression -> ^( GREATER $relationalExpression $n5) ) | ( LESS_EQUAL n6= numericExpression -> ^( LESS_EQUAL $relationalExpression $n6) ) | ( GREATER_EQUAL n7= numericExpression -> ^( GREATER_EQUAL $relationalExpression $n7) ) | ( IN l2= expressionList -> ^( IN $relationalExpression $l2) ) | ( NOT IN l3= expressionList -> ^( NOT IN $relationalExpression $l3) ) )? ;
    public final SparqlParser.relationalExpression_return relationalExpression() throws RecognitionException {
        SparqlParser.relationalExpression_return retval = new SparqlParser.relationalExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EQUAL361=null;
        Token NOT_EQUAL362=null;
        Token LESS363=null;
        Token GREATER364=null;
        Token LESS_EQUAL365=null;
        Token GREATER_EQUAL366=null;
        Token IN367=null;
        Token NOT368=null;
        Token IN369=null;
        SparqlParser.numericExpression_return n1 = null;

        SparqlParser.numericExpression_return n2 = null;

        SparqlParser.numericExpression_return n3 = null;

        SparqlParser.numericExpression_return n4 = null;

        SparqlParser.numericExpression_return n5 = null;

        SparqlParser.numericExpression_return n6 = null;

        SparqlParser.numericExpression_return n7 = null;

        SparqlParser.expressionList_return l2 = null;

        SparqlParser.expressionList_return l3 = null;


        CommonTree EQUAL361_tree=null;
        CommonTree NOT_EQUAL362_tree=null;
        CommonTree LESS363_tree=null;
        CommonTree GREATER364_tree=null;
        CommonTree LESS_EQUAL365_tree=null;
        CommonTree GREATER_EQUAL366_tree=null;
        CommonTree IN367_tree=null;
        CommonTree NOT368_tree=null;
        CommonTree IN369_tree=null;
        RewriteRuleTokenStream stream_GREATER=new RewriteRuleTokenStream(adaptor,"token GREATER");
        RewriteRuleTokenStream stream_LESS_EQUAL=new RewriteRuleTokenStream(adaptor,"token LESS_EQUAL");
        RewriteRuleTokenStream stream_IN=new RewriteRuleTokenStream(adaptor,"token IN");
        RewriteRuleTokenStream stream_NOT=new RewriteRuleTokenStream(adaptor,"token NOT");
        RewriteRuleTokenStream stream_NOT_EQUAL=new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_GREATER_EQUAL=new RewriteRuleTokenStream(adaptor,"token GREATER_EQUAL");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleTokenStream stream_LESS=new RewriteRuleTokenStream(adaptor,"token LESS");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_numericExpression=new RewriteRuleSubtreeStream(adaptor,"rule numericExpression");
        try { dbg.enterRule(getGrammarFileName(), "relationalExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(543, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:544:5: ( (n1= numericExpression -> $n1) ( ( EQUAL n2= numericExpression -> ^( EQUAL $relationalExpression $n2) ) | ( NOT_EQUAL n3= numericExpression -> ^( NOT_EQUAL $relationalExpression $n3) ) | ( LESS n4= numericExpression -> ^( LESS $relationalExpression $n4) ) | ( GREATER n5= numericExpression -> ^( GREATER $relationalExpression $n5) ) | ( LESS_EQUAL n6= numericExpression -> ^( LESS_EQUAL $relationalExpression $n6) ) | ( GREATER_EQUAL n7= numericExpression -> ^( GREATER_EQUAL $relationalExpression $n7) ) | ( IN l2= expressionList -> ^( IN $relationalExpression $l2) ) | ( NOT IN l3= expressionList -> ^( NOT IN $relationalExpression $l3) ) )? )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:544:7: (n1= numericExpression -> $n1) ( ( EQUAL n2= numericExpression -> ^( EQUAL $relationalExpression $n2) ) | ( NOT_EQUAL n3= numericExpression -> ^( NOT_EQUAL $relationalExpression $n3) ) | ( LESS n4= numericExpression -> ^( LESS $relationalExpression $n4) ) | ( GREATER n5= numericExpression -> ^( GREATER $relationalExpression $n5) ) | ( LESS_EQUAL n6= numericExpression -> ^( LESS_EQUAL $relationalExpression $n6) ) | ( GREATER_EQUAL n7= numericExpression -> ^( GREATER_EQUAL $relationalExpression $n7) ) | ( IN l2= expressionList -> ^( IN $relationalExpression $l2) ) | ( NOT IN l3= expressionList -> ^( NOT IN $relationalExpression $l3) ) )?
            {
            dbg.location(544,7);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:544:7: (n1= numericExpression -> $n1)
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:544:8: n1= numericExpression
            {
            dbg.location(544,10);
            pushFollow(FOLLOW_numericExpression_in_relationalExpression4437);
            n1=numericExpression();

            state._fsp--;

            stream_numericExpression.add(n1.getTree());


            // AST REWRITE
            // elements: n1
            // token labels: 
            // rule labels: n1, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_n1=new RewriteRuleSubtreeStream(adaptor,"rule n1",n1!=null?n1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 544:29: -> $n1
            {
                dbg.location(544,32);
                adaptor.addChild(root_0, stream_n1.nextTree());

            }

            retval.tree = root_0;
            }

            dbg.location(544,37);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:544:37: ( ( EQUAL n2= numericExpression -> ^( EQUAL $relationalExpression $n2) ) | ( NOT_EQUAL n3= numericExpression -> ^( NOT_EQUAL $relationalExpression $n3) ) | ( LESS n4= numericExpression -> ^( LESS $relationalExpression $n4) ) | ( GREATER n5= numericExpression -> ^( GREATER $relationalExpression $n5) ) | ( LESS_EQUAL n6= numericExpression -> ^( LESS_EQUAL $relationalExpression $n6) ) | ( GREATER_EQUAL n7= numericExpression -> ^( GREATER_EQUAL $relationalExpression $n7) ) | ( IN l2= expressionList -> ^( IN $relationalExpression $l2) ) | ( NOT IN l3= expressionList -> ^( NOT IN $relationalExpression $l3) ) )?
            int alt120=9;
            try { dbg.enterSubRule(120);
            try { dbg.enterDecision(120);

            switch ( input.LA(1) ) {
                case EQUAL:
                    {
                    alt120=1;
                    }
                    break;
                case NOT_EQUAL:
                    {
                    alt120=2;
                    }
                    break;
                case LESS:
                    {
                    alt120=3;
                    }
                    break;
                case GREATER:
                    {
                    alt120=4;
                    }
                    break;
                case LESS_EQUAL:
                    {
                    alt120=5;
                    }
                    break;
                case GREATER_EQUAL:
                    {
                    alt120=6;
                    }
                    break;
                case IN:
                    {
                    alt120=7;
                    }
                    break;
                case NOT:
                    {
                    alt120=8;
                    }
                    break;
            }

            } finally {dbg.exitDecision(120);}

            switch (alt120) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:544:38: ( EQUAL n2= numericExpression -> ^( EQUAL $relationalExpression $n2) )
                    {
                    dbg.location(544,38);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:544:38: ( EQUAL n2= numericExpression -> ^( EQUAL $relationalExpression $n2) )
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:544:39: EQUAL n2= numericExpression
                    {
                    dbg.location(544,39);
                    EQUAL361=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_relationalExpression4447);  
                    stream_EQUAL.add(EQUAL361);

                    dbg.location(544,47);
                    pushFollow(FOLLOW_numericExpression_in_relationalExpression4451);
                    n2=numericExpression();

                    state._fsp--;

                    stream_numericExpression.add(n2.getTree());


                    // AST REWRITE
                    // elements: relationalExpression, n2, EQUAL
                    // token labels: 
                    // rule labels: retval, n2
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_n2=new RewriteRuleSubtreeStream(adaptor,"rule n2",n2!=null?n2.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 544:66: -> ^( EQUAL $relationalExpression $n2)
                    {
                        dbg.location(544,69);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:544:69: ^( EQUAL $relationalExpression $n2)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(544,71);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_EQUAL.nextNode(), root_1);

                        dbg.location(544,77);
                        adaptor.addChild(root_1, stream_retval.nextTree());
                        dbg.location(544,99);
                        adaptor.addChild(root_1, stream_n2.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:545:39: ( NOT_EQUAL n3= numericExpression -> ^( NOT_EQUAL $relationalExpression $n3) )
                    {
                    dbg.location(545,39);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:545:39: ( NOT_EQUAL n3= numericExpression -> ^( NOT_EQUAL $relationalExpression $n3) )
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:545:40: NOT_EQUAL n3= numericExpression
                    {
                    dbg.location(545,40);
                    NOT_EQUAL362=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_relationalExpression4508);  
                    stream_NOT_EQUAL.add(NOT_EQUAL362);

                    dbg.location(545,52);
                    pushFollow(FOLLOW_numericExpression_in_relationalExpression4512);
                    n3=numericExpression();

                    state._fsp--;

                    stream_numericExpression.add(n3.getTree());


                    // AST REWRITE
                    // elements: NOT_EQUAL, n3, relationalExpression
                    // token labels: 
                    // rule labels: retval, n3
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_n3=new RewriteRuleSubtreeStream(adaptor,"rule n3",n3!=null?n3.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 545:71: -> ^( NOT_EQUAL $relationalExpression $n3)
                    {
                        dbg.location(545,74);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:545:74: ^( NOT_EQUAL $relationalExpression $n3)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(545,76);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_NOT_EQUAL.nextNode(), root_1);

                        dbg.location(545,86);
                        adaptor.addChild(root_1, stream_retval.nextTree());
                        dbg.location(545,108);
                        adaptor.addChild(root_1, stream_n3.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }


                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:546:39: ( LESS n4= numericExpression -> ^( LESS $relationalExpression $n4) )
                    {
                    dbg.location(546,39);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:546:39: ( LESS n4= numericExpression -> ^( LESS $relationalExpression $n4) )
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:546:40: LESS n4= numericExpression
                    {
                    dbg.location(546,40);
                    LESS363=(Token)match(input,LESS,FOLLOW_LESS_in_relationalExpression4567);  
                    stream_LESS.add(LESS363);

                    dbg.location(546,47);
                    pushFollow(FOLLOW_numericExpression_in_relationalExpression4571);
                    n4=numericExpression();

                    state._fsp--;

                    stream_numericExpression.add(n4.getTree());


                    // AST REWRITE
                    // elements: n4, relationalExpression, LESS
                    // token labels: 
                    // rule labels: retval, n4
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_n4=new RewriteRuleSubtreeStream(adaptor,"rule n4",n4!=null?n4.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 546:66: -> ^( LESS $relationalExpression $n4)
                    {
                        dbg.location(546,69);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:546:69: ^( LESS $relationalExpression $n4)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(546,71);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_LESS.nextNode(), root_1);

                        dbg.location(546,76);
                        adaptor.addChild(root_1, stream_retval.nextTree());
                        dbg.location(546,98);
                        adaptor.addChild(root_1, stream_n4.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }


                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:547:39: ( GREATER n5= numericExpression -> ^( GREATER $relationalExpression $n5) )
                    {
                    dbg.location(547,39);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:547:39: ( GREATER n5= numericExpression -> ^( GREATER $relationalExpression $n5) )
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:547:40: GREATER n5= numericExpression
                    {
                    dbg.location(547,40);
                    GREATER364=(Token)match(input,GREATER,FOLLOW_GREATER_in_relationalExpression4626);  
                    stream_GREATER.add(GREATER364);

                    dbg.location(547,50);
                    pushFollow(FOLLOW_numericExpression_in_relationalExpression4630);
                    n5=numericExpression();

                    state._fsp--;

                    stream_numericExpression.add(n5.getTree());


                    // AST REWRITE
                    // elements: n5, relationalExpression, GREATER
                    // token labels: 
                    // rule labels: retval, n5
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_n5=new RewriteRuleSubtreeStream(adaptor,"rule n5",n5!=null?n5.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 547:69: -> ^( GREATER $relationalExpression $n5)
                    {
                        dbg.location(547,72);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:547:72: ^( GREATER $relationalExpression $n5)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(547,74);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_GREATER.nextNode(), root_1);

                        dbg.location(547,82);
                        adaptor.addChild(root_1, stream_retval.nextTree());
                        dbg.location(547,104);
                        adaptor.addChild(root_1, stream_n5.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }


                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:548:39: ( LESS_EQUAL n6= numericExpression -> ^( LESS_EQUAL $relationalExpression $n6) )
                    {
                    dbg.location(548,39);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:548:39: ( LESS_EQUAL n6= numericExpression -> ^( LESS_EQUAL $relationalExpression $n6) )
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:548:40: LESS_EQUAL n6= numericExpression
                    {
                    dbg.location(548,40);
                    LESS_EQUAL365=(Token)match(input,LESS_EQUAL,FOLLOW_LESS_EQUAL_in_relationalExpression4684);  
                    stream_LESS_EQUAL.add(LESS_EQUAL365);

                    dbg.location(548,53);
                    pushFollow(FOLLOW_numericExpression_in_relationalExpression4688);
                    n6=numericExpression();

                    state._fsp--;

                    stream_numericExpression.add(n6.getTree());


                    // AST REWRITE
                    // elements: LESS_EQUAL, n6, relationalExpression
                    // token labels: 
                    // rule labels: retval, n6
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_n6=new RewriteRuleSubtreeStream(adaptor,"rule n6",n6!=null?n6.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 548:72: -> ^( LESS_EQUAL $relationalExpression $n6)
                    {
                        dbg.location(548,75);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:548:75: ^( LESS_EQUAL $relationalExpression $n6)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(548,77);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_LESS_EQUAL.nextNode(), root_1);

                        dbg.location(548,88);
                        adaptor.addChild(root_1, stream_retval.nextTree());
                        dbg.location(548,110);
                        adaptor.addChild(root_1, stream_n6.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }


                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:549:39: ( GREATER_EQUAL n7= numericExpression -> ^( GREATER_EQUAL $relationalExpression $n7) )
                    {
                    dbg.location(549,39);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:549:39: ( GREATER_EQUAL n7= numericExpression -> ^( GREATER_EQUAL $relationalExpression $n7) )
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:549:40: GREATER_EQUAL n7= numericExpression
                    {
                    dbg.location(549,40);
                    GREATER_EQUAL366=(Token)match(input,GREATER_EQUAL,FOLLOW_GREATER_EQUAL_in_relationalExpression4742);  
                    stream_GREATER_EQUAL.add(GREATER_EQUAL366);

                    dbg.location(549,56);
                    pushFollow(FOLLOW_numericExpression_in_relationalExpression4746);
                    n7=numericExpression();

                    state._fsp--;

                    stream_numericExpression.add(n7.getTree());


                    // AST REWRITE
                    // elements: n7, relationalExpression, GREATER_EQUAL
                    // token labels: 
                    // rule labels: retval, n7
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_n7=new RewriteRuleSubtreeStream(adaptor,"rule n7",n7!=null?n7.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 549:75: -> ^( GREATER_EQUAL $relationalExpression $n7)
                    {
                        dbg.location(549,78);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:549:78: ^( GREATER_EQUAL $relationalExpression $n7)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(549,80);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_GREATER_EQUAL.nextNode(), root_1);

                        dbg.location(549,94);
                        adaptor.addChild(root_1, stream_retval.nextTree());
                        dbg.location(549,116);
                        adaptor.addChild(root_1, stream_n7.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }


                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:550:39: ( IN l2= expressionList -> ^( IN $relationalExpression $l2) )
                    {
                    dbg.location(550,39);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:550:39: ( IN l2= expressionList -> ^( IN $relationalExpression $l2) )
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:550:40: IN l2= expressionList
                    {
                    dbg.location(550,40);
                    IN367=(Token)match(input,IN,FOLLOW_IN_in_relationalExpression4802);  
                    stream_IN.add(IN367);

                    dbg.location(550,45);
                    pushFollow(FOLLOW_expressionList_in_relationalExpression4806);
                    l2=expressionList();

                    state._fsp--;

                    stream_expressionList.add(l2.getTree());


                    // AST REWRITE
                    // elements: relationalExpression, l2, IN
                    // token labels: 
                    // rule labels: retval, l2
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_l2=new RewriteRuleSubtreeStream(adaptor,"rule l2",l2!=null?l2.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 550:61: -> ^( IN $relationalExpression $l2)
                    {
                        dbg.location(550,64);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:550:64: ^( IN $relationalExpression $l2)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(550,66);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_IN.nextNode(), root_1);

                        dbg.location(550,69);
                        adaptor.addChild(root_1, stream_retval.nextTree());
                        dbg.location(550,91);
                        adaptor.addChild(root_1, stream_l2.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }


                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:551:39: ( NOT IN l3= expressionList -> ^( NOT IN $relationalExpression $l3) )
                    {
                    dbg.location(551,39);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:551:39: ( NOT IN l3= expressionList -> ^( NOT IN $relationalExpression $l3) )
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:551:40: NOT IN l3= expressionList
                    {
                    dbg.location(551,40);
                    NOT368=(Token)match(input,NOT,FOLLOW_NOT_in_relationalExpression4860);  
                    stream_NOT.add(NOT368);

                    dbg.location(551,44);
                    IN369=(Token)match(input,IN,FOLLOW_IN_in_relationalExpression4862);  
                    stream_IN.add(IN369);

                    dbg.location(551,49);
                    pushFollow(FOLLOW_expressionList_in_relationalExpression4866);
                    l3=expressionList();

                    state._fsp--;

                    stream_expressionList.add(l3.getTree());


                    // AST REWRITE
                    // elements: IN, relationalExpression, NOT, l3
                    // token labels: 
                    // rule labels: retval, l3
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_l3=new RewriteRuleSubtreeStream(adaptor,"rule l3",l3!=null?l3.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 551:65: -> ^( NOT IN $relationalExpression $l3)
                    {
                        dbg.location(551,68);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:551:68: ^( NOT IN $relationalExpression $l3)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(551,70);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_NOT.nextNode(), root_1);

                        dbg.location(551,74);
                        adaptor.addChild(root_1, stream_IN.nextNode());
                        dbg.location(551,77);
                        adaptor.addChild(root_1, stream_retval.nextTree());
                        dbg.location(551,99);
                        adaptor.addChild(root_1, stream_l3.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }


                    }
                    break;

            }
            } finally {dbg.exitSubRule(120);}


            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(552, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "relationalExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "relationalExpression"

    public static class numericExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericExpression"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:554:1: numericExpression : additiveExpression ;
    public final SparqlParser.numericExpression_return numericExpression() throws RecognitionException {
        SparqlParser.numericExpression_return retval = new SparqlParser.numericExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        SparqlParser.additiveExpression_return additiveExpression370 = null;



        try { dbg.enterRule(getGrammarFileName(), "numericExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(554, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:555:5: ( additiveExpression )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:555:7: additiveExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            dbg.location(555,7);
            pushFollow(FOLLOW_additiveExpression_in_numericExpression4900);
            additiveExpression370=additiveExpression();

            state._fsp--;

            adaptor.addChild(root_0, additiveExpression370.getTree());

            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(556, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "numericExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "numericExpression"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:558:1: additiveExpression : (m1= multiplicativeExpression -> $m1) ( ( additiveOperator m2= multiplicativeExpression -> ^( additiveOperator $additiveExpression $m2) ) | (n1= numericLiteralPositive -> ^( PLUS $additiveExpression $n1) | n2= numericLiteralNegative -> ^( PLUS $additiveExpression $n2) ) ( ( ( ASTERISK u2= unaryExpression -> ^( ASTERISK $additiveExpression $u2) ) ) | ( ( DIVIDE u2= unaryExpression -> ^( DIVIDE $additiveExpression $u2) ) ) )? )* ;
    public final SparqlParser.additiveExpression_return additiveExpression() throws RecognitionException {
        SparqlParser.additiveExpression_return retval = new SparqlParser.additiveExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ASTERISK372=null;
        Token DIVIDE373=null;
        SparqlParser.multiplicativeExpression_return m1 = null;

        SparqlParser.multiplicativeExpression_return m2 = null;

        SparqlParser.numericLiteralPositive_return n1 = null;

        SparqlParser.numericLiteralNegative_return n2 = null;

        SparqlParser.unaryExpression_return u2 = null;

        SparqlParser.additiveOperator_return additiveOperator371 = null;


        CommonTree ASTERISK372_tree=null;
        CommonTree DIVIDE373_tree=null;
        RewriteRuleTokenStream stream_ASTERISK=new RewriteRuleTokenStream(adaptor,"token ASTERISK");
        RewriteRuleTokenStream stream_DIVIDE=new RewriteRuleTokenStream(adaptor,"token DIVIDE");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        RewriteRuleSubtreeStream stream_numericLiteralNegative=new RewriteRuleSubtreeStream(adaptor,"rule numericLiteralNegative");
        RewriteRuleSubtreeStream stream_numericLiteralPositive=new RewriteRuleSubtreeStream(adaptor,"rule numericLiteralPositive");
        RewriteRuleSubtreeStream stream_additiveOperator=new RewriteRuleSubtreeStream(adaptor,"rule additiveOperator");
        RewriteRuleSubtreeStream stream_multiplicativeExpression=new RewriteRuleSubtreeStream(adaptor,"rule multiplicativeExpression");
        try { dbg.enterRule(getGrammarFileName(), "additiveExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(558, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:559:5: ( (m1= multiplicativeExpression -> $m1) ( ( additiveOperator m2= multiplicativeExpression -> ^( additiveOperator $additiveExpression $m2) ) | (n1= numericLiteralPositive -> ^( PLUS $additiveExpression $n1) | n2= numericLiteralNegative -> ^( PLUS $additiveExpression $n2) ) ( ( ( ASTERISK u2= unaryExpression -> ^( ASTERISK $additiveExpression $u2) ) ) | ( ( DIVIDE u2= unaryExpression -> ^( DIVIDE $additiveExpression $u2) ) ) )? )* )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:559:7: (m1= multiplicativeExpression -> $m1) ( ( additiveOperator m2= multiplicativeExpression -> ^( additiveOperator $additiveExpression $m2) ) | (n1= numericLiteralPositive -> ^( PLUS $additiveExpression $n1) | n2= numericLiteralNegative -> ^( PLUS $additiveExpression $n2) ) ( ( ( ASTERISK u2= unaryExpression -> ^( ASTERISK $additiveExpression $u2) ) ) | ( ( DIVIDE u2= unaryExpression -> ^( DIVIDE $additiveExpression $u2) ) ) )? )*
            {
            dbg.location(559,7);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:559:7: (m1= multiplicativeExpression -> $m1)
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:559:8: m1= multiplicativeExpression
            {
            dbg.location(559,10);
            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression4920);
            m1=multiplicativeExpression();

            state._fsp--;

            stream_multiplicativeExpression.add(m1.getTree());


            // AST REWRITE
            // elements: m1
            // token labels: 
            // rule labels: retval, m1
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_m1=new RewriteRuleSubtreeStream(adaptor,"rule m1",m1!=null?m1.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 559:36: -> $m1
            {
                dbg.location(559,39);
                adaptor.addChild(root_0, stream_m1.nextTree());

            }

            retval.tree = root_0;
            }

            dbg.location(559,44);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:559:44: ( ( additiveOperator m2= multiplicativeExpression -> ^( additiveOperator $additiveExpression $m2) ) | (n1= numericLiteralPositive -> ^( PLUS $additiveExpression $n1) | n2= numericLiteralNegative -> ^( PLUS $additiveExpression $n2) ) ( ( ( ASTERISK u2= unaryExpression -> ^( ASTERISK $additiveExpression $u2) ) ) | ( ( DIVIDE u2= unaryExpression -> ^( DIVIDE $additiveExpression $u2) ) ) )? )*
            try { dbg.enterSubRule(123);

            loop123:
            do {
                int alt123=3;
                try { dbg.enterDecision(123);

                int LA123_0 = input.LA(1);

                if ( (LA123_0==PLUS||LA123_0==MINUS) ) {
                    alt123=1;
                }
                else if ( ((LA123_0>=INTEGER_POSITIVE && LA123_0<=DOUBLE_NEGATIVE)) ) {
                    alt123=2;
                }


                } finally {dbg.exitDecision(123);}

                switch (alt123) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:559:45: ( additiveOperator m2= multiplicativeExpression -> ^( additiveOperator $additiveExpression $m2) )
            	    {
            	    dbg.location(559,45);
            	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:559:45: ( additiveOperator m2= multiplicativeExpression -> ^( additiveOperator $additiveExpression $m2) )
            	    dbg.enterAlt(1);

            	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:559:46: additiveOperator m2= multiplicativeExpression
            	    {
            	    dbg.location(559,46);
            	    pushFollow(FOLLOW_additiveOperator_in_additiveExpression4930);
            	    additiveOperator371=additiveOperator();

            	    state._fsp--;

            	    stream_additiveOperator.add(additiveOperator371.getTree());
            	    dbg.location(559,65);
            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression4934);
            	    m2=multiplicativeExpression();

            	    state._fsp--;

            	    stream_multiplicativeExpression.add(m2.getTree());


            	    // AST REWRITE
            	    // elements: additiveExpression, additiveOperator, m2
            	    // token labels: 
            	    // rule labels: retval, m2
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            	    RewriteRuleSubtreeStream stream_m2=new RewriteRuleSubtreeStream(adaptor,"rule m2",m2!=null?m2.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 559:91: -> ^( additiveOperator $additiveExpression $m2)
            	    {
            	        dbg.location(559,94);
            	        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:559:94: ^( additiveOperator $additiveExpression $m2)
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        dbg.location(559,96);
            	        root_1 = (CommonTree)adaptor.becomeRoot(stream_additiveOperator.nextNode(), root_1);

            	        dbg.location(559,113);
            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        dbg.location(559,133);
            	        adaptor.addChild(root_1, stream_m2.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;
            	    }


            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:560:48: (n1= numericLiteralPositive -> ^( PLUS $additiveExpression $n1) | n2= numericLiteralNegative -> ^( PLUS $additiveExpression $n2) ) ( ( ( ASTERISK u2= unaryExpression -> ^( ASTERISK $additiveExpression $u2) ) ) | ( ( DIVIDE u2= unaryExpression -> ^( DIVIDE $additiveExpression $u2) ) ) )?
            	    {
            	    dbg.location(560,48);
            	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:560:48: (n1= numericLiteralPositive -> ^( PLUS $additiveExpression $n1) | n2= numericLiteralNegative -> ^( PLUS $additiveExpression $n2) )
            	    int alt121=2;
            	    try { dbg.enterSubRule(121);
            	    try { dbg.enterDecision(121);

            	    int LA121_0 = input.LA(1);

            	    if ( ((LA121_0>=INTEGER_POSITIVE && LA121_0<=DOUBLE_POSITIVE)) ) {
            	        alt121=1;
            	    }
            	    else if ( ((LA121_0>=INTEGER_NEGATIVE && LA121_0<=DOUBLE_NEGATIVE)) ) {
            	        alt121=2;
            	    }
            	    else {
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 121, 0, input);

            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(121);}

            	    switch (alt121) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:560:49: n1= numericLiteralPositive
            	            {
            	            dbg.location(560,51);
            	            pushFollow(FOLLOW_numericLiteralPositive_in_additiveExpression5001);
            	            n1=numericLiteralPositive();

            	            state._fsp--;

            	            stream_numericLiteralPositive.add(n1.getTree());


            	            // AST REWRITE
            	            // elements: additiveExpression, n1
            	            // token labels: 
            	            // rule labels: n1, retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_n1=new RewriteRuleSubtreeStream(adaptor,"rule n1",n1!=null?n1.tree:null);
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 560:75: -> ^( PLUS $additiveExpression $n1)
            	            {
            	                dbg.location(560,78);
            	                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:560:78: ^( PLUS $additiveExpression $n1)
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                dbg.location(560,80);
            	                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PLUS, "PLUS"), root_1);

            	                dbg.location(560,85);
            	                adaptor.addChild(root_1, stream_retval.nextTree());
            	                dbg.location(560,105);
            	                adaptor.addChild(root_1, stream_n1.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;
            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:560:112: n2= numericLiteralNegative
            	            {
            	            dbg.location(560,114);
            	            pushFollow(FOLLOW_numericLiteralNegative_in_additiveExpression5019);
            	            n2=numericLiteralNegative();

            	            state._fsp--;

            	            stream_numericLiteralNegative.add(n2.getTree());


            	            // AST REWRITE
            	            // elements: additiveExpression, n2
            	            // token labels: 
            	            // rule labels: retval, n2
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            	            RewriteRuleSubtreeStream stream_n2=new RewriteRuleSubtreeStream(adaptor,"rule n2",n2!=null?n2.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 560:138: -> ^( PLUS $additiveExpression $n2)
            	            {
            	                dbg.location(560,141);
            	                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:560:141: ^( PLUS $additiveExpression $n2)
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                dbg.location(560,143);
            	                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PLUS, "PLUS"), root_1);

            	                dbg.location(560,148);
            	                adaptor.addChild(root_1, stream_retval.nextTree());
            	                dbg.location(560,168);
            	                adaptor.addChild(root_1, stream_n2.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;
            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(121);}

            	    dbg.location(561,46);
            	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:561:46: ( ( ( ASTERISK u2= unaryExpression -> ^( ASTERISK $additiveExpression $u2) ) ) | ( ( DIVIDE u2= unaryExpression -> ^( DIVIDE $additiveExpression $u2) ) ) )?
            	    int alt122=3;
            	    try { dbg.enterSubRule(122);
            	    try { dbg.enterDecision(122);

            	    int LA122_0 = input.LA(1);

            	    if ( (LA122_0==ASTERISK) ) {
            	        alt122=1;
            	    }
            	    else if ( (LA122_0==DIVIDE) ) {
            	        alt122=2;
            	    }
            	    } finally {dbg.exitDecision(122);}

            	    switch (alt122) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:561:47: ( ( ASTERISK u2= unaryExpression -> ^( ASTERISK $additiveExpression $u2) ) )
            	            {
            	            dbg.location(561,47);
            	            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:561:47: ( ( ASTERISK u2= unaryExpression -> ^( ASTERISK $additiveExpression $u2) ) )
            	            dbg.enterAlt(1);

            	            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:561:48: ( ASTERISK u2= unaryExpression -> ^( ASTERISK $additiveExpression $u2) )
            	            {
            	            dbg.location(561,48);
            	            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:561:48: ( ASTERISK u2= unaryExpression -> ^( ASTERISK $additiveExpression $u2) )
            	            dbg.enterAlt(1);

            	            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:561:49: ASTERISK u2= unaryExpression
            	            {
            	            dbg.location(561,49);
            	            ASTERISK372=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_additiveExpression5083);  
            	            stream_ASTERISK.add(ASTERISK372);

            	            dbg.location(561,60);
            	            pushFollow(FOLLOW_unaryExpression_in_additiveExpression5087);
            	            u2=unaryExpression();

            	            state._fsp--;

            	            stream_unaryExpression.add(u2.getTree());


            	            // AST REWRITE
            	            // elements: additiveExpression, ASTERISK, u2
            	            // token labels: 
            	            // rule labels: retval, u2
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            	            RewriteRuleSubtreeStream stream_u2=new RewriteRuleSubtreeStream(adaptor,"rule u2",u2!=null?u2.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 561:77: -> ^( ASTERISK $additiveExpression $u2)
            	            {
            	                dbg.location(561,80);
            	                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:561:80: ^( ASTERISK $additiveExpression $u2)
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                dbg.location(561,82);
            	                root_1 = (CommonTree)adaptor.becomeRoot(stream_ASTERISK.nextNode(), root_1);

            	                dbg.location(561,91);
            	                adaptor.addChild(root_1, stream_retval.nextTree());
            	                dbg.location(561,111);
            	                adaptor.addChild(root_1, stream_u2.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;
            	            }


            	            }


            	            }
            	            break;
            	        case 2 :
            	            dbg.enterAlt(2);

            	            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:562:48: ( ( DIVIDE u2= unaryExpression -> ^( DIVIDE $additiveExpression $u2) ) )
            	            {
            	            dbg.location(562,48);
            	            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:562:48: ( ( DIVIDE u2= unaryExpression -> ^( DIVIDE $additiveExpression $u2) ) )
            	            dbg.enterAlt(1);

            	            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:562:49: ( DIVIDE u2= unaryExpression -> ^( DIVIDE $additiveExpression $u2) )
            	            {
            	            dbg.location(562,49);
            	            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:562:49: ( DIVIDE u2= unaryExpression -> ^( DIVIDE $additiveExpression $u2) )
            	            dbg.enterAlt(1);

            	            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:562:50: DIVIDE u2= unaryExpression
            	            {
            	            dbg.location(562,50);
            	            DIVIDE373=(Token)match(input,DIVIDE,FOLLOW_DIVIDE_in_additiveExpression5153);  
            	            stream_DIVIDE.add(DIVIDE373);

            	            dbg.location(562,59);
            	            pushFollow(FOLLOW_unaryExpression_in_additiveExpression5157);
            	            u2=unaryExpression();

            	            state._fsp--;

            	            stream_unaryExpression.add(u2.getTree());


            	            // AST REWRITE
            	            // elements: u2, additiveExpression, DIVIDE
            	            // token labels: 
            	            // rule labels: retval, u2
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            	            RewriteRuleSubtreeStream stream_u2=new RewriteRuleSubtreeStream(adaptor,"rule u2",u2!=null?u2.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 562:76: -> ^( DIVIDE $additiveExpression $u2)
            	            {
            	                dbg.location(562,79);
            	                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:562:79: ^( DIVIDE $additiveExpression $u2)
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                dbg.location(562,81);
            	                root_1 = (CommonTree)adaptor.becomeRoot(stream_DIVIDE.nextNode(), root_1);

            	                dbg.location(562,88);
            	                adaptor.addChild(root_1, stream_retval.nextTree());
            	                dbg.location(562,108);
            	                adaptor.addChild(root_1, stream_u2.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;
            	            }


            	            }


            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(122);}


            	    }
            	    break;

            	default :
            	    break loop123;
                }
            } while (true);
            } finally {dbg.exitSubRule(123);}


            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(563, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "additiveExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class additiveOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveOperator"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:565:1: additiveOperator : ( PLUS | MINUS );
    public final SparqlParser.additiveOperator_return additiveOperator() throws RecognitionException {
        SparqlParser.additiveOperator_return retval = new SparqlParser.additiveOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set374=null;

        CommonTree set374_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "additiveOperator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(565, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:566:5: ( PLUS | MINUS )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            dbg.location(566,5);
            set374=(Token)input.LT(1);
            if ( input.LA(1)==PLUS||input.LA(1)==MINUS ) {
                input.consume();
                adaptor.addChild(root_0, (CommonTree)adaptor.create(set374));
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(567, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "additiveOperator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "additiveOperator"

    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicativeExpression"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:569:1: multiplicativeExpression : (u1= unaryExpression -> $u1) ( multiplicativeOperator u2= unaryExpression -> ^( multiplicativeOperator $multiplicativeExpression $u2) )* ;
    public final SparqlParser.multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
        SparqlParser.multiplicativeExpression_return retval = new SparqlParser.multiplicativeExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        SparqlParser.unaryExpression_return u1 = null;

        SparqlParser.unaryExpression_return u2 = null;

        SparqlParser.multiplicativeOperator_return multiplicativeOperator375 = null;


        RewriteRuleSubtreeStream stream_multiplicativeOperator=new RewriteRuleSubtreeStream(adaptor,"rule multiplicativeOperator");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        try { dbg.enterRule(getGrammarFileName(), "multiplicativeExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(569, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:570:5: ( (u1= unaryExpression -> $u1) ( multiplicativeOperator u2= unaryExpression -> ^( multiplicativeOperator $multiplicativeExpression $u2) )* )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:570:7: (u1= unaryExpression -> $u1) ( multiplicativeOperator u2= unaryExpression -> ^( multiplicativeOperator $multiplicativeExpression $u2) )*
            {
            dbg.location(570,7);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:570:7: (u1= unaryExpression -> $u1)
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:570:8: u1= unaryExpression
            {
            dbg.location(570,10);
            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression5223);
            u1=unaryExpression();

            state._fsp--;

            stream_unaryExpression.add(u1.getTree());


            // AST REWRITE
            // elements: u1
            // token labels: 
            // rule labels: retval, u1
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_u1=new RewriteRuleSubtreeStream(adaptor,"rule u1",u1!=null?u1.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 570:27: -> $u1
            {
                dbg.location(570,30);
                adaptor.addChild(root_0, stream_u1.nextTree());

            }

            retval.tree = root_0;
            }

            dbg.location(570,35);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:570:35: ( multiplicativeOperator u2= unaryExpression -> ^( multiplicativeOperator $multiplicativeExpression $u2) )*
            try { dbg.enterSubRule(124);

            loop124:
            do {
                int alt124=2;
                try { dbg.enterDecision(124);

                int LA124_0 = input.LA(1);

                if ( (LA124_0==ASTERISK||LA124_0==DIVIDE) ) {
                    alt124=1;
                }


                } finally {dbg.exitDecision(124);}

                switch (alt124) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:570:36: multiplicativeOperator u2= unaryExpression
            	    {
            	    dbg.location(570,36);
            	    pushFollow(FOLLOW_multiplicativeOperator_in_multiplicativeExpression5232);
            	    multiplicativeOperator375=multiplicativeOperator();

            	    state._fsp--;

            	    stream_multiplicativeOperator.add(multiplicativeOperator375.getTree());
            	    dbg.location(570,61);
            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression5236);
            	    u2=unaryExpression();

            	    state._fsp--;

            	    stream_unaryExpression.add(u2.getTree());


            	    // AST REWRITE
            	    // elements: u2, multiplicativeExpression, multiplicativeOperator
            	    // token labels: 
            	    // rule labels: retval, u2
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            	    RewriteRuleSubtreeStream stream_u2=new RewriteRuleSubtreeStream(adaptor,"rule u2",u2!=null?u2.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 570:78: -> ^( multiplicativeOperator $multiplicativeExpression $u2)
            	    {
            	        dbg.location(570,81);
            	        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:570:81: ^( multiplicativeOperator $multiplicativeExpression $u2)
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        dbg.location(570,83);
            	        root_1 = (CommonTree)adaptor.becomeRoot(stream_multiplicativeOperator.nextNode(), root_1);

            	        dbg.location(570,106);
            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        dbg.location(570,132);
            	        adaptor.addChild(root_1, stream_u2.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;
            	    }
            	    break;

            	default :
            	    break loop124;
                }
            } while (true);
            } finally {dbg.exitSubRule(124);}


            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(571, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "multiplicativeExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "multiplicativeExpression"

    public static class multiplicativeOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicativeOperator"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:573:1: multiplicativeOperator : ( ASTERISK | DIVIDE );
    public final SparqlParser.multiplicativeOperator_return multiplicativeOperator() throws RecognitionException {
        SparqlParser.multiplicativeOperator_return retval = new SparqlParser.multiplicativeOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set376=null;

        CommonTree set376_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "multiplicativeOperator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(573, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:574:5: ( ASTERISK | DIVIDE )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            dbg.location(574,5);
            set376=(Token)input.LT(1);
            if ( input.LA(1)==ASTERISK||input.LA(1)==DIVIDE ) {
                input.consume();
                adaptor.addChild(root_0, (CommonTree)adaptor.create(set376));
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(575, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "multiplicativeOperator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "multiplicativeOperator"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:577:1: unaryExpression : ( NEGATION primaryExpression -> ^( UNARY NEGATION primaryExpression ) | PLUS primaryExpression -> ^( UNARY PLUS primaryExpression ) | MINUS primaryExpression -> ^( UNARY MINUS primaryExpression ) | primaryExpression );
    public final SparqlParser.unaryExpression_return unaryExpression() throws RecognitionException {
        SparqlParser.unaryExpression_return retval = new SparqlParser.unaryExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NEGATION377=null;
        Token PLUS379=null;
        Token MINUS381=null;
        SparqlParser.primaryExpression_return primaryExpression378 = null;

        SparqlParser.primaryExpression_return primaryExpression380 = null;

        SparqlParser.primaryExpression_return primaryExpression382 = null;

        SparqlParser.primaryExpression_return primaryExpression383 = null;


        CommonTree NEGATION377_tree=null;
        CommonTree PLUS379_tree=null;
        CommonTree MINUS381_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_NEGATION=new RewriteRuleTokenStream(adaptor,"token NEGATION");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
        try { dbg.enterRule(getGrammarFileName(), "unaryExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(577, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:578:5: ( NEGATION primaryExpression -> ^( UNARY NEGATION primaryExpression ) | PLUS primaryExpression -> ^( UNARY PLUS primaryExpression ) | MINUS primaryExpression -> ^( UNARY MINUS primaryExpression ) | primaryExpression )
            int alt125=4;
            try { dbg.enterDecision(125);

            switch ( input.LA(1) ) {
            case NEGATION:
                {
                alt125=1;
                }
                break;
            case PLUS:
                {
                alt125=2;
                }
                break;
            case MINUS:
                {
                alt125=3;
                }
                break;
            case IRI_REF:
            case PNAME_NS:
            case OPEN_BRACE:
            case INTEGER:
            case VAR1:
            case VAR2:
            case NOT:
            case STR:
            case LANG:
            case LANGMATCHES:
            case DATATYPE:
            case BOUND:
            case IRI:
            case URI:
            case BNODE:
            case RAND:
            case ABS:
            case CEIL:
            case FLOOR:
            case ROUND:
            case CONCAT:
            case STRLEN:
            case UCASE:
            case LCASE:
            case ENCODE_FOR_URI:
            case CONTAINS:
            case STRSTARTS:
            case STRENDS:
            case STRBEFORE:
            case STRAFTER:
            case YEAR:
            case MONTH:
            case DAY:
            case HOURS:
            case MINUTES:
            case SECONDS:
            case TIMEZONE:
            case TZ:
            case NOW:
            case MD5:
            case SHA1:
            case SHA256:
            case SHA384:
            case SHA512:
            case COALESCE:
            case IF:
            case STRLANG:
            case STRDT:
            case SAMETERM:
            case ISIRI:
            case ISURI:
            case ISBLANK:
            case ISLITERAL:
            case ISNUMERIC:
            case REGEX:
            case SUBSTR:
            case REPLACE:
            case EXISTS:
            case COUNT:
            case SUM:
            case MIN:
            case MAX:
            case AVG:
            case SAMPLE:
            case GROUP_CONCAT:
            case DECIMAL:
            case DOUBLE:
            case INTEGER_POSITIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE_POSITIVE:
            case INTEGER_NEGATIVE:
            case DECIMAL_NEGATIVE:
            case DOUBLE_NEGATIVE:
            case TRUE:
            case FALSE:
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
            case PNAME_LN:
                {
                alt125=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 125, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(125);}

            switch (alt125) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:578:7: NEGATION primaryExpression
                    {
                    dbg.location(578,7);
                    NEGATION377=(Token)match(input,NEGATION,FOLLOW_NEGATION_in_unaryExpression5292);  
                    stream_NEGATION.add(NEGATION377);

                    dbg.location(578,16);
                    pushFollow(FOLLOW_primaryExpression_in_unaryExpression5294);
                    primaryExpression378=primaryExpression();

                    state._fsp--;

                    stream_primaryExpression.add(primaryExpression378.getTree());


                    // AST REWRITE
                    // elements: primaryExpression, NEGATION
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 578:34: -> ^( UNARY NEGATION primaryExpression )
                    {
                        dbg.location(578,37);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:578:37: ^( UNARY NEGATION primaryExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(578,39);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY, "UNARY"), root_1);

                        dbg.location(578,45);
                        adaptor.addChild(root_1, stream_NEGATION.nextNode());
                        dbg.location(578,54);
                        adaptor.addChild(root_1, stream_primaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:579:7: PLUS primaryExpression
                    {
                    dbg.location(579,7);
                    PLUS379=(Token)match(input,PLUS,FOLLOW_PLUS_in_unaryExpression5312);  
                    stream_PLUS.add(PLUS379);

                    dbg.location(579,12);
                    pushFollow(FOLLOW_primaryExpression_in_unaryExpression5314);
                    primaryExpression380=primaryExpression();

                    state._fsp--;

                    stream_primaryExpression.add(primaryExpression380.getTree());


                    // AST REWRITE
                    // elements: primaryExpression, PLUS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 579:30: -> ^( UNARY PLUS primaryExpression )
                    {
                        dbg.location(579,33);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:579:33: ^( UNARY PLUS primaryExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(579,35);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY, "UNARY"), root_1);

                        dbg.location(579,41);
                        adaptor.addChild(root_1, stream_PLUS.nextNode());
                        dbg.location(579,46);
                        adaptor.addChild(root_1, stream_primaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:580:7: MINUS primaryExpression
                    {
                    dbg.location(580,7);
                    MINUS381=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression5332);  
                    stream_MINUS.add(MINUS381);

                    dbg.location(580,13);
                    pushFollow(FOLLOW_primaryExpression_in_unaryExpression5334);
                    primaryExpression382=primaryExpression();

                    state._fsp--;

                    stream_primaryExpression.add(primaryExpression382.getTree());


                    // AST REWRITE
                    // elements: MINUS, primaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 580:31: -> ^( UNARY MINUS primaryExpression )
                    {
                        dbg.location(580,34);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:580:34: ^( UNARY MINUS primaryExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(580,36);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY, "UNARY"), root_1);

                        dbg.location(580,42);
                        adaptor.addChild(root_1, stream_MINUS.nextNode());
                        dbg.location(580,48);
                        adaptor.addChild(root_1, stream_primaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:581:7: primaryExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(581,7);
                    pushFollow(FOLLOW_primaryExpression_in_unaryExpression5352);
                    primaryExpression383=primaryExpression();

                    state._fsp--;

                    adaptor.addChild(root_0, primaryExpression383.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(582, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unaryExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class primaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primaryExpression"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:584:1: primaryExpression : ( brackettedExpression -> ^( BRACKETS brackettedExpression ) | builtInCall -> ^( BUILTINCALL builtInCall ) | iriRefOrFunction -> ^( IRIORREF iriRefOrFunction ) | rdfLiteral | numericLiteral -> ^( NUMERICLITERAL numericLiteral ) | booleanLiteral -> ^( BOOLEANLITERAL booleanLiteral ) | var -> ^( VAR var ) | aggregate -> ^( AGGREGATE aggregate ) );
    public final SparqlParser.primaryExpression_return primaryExpression() throws RecognitionException {
        SparqlParser.primaryExpression_return retval = new SparqlParser.primaryExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        SparqlParser.brackettedExpression_return brackettedExpression384 = null;

        SparqlParser.builtInCall_return builtInCall385 = null;

        SparqlParser.iriRefOrFunction_return iriRefOrFunction386 = null;

        SparqlParser.rdfLiteral_return rdfLiteral387 = null;

        SparqlParser.numericLiteral_return numericLiteral388 = null;

        SparqlParser.booleanLiteral_return booleanLiteral389 = null;

        SparqlParser.var_return var390 = null;

        SparqlParser.aggregate_return aggregate391 = null;


        RewriteRuleSubtreeStream stream_aggregate=new RewriteRuleSubtreeStream(adaptor,"rule aggregate");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        RewriteRuleSubtreeStream stream_booleanLiteral=new RewriteRuleSubtreeStream(adaptor,"rule booleanLiteral");
        RewriteRuleSubtreeStream stream_builtInCall=new RewriteRuleSubtreeStream(adaptor,"rule builtInCall");
        RewriteRuleSubtreeStream stream_numericLiteral=new RewriteRuleSubtreeStream(adaptor,"rule numericLiteral");
        RewriteRuleSubtreeStream stream_iriRefOrFunction=new RewriteRuleSubtreeStream(adaptor,"rule iriRefOrFunction");
        RewriteRuleSubtreeStream stream_brackettedExpression=new RewriteRuleSubtreeStream(adaptor,"rule brackettedExpression");
        try { dbg.enterRule(getGrammarFileName(), "primaryExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(584, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:585:5: ( brackettedExpression -> ^( BRACKETS brackettedExpression ) | builtInCall -> ^( BUILTINCALL builtInCall ) | iriRefOrFunction -> ^( IRIORREF iriRefOrFunction ) | rdfLiteral | numericLiteral -> ^( NUMERICLITERAL numericLiteral ) | booleanLiteral -> ^( BOOLEANLITERAL booleanLiteral ) | var -> ^( VAR var ) | aggregate -> ^( AGGREGATE aggregate ) )
            int alt126=8;
            try { dbg.enterDecision(126);

            switch ( input.LA(1) ) {
            case OPEN_BRACE:
                {
                alt126=1;
                }
                break;
            case NOT:
            case STR:
            case LANG:
            case LANGMATCHES:
            case DATATYPE:
            case BOUND:
            case IRI:
            case URI:
            case BNODE:
            case RAND:
            case ABS:
            case CEIL:
            case FLOOR:
            case ROUND:
            case CONCAT:
            case STRLEN:
            case UCASE:
            case LCASE:
            case ENCODE_FOR_URI:
            case CONTAINS:
            case STRSTARTS:
            case STRENDS:
            case STRBEFORE:
            case STRAFTER:
            case YEAR:
            case MONTH:
            case DAY:
            case HOURS:
            case MINUTES:
            case SECONDS:
            case TIMEZONE:
            case TZ:
            case NOW:
            case MD5:
            case SHA1:
            case SHA256:
            case SHA384:
            case SHA512:
            case COALESCE:
            case IF:
            case STRLANG:
            case STRDT:
            case SAMETERM:
            case ISIRI:
            case ISURI:
            case ISBLANK:
            case ISLITERAL:
            case ISNUMERIC:
            case REGEX:
            case SUBSTR:
            case REPLACE:
            case EXISTS:
                {
                alt126=2;
                }
                break;
            case IRI_REF:
            case PNAME_NS:
            case PNAME_LN:
                {
                alt126=3;
                }
                break;
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
                {
                alt126=4;
                }
                break;
            case INTEGER:
            case DECIMAL:
            case DOUBLE:
            case INTEGER_POSITIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE_POSITIVE:
            case INTEGER_NEGATIVE:
            case DECIMAL_NEGATIVE:
            case DOUBLE_NEGATIVE:
                {
                alt126=5;
                }
                break;
            case TRUE:
            case FALSE:
                {
                alt126=6;
                }
                break;
            case VAR1:
            case VAR2:
                {
                alt126=7;
                }
                break;
            case COUNT:
            case SUM:
            case MIN:
            case MAX:
            case AVG:
            case SAMPLE:
            case GROUP_CONCAT:
                {
                alt126=8;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 126, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(126);}

            switch (alt126) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:585:7: brackettedExpression
                    {
                    dbg.location(585,7);
                    pushFollow(FOLLOW_brackettedExpression_in_primaryExpression5370);
                    brackettedExpression384=brackettedExpression();

                    state._fsp--;

                    stream_brackettedExpression.add(brackettedExpression384.getTree());


                    // AST REWRITE
                    // elements: brackettedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 585:30: -> ^( BRACKETS brackettedExpression )
                    {
                        dbg.location(585,33);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:585:33: ^( BRACKETS brackettedExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(585,35);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BRACKETS, "BRACKETS"), root_1);

                        dbg.location(585,44);
                        adaptor.addChild(root_1, stream_brackettedExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:586:7: builtInCall
                    {
                    dbg.location(586,7);
                    pushFollow(FOLLOW_builtInCall_in_primaryExpression5388);
                    builtInCall385=builtInCall();

                    state._fsp--;

                    stream_builtInCall.add(builtInCall385.getTree());


                    // AST REWRITE
                    // elements: builtInCall
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 586:20: -> ^( BUILTINCALL builtInCall )
                    {
                        dbg.location(586,23);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:586:23: ^( BUILTINCALL builtInCall )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(586,25);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILTINCALL, "BUILTINCALL"), root_1);

                        dbg.location(586,37);
                        adaptor.addChild(root_1, stream_builtInCall.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:587:7: iriRefOrFunction
                    {
                    dbg.location(587,7);
                    pushFollow(FOLLOW_iriRefOrFunction_in_primaryExpression5405);
                    iriRefOrFunction386=iriRefOrFunction();

                    state._fsp--;

                    stream_iriRefOrFunction.add(iriRefOrFunction386.getTree());


                    // AST REWRITE
                    // elements: iriRefOrFunction
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 587:24: -> ^( IRIORREF iriRefOrFunction )
                    {
                        dbg.location(587,27);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:587:27: ^( IRIORREF iriRefOrFunction )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(587,29);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IRIORREF, "IRIORREF"), root_1);

                        dbg.location(587,38);
                        adaptor.addChild(root_1, stream_iriRefOrFunction.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:588:7: rdfLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(588,7);
                    pushFollow(FOLLOW_rdfLiteral_in_primaryExpression5421);
                    rdfLiteral387=rdfLiteral();

                    state._fsp--;

                    adaptor.addChild(root_0, rdfLiteral387.getTree());

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:589:7: numericLiteral
                    {
                    dbg.location(589,7);
                    pushFollow(FOLLOW_numericLiteral_in_primaryExpression5430);
                    numericLiteral388=numericLiteral();

                    state._fsp--;

                    stream_numericLiteral.add(numericLiteral388.getTree());


                    // AST REWRITE
                    // elements: numericLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 589:22: -> ^( NUMERICLITERAL numericLiteral )
                    {
                        dbg.location(589,25);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:589:25: ^( NUMERICLITERAL numericLiteral )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(589,27);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERICLITERAL, "NUMERICLITERAL"), root_1);

                        dbg.location(589,42);
                        adaptor.addChild(root_1, stream_numericLiteral.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:590:7: booleanLiteral
                    {
                    dbg.location(590,7);
                    pushFollow(FOLLOW_booleanLiteral_in_primaryExpression5446);
                    booleanLiteral389=booleanLiteral();

                    state._fsp--;

                    stream_booleanLiteral.add(booleanLiteral389.getTree());


                    // AST REWRITE
                    // elements: booleanLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 590:22: -> ^( BOOLEANLITERAL booleanLiteral )
                    {
                        dbg.location(590,25);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:590:25: ^( BOOLEANLITERAL booleanLiteral )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(590,27);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOLEANLITERAL, "BOOLEANLITERAL"), root_1);

                        dbg.location(590,42);
                        adaptor.addChild(root_1, stream_booleanLiteral.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:591:7: var
                    {
                    dbg.location(591,7);
                    pushFollow(FOLLOW_var_in_primaryExpression5462);
                    var390=var();

                    state._fsp--;

                    stream_var.add(var390.getTree());


                    // AST REWRITE
                    // elements: var
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 591:11: -> ^( VAR var )
                    {
                        dbg.location(591,14);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:591:14: ^( VAR var )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(591,16);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR, "VAR"), root_1);

                        dbg.location(591,20);
                        adaptor.addChild(root_1, stream_var.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:592:7: aggregate
                    {
                    dbg.location(592,7);
                    pushFollow(FOLLOW_aggregate_in_primaryExpression5478);
                    aggregate391=aggregate();

                    state._fsp--;

                    stream_aggregate.add(aggregate391.getTree());


                    // AST REWRITE
                    // elements: aggregate
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 592:17: -> ^( AGGREGATE aggregate )
                    {
                        dbg.location(592,20);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:592:20: ^( AGGREGATE aggregate )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(592,22);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AGGREGATE, "AGGREGATE"), root_1);

                        dbg.location(592,32);
                        adaptor.addChild(root_1, stream_aggregate.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(593, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "primaryExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "primaryExpression"

    public static class brackettedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "brackettedExpression"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:595:1: brackettedExpression : OPEN_BRACE expression CLOSE_BRACE -> ^( BRACKETTED_EXPRESSION expression ) ;
    public final SparqlParser.brackettedExpression_return brackettedExpression() throws RecognitionException {
        SparqlParser.brackettedExpression_return retval = new SparqlParser.brackettedExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token OPEN_BRACE392=null;
        Token CLOSE_BRACE394=null;
        SparqlParser.expression_return expression393 = null;


        CommonTree OPEN_BRACE392_tree=null;
        CommonTree CLOSE_BRACE394_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try { dbg.enterRule(getGrammarFileName(), "brackettedExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(595, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:596:5: ( OPEN_BRACE expression CLOSE_BRACE -> ^( BRACKETTED_EXPRESSION expression ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:596:7: OPEN_BRACE expression CLOSE_BRACE
            {
            dbg.location(596,7);
            OPEN_BRACE392=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_brackettedExpression5503);  
            stream_OPEN_BRACE.add(OPEN_BRACE392);

            dbg.location(596,18);
            pushFollow(FOLLOW_expression_in_brackettedExpression5505);
            expression393=expression();

            state._fsp--;

            stream_expression.add(expression393.getTree());
            dbg.location(596,29);
            CLOSE_BRACE394=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_brackettedExpression5507);  
            stream_CLOSE_BRACE.add(CLOSE_BRACE394);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 596:41: -> ^( BRACKETTED_EXPRESSION expression )
            {
                dbg.location(596,44);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:596:44: ^( BRACKETTED_EXPRESSION expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(596,46);
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BRACKETTED_EXPRESSION, "BRACKETTED_EXPRESSION"), root_1);

                dbg.location(596,68);
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(597, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "brackettedExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "brackettedExpression"

    public static class builtInCall_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtInCall"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:599:1: builtInCall : ( STR OPEN_BRACE expression CLOSE_BRACE -> ^( STR expression ) | LANG OPEN_BRACE expression CLOSE_BRACE -> ^( LANG expression ) | LANGMATCHES OPEN_BRACE expression COMMA expression CLOSE_BRACE -> ^( LANGMATCHES ( expression )+ ) | DATATYPE OPEN_BRACE expression CLOSE_BRACE -> ^( DATATYPE expression ) | BOUND OPEN_BRACE var CLOSE_BRACE -> ^( BOUND var ) | IRI OPEN_BRACE expression CLOSE_BRACE -> ^( IRI expression ) | URI OPEN_BRACE expression CLOSE_BRACE -> ^( URI expression ) | BNODE ( OPEN_BRACE expression CLOSE_BRACE ) -> ^( BNODE expression ) | BNODE nil -> BNODE | RAND nil -> RAND | ABS OPEN_BRACE expression CLOSE_BRACE -> ^( ABS expression ) | CEIL OPEN_BRACE expression CLOSE_BRACE -> ^( CEIL expression ) | FLOOR OPEN_BRACE expression CLOSE_BRACE -> ^( FLOOR expression ) | ROUND OPEN_BRACE expression CLOSE_BRACE -> ^( ROUND expression ) | CONCAT expressionList -> ^( CONCAT expressionList ) | subStringExpression -> subStringExpression | strReplaceExpression -> strReplaceExpression | STRLEN OPEN_BRACE expression CLOSE_BRACE -> ^( STRLEN expression ) | UCASE OPEN_BRACE expression CLOSE_BRACE -> ^( UCASE expression ) | LCASE OPEN_BRACE expression CLOSE_BRACE -> ^( LCASE expression ) | ENCODE_FOR_URI OPEN_BRACE expression CLOSE_BRACE -> ^( ENCODE_FOR_URI expression ) | CONTAINS OPEN_BRACE expression COMMA expression CLOSE_BRACE -> ^( CONTAINS expression expression ) | STRSTARTS OPEN_BRACE expression COMMA expression CLOSE_BRACE -> ^( STRSTARTS expression expression ) | STRENDS OPEN_BRACE expression COMMA expression CLOSE_BRACE -> ^( STRENDS expression expression ) | STRBEFORE OPEN_BRACE expression COMMA expression CLOSE_BRACE -> ^( STRBEFORE expression expression ) | STRAFTER OPEN_BRACE expression COMMA expression CLOSE_BRACE -> ^( STRAFTER expression expression ) | YEAR OPEN_BRACE expression CLOSE_BRACE -> ^( YEAR expression ) | MONTH OPEN_BRACE expression CLOSE_BRACE -> ^( MONTH expression ) | DAY OPEN_BRACE expression CLOSE_BRACE -> ^( DAY expression ) | HOURS OPEN_BRACE expression CLOSE_BRACE -> ^( HOURS expression ) | MINUTES OPEN_BRACE expression CLOSE_BRACE -> ^( MINUTES expression ) | SECONDS OPEN_BRACE expression CLOSE_BRACE -> ^( SECONDS expression ) | TIMEZONE OPEN_BRACE expression CLOSE_BRACE -> ^( TIMEZONE expression ) | TZ OPEN_BRACE expression CLOSE_BRACE -> ^( TZ expression ) | NOW nil -> NOW | MD5 OPEN_BRACE expression CLOSE_BRACE -> ^( MD5 expression ) | SHA1 OPEN_BRACE expression CLOSE_BRACE -> ^( SHA1 expression ) | SHA256 OPEN_BRACE expression CLOSE_BRACE -> ^( SHA256 expression ) | SHA384 OPEN_BRACE expression CLOSE_BRACE -> ^( SHA384 expression ) | SHA512 OPEN_BRACE expression CLOSE_BRACE -> ^( SHA512 expression ) | COALESCE expressionList -> ^( COALESCE expressionList ) | IF OPEN_BRACE e1= expression COMMA e2= expression COMMA e3= expression CLOSE_BRACE -> ^( IF $e1 $e2 $e3) | STRLANG OPEN_BRACE expression COMMA expression CLOSE_BRACE -> ^( STRLANG expression expression ) | STRDT OPEN_BRACE expression COMMA expression CLOSE_BRACE -> ^( STRDT expression expression ) | SAMETERM OPEN_BRACE expression COMMA expression CLOSE_BRACE -> ^( SAMETERM expression expression ) | ISIRI OPEN_BRACE expression CLOSE_BRACE -> ^( ISIRI expression ) | ISURI OPEN_BRACE expression CLOSE_BRACE -> ^( ISURI expression ) | ISBLANK OPEN_BRACE expression CLOSE_BRACE -> ^( ISBLANK expression ) | ISLITERAL OPEN_BRACE expression CLOSE_BRACE -> ^( ISLITERAL expression ) | ISNUMERIC OPEN_BRACE expression CLOSE_BRACE -> ^( ISNUMERIC expression ) | regexExpression -> regexExpression | existsFunction -> existsFunction | notExistsFunction -> notExistsFunction );
    public final SparqlParser.builtInCall_return builtInCall() throws RecognitionException {
        SparqlParser.builtInCall_return retval = new SparqlParser.builtInCall_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STR395=null;
        Token OPEN_BRACE396=null;
        Token CLOSE_BRACE398=null;
        Token LANG399=null;
        Token OPEN_BRACE400=null;
        Token CLOSE_BRACE402=null;
        Token LANGMATCHES403=null;
        Token OPEN_BRACE404=null;
        Token COMMA406=null;
        Token CLOSE_BRACE408=null;
        Token DATATYPE409=null;
        Token OPEN_BRACE410=null;
        Token CLOSE_BRACE412=null;
        Token BOUND413=null;
        Token OPEN_BRACE414=null;
        Token CLOSE_BRACE416=null;
        Token IRI417=null;
        Token OPEN_BRACE418=null;
        Token CLOSE_BRACE420=null;
        Token URI421=null;
        Token OPEN_BRACE422=null;
        Token CLOSE_BRACE424=null;
        Token BNODE425=null;
        Token OPEN_BRACE426=null;
        Token CLOSE_BRACE428=null;
        Token BNODE429=null;
        Token RAND431=null;
        Token ABS433=null;
        Token OPEN_BRACE434=null;
        Token CLOSE_BRACE436=null;
        Token CEIL437=null;
        Token OPEN_BRACE438=null;
        Token CLOSE_BRACE440=null;
        Token FLOOR441=null;
        Token OPEN_BRACE442=null;
        Token CLOSE_BRACE444=null;
        Token ROUND445=null;
        Token OPEN_BRACE446=null;
        Token CLOSE_BRACE448=null;
        Token CONCAT449=null;
        Token STRLEN453=null;
        Token OPEN_BRACE454=null;
        Token CLOSE_BRACE456=null;
        Token UCASE457=null;
        Token OPEN_BRACE458=null;
        Token CLOSE_BRACE460=null;
        Token LCASE461=null;
        Token OPEN_BRACE462=null;
        Token CLOSE_BRACE464=null;
        Token ENCODE_FOR_URI465=null;
        Token OPEN_BRACE466=null;
        Token CLOSE_BRACE468=null;
        Token CONTAINS469=null;
        Token OPEN_BRACE470=null;
        Token COMMA472=null;
        Token CLOSE_BRACE474=null;
        Token STRSTARTS475=null;
        Token OPEN_BRACE476=null;
        Token COMMA478=null;
        Token CLOSE_BRACE480=null;
        Token STRENDS481=null;
        Token OPEN_BRACE482=null;
        Token COMMA484=null;
        Token CLOSE_BRACE486=null;
        Token STRBEFORE487=null;
        Token OPEN_BRACE488=null;
        Token COMMA490=null;
        Token CLOSE_BRACE492=null;
        Token STRAFTER493=null;
        Token OPEN_BRACE494=null;
        Token COMMA496=null;
        Token CLOSE_BRACE498=null;
        Token YEAR499=null;
        Token OPEN_BRACE500=null;
        Token CLOSE_BRACE502=null;
        Token MONTH503=null;
        Token OPEN_BRACE504=null;
        Token CLOSE_BRACE506=null;
        Token DAY507=null;
        Token OPEN_BRACE508=null;
        Token CLOSE_BRACE510=null;
        Token HOURS511=null;
        Token OPEN_BRACE512=null;
        Token CLOSE_BRACE514=null;
        Token MINUTES515=null;
        Token OPEN_BRACE516=null;
        Token CLOSE_BRACE518=null;
        Token SECONDS519=null;
        Token OPEN_BRACE520=null;
        Token CLOSE_BRACE522=null;
        Token TIMEZONE523=null;
        Token OPEN_BRACE524=null;
        Token CLOSE_BRACE526=null;
        Token TZ527=null;
        Token OPEN_BRACE528=null;
        Token CLOSE_BRACE530=null;
        Token NOW531=null;
        Token MD5533=null;
        Token OPEN_BRACE534=null;
        Token CLOSE_BRACE536=null;
        Token SHA1537=null;
        Token OPEN_BRACE538=null;
        Token CLOSE_BRACE540=null;
        Token SHA256541=null;
        Token OPEN_BRACE542=null;
        Token CLOSE_BRACE544=null;
        Token SHA384545=null;
        Token OPEN_BRACE546=null;
        Token CLOSE_BRACE548=null;
        Token SHA512549=null;
        Token OPEN_BRACE550=null;
        Token CLOSE_BRACE552=null;
        Token COALESCE553=null;
        Token IF555=null;
        Token OPEN_BRACE556=null;
        Token COMMA557=null;
        Token COMMA558=null;
        Token CLOSE_BRACE559=null;
        Token STRLANG560=null;
        Token OPEN_BRACE561=null;
        Token COMMA563=null;
        Token CLOSE_BRACE565=null;
        Token STRDT566=null;
        Token OPEN_BRACE567=null;
        Token COMMA569=null;
        Token CLOSE_BRACE571=null;
        Token SAMETERM572=null;
        Token OPEN_BRACE573=null;
        Token COMMA575=null;
        Token CLOSE_BRACE577=null;
        Token ISIRI578=null;
        Token OPEN_BRACE579=null;
        Token CLOSE_BRACE581=null;
        Token ISURI582=null;
        Token OPEN_BRACE583=null;
        Token CLOSE_BRACE585=null;
        Token ISBLANK586=null;
        Token OPEN_BRACE587=null;
        Token CLOSE_BRACE589=null;
        Token ISLITERAL590=null;
        Token OPEN_BRACE591=null;
        Token CLOSE_BRACE593=null;
        Token ISNUMERIC594=null;
        Token OPEN_BRACE595=null;
        Token CLOSE_BRACE597=null;
        SparqlParser.expression_return e1 = null;

        SparqlParser.expression_return e2 = null;

        SparqlParser.expression_return e3 = null;

        SparqlParser.expression_return expression397 = null;

        SparqlParser.expression_return expression401 = null;

        SparqlParser.expression_return expression405 = null;

        SparqlParser.expression_return expression407 = null;

        SparqlParser.expression_return expression411 = null;

        SparqlParser.var_return var415 = null;

        SparqlParser.expression_return expression419 = null;

        SparqlParser.expression_return expression423 = null;

        SparqlParser.expression_return expression427 = null;

        SparqlParser.nil_return nil430 = null;

        SparqlParser.nil_return nil432 = null;

        SparqlParser.expression_return expression435 = null;

        SparqlParser.expression_return expression439 = null;

        SparqlParser.expression_return expression443 = null;

        SparqlParser.expression_return expression447 = null;

        SparqlParser.expressionList_return expressionList450 = null;

        SparqlParser.subStringExpression_return subStringExpression451 = null;

        SparqlParser.strReplaceExpression_return strReplaceExpression452 = null;

        SparqlParser.expression_return expression455 = null;

        SparqlParser.expression_return expression459 = null;

        SparqlParser.expression_return expression463 = null;

        SparqlParser.expression_return expression467 = null;

        SparqlParser.expression_return expression471 = null;

        SparqlParser.expression_return expression473 = null;

        SparqlParser.expression_return expression477 = null;

        SparqlParser.expression_return expression479 = null;

        SparqlParser.expression_return expression483 = null;

        SparqlParser.expression_return expression485 = null;

        SparqlParser.expression_return expression489 = null;

        SparqlParser.expression_return expression491 = null;

        SparqlParser.expression_return expression495 = null;

        SparqlParser.expression_return expression497 = null;

        SparqlParser.expression_return expression501 = null;

        SparqlParser.expression_return expression505 = null;

        SparqlParser.expression_return expression509 = null;

        SparqlParser.expression_return expression513 = null;

        SparqlParser.expression_return expression517 = null;

        SparqlParser.expression_return expression521 = null;

        SparqlParser.expression_return expression525 = null;

        SparqlParser.expression_return expression529 = null;

        SparqlParser.nil_return nil532 = null;

        SparqlParser.expression_return expression535 = null;

        SparqlParser.expression_return expression539 = null;

        SparqlParser.expression_return expression543 = null;

        SparqlParser.expression_return expression547 = null;

        SparqlParser.expression_return expression551 = null;

        SparqlParser.expressionList_return expressionList554 = null;

        SparqlParser.expression_return expression562 = null;

        SparqlParser.expression_return expression564 = null;

        SparqlParser.expression_return expression568 = null;

        SparqlParser.expression_return expression570 = null;

        SparqlParser.expression_return expression574 = null;

        SparqlParser.expression_return expression576 = null;

        SparqlParser.expression_return expression580 = null;

        SparqlParser.expression_return expression584 = null;

        SparqlParser.expression_return expression588 = null;

        SparqlParser.expression_return expression592 = null;

        SparqlParser.expression_return expression596 = null;

        SparqlParser.regexExpression_return regexExpression598 = null;

        SparqlParser.existsFunction_return existsFunction599 = null;

        SparqlParser.notExistsFunction_return notExistsFunction600 = null;


        CommonTree STR395_tree=null;
        CommonTree OPEN_BRACE396_tree=null;
        CommonTree CLOSE_BRACE398_tree=null;
        CommonTree LANG399_tree=null;
        CommonTree OPEN_BRACE400_tree=null;
        CommonTree CLOSE_BRACE402_tree=null;
        CommonTree LANGMATCHES403_tree=null;
        CommonTree OPEN_BRACE404_tree=null;
        CommonTree COMMA406_tree=null;
        CommonTree CLOSE_BRACE408_tree=null;
        CommonTree DATATYPE409_tree=null;
        CommonTree OPEN_BRACE410_tree=null;
        CommonTree CLOSE_BRACE412_tree=null;
        CommonTree BOUND413_tree=null;
        CommonTree OPEN_BRACE414_tree=null;
        CommonTree CLOSE_BRACE416_tree=null;
        CommonTree IRI417_tree=null;
        CommonTree OPEN_BRACE418_tree=null;
        CommonTree CLOSE_BRACE420_tree=null;
        CommonTree URI421_tree=null;
        CommonTree OPEN_BRACE422_tree=null;
        CommonTree CLOSE_BRACE424_tree=null;
        CommonTree BNODE425_tree=null;
        CommonTree OPEN_BRACE426_tree=null;
        CommonTree CLOSE_BRACE428_tree=null;
        CommonTree BNODE429_tree=null;
        CommonTree RAND431_tree=null;
        CommonTree ABS433_tree=null;
        CommonTree OPEN_BRACE434_tree=null;
        CommonTree CLOSE_BRACE436_tree=null;
        CommonTree CEIL437_tree=null;
        CommonTree OPEN_BRACE438_tree=null;
        CommonTree CLOSE_BRACE440_tree=null;
        CommonTree FLOOR441_tree=null;
        CommonTree OPEN_BRACE442_tree=null;
        CommonTree CLOSE_BRACE444_tree=null;
        CommonTree ROUND445_tree=null;
        CommonTree OPEN_BRACE446_tree=null;
        CommonTree CLOSE_BRACE448_tree=null;
        CommonTree CONCAT449_tree=null;
        CommonTree STRLEN453_tree=null;
        CommonTree OPEN_BRACE454_tree=null;
        CommonTree CLOSE_BRACE456_tree=null;
        CommonTree UCASE457_tree=null;
        CommonTree OPEN_BRACE458_tree=null;
        CommonTree CLOSE_BRACE460_tree=null;
        CommonTree LCASE461_tree=null;
        CommonTree OPEN_BRACE462_tree=null;
        CommonTree CLOSE_BRACE464_tree=null;
        CommonTree ENCODE_FOR_URI465_tree=null;
        CommonTree OPEN_BRACE466_tree=null;
        CommonTree CLOSE_BRACE468_tree=null;
        CommonTree CONTAINS469_tree=null;
        CommonTree OPEN_BRACE470_tree=null;
        CommonTree COMMA472_tree=null;
        CommonTree CLOSE_BRACE474_tree=null;
        CommonTree STRSTARTS475_tree=null;
        CommonTree OPEN_BRACE476_tree=null;
        CommonTree COMMA478_tree=null;
        CommonTree CLOSE_BRACE480_tree=null;
        CommonTree STRENDS481_tree=null;
        CommonTree OPEN_BRACE482_tree=null;
        CommonTree COMMA484_tree=null;
        CommonTree CLOSE_BRACE486_tree=null;
        CommonTree STRBEFORE487_tree=null;
        CommonTree OPEN_BRACE488_tree=null;
        CommonTree COMMA490_tree=null;
        CommonTree CLOSE_BRACE492_tree=null;
        CommonTree STRAFTER493_tree=null;
        CommonTree OPEN_BRACE494_tree=null;
        CommonTree COMMA496_tree=null;
        CommonTree CLOSE_BRACE498_tree=null;
        CommonTree YEAR499_tree=null;
        CommonTree OPEN_BRACE500_tree=null;
        CommonTree CLOSE_BRACE502_tree=null;
        CommonTree MONTH503_tree=null;
        CommonTree OPEN_BRACE504_tree=null;
        CommonTree CLOSE_BRACE506_tree=null;
        CommonTree DAY507_tree=null;
        CommonTree OPEN_BRACE508_tree=null;
        CommonTree CLOSE_BRACE510_tree=null;
        CommonTree HOURS511_tree=null;
        CommonTree OPEN_BRACE512_tree=null;
        CommonTree CLOSE_BRACE514_tree=null;
        CommonTree MINUTES515_tree=null;
        CommonTree OPEN_BRACE516_tree=null;
        CommonTree CLOSE_BRACE518_tree=null;
        CommonTree SECONDS519_tree=null;
        CommonTree OPEN_BRACE520_tree=null;
        CommonTree CLOSE_BRACE522_tree=null;
        CommonTree TIMEZONE523_tree=null;
        CommonTree OPEN_BRACE524_tree=null;
        CommonTree CLOSE_BRACE526_tree=null;
        CommonTree TZ527_tree=null;
        CommonTree OPEN_BRACE528_tree=null;
        CommonTree CLOSE_BRACE530_tree=null;
        CommonTree NOW531_tree=null;
        CommonTree MD5533_tree=null;
        CommonTree OPEN_BRACE534_tree=null;
        CommonTree CLOSE_BRACE536_tree=null;
        CommonTree SHA1537_tree=null;
        CommonTree OPEN_BRACE538_tree=null;
        CommonTree CLOSE_BRACE540_tree=null;
        CommonTree SHA256541_tree=null;
        CommonTree OPEN_BRACE542_tree=null;
        CommonTree CLOSE_BRACE544_tree=null;
        CommonTree SHA384545_tree=null;
        CommonTree OPEN_BRACE546_tree=null;
        CommonTree CLOSE_BRACE548_tree=null;
        CommonTree SHA512549_tree=null;
        CommonTree OPEN_BRACE550_tree=null;
        CommonTree CLOSE_BRACE552_tree=null;
        CommonTree COALESCE553_tree=null;
        CommonTree IF555_tree=null;
        CommonTree OPEN_BRACE556_tree=null;
        CommonTree COMMA557_tree=null;
        CommonTree COMMA558_tree=null;
        CommonTree CLOSE_BRACE559_tree=null;
        CommonTree STRLANG560_tree=null;
        CommonTree OPEN_BRACE561_tree=null;
        CommonTree COMMA563_tree=null;
        CommonTree CLOSE_BRACE565_tree=null;
        CommonTree STRDT566_tree=null;
        CommonTree OPEN_BRACE567_tree=null;
        CommonTree COMMA569_tree=null;
        CommonTree CLOSE_BRACE571_tree=null;
        CommonTree SAMETERM572_tree=null;
        CommonTree OPEN_BRACE573_tree=null;
        CommonTree COMMA575_tree=null;
        CommonTree CLOSE_BRACE577_tree=null;
        CommonTree ISIRI578_tree=null;
        CommonTree OPEN_BRACE579_tree=null;
        CommonTree CLOSE_BRACE581_tree=null;
        CommonTree ISURI582_tree=null;
        CommonTree OPEN_BRACE583_tree=null;
        CommonTree CLOSE_BRACE585_tree=null;
        CommonTree ISBLANK586_tree=null;
        CommonTree OPEN_BRACE587_tree=null;
        CommonTree CLOSE_BRACE589_tree=null;
        CommonTree ISLITERAL590_tree=null;
        CommonTree OPEN_BRACE591_tree=null;
        CommonTree CLOSE_BRACE593_tree=null;
        CommonTree ISNUMERIC594_tree=null;
        CommonTree OPEN_BRACE595_tree=null;
        CommonTree CLOSE_BRACE597_tree=null;
        RewriteRuleTokenStream stream_SHA256=new RewriteRuleTokenStream(adaptor,"token SHA256");
        RewriteRuleTokenStream stream_YEAR=new RewriteRuleTokenStream(adaptor,"token YEAR");
        RewriteRuleTokenStream stream_TIMEZONE=new RewriteRuleTokenStream(adaptor,"token TIMEZONE");
        RewriteRuleTokenStream stream_CONTAINS=new RewriteRuleTokenStream(adaptor,"token CONTAINS");
        RewriteRuleTokenStream stream_STRENDS=new RewriteRuleTokenStream(adaptor,"token STRENDS");
        RewriteRuleTokenStream stream_LCASE=new RewriteRuleTokenStream(adaptor,"token LCASE");
        RewriteRuleTokenStream stream_BNODE=new RewriteRuleTokenStream(adaptor,"token BNODE");
        RewriteRuleTokenStream stream_SHA512=new RewriteRuleTokenStream(adaptor,"token SHA512");
        RewriteRuleTokenStream stream_SECONDS=new RewriteRuleTokenStream(adaptor,"token SECONDS");
        RewriteRuleTokenStream stream_NOW=new RewriteRuleTokenStream(adaptor,"token NOW");
        RewriteRuleTokenStream stream_DAY=new RewriteRuleTokenStream(adaptor,"token DAY");
        RewriteRuleTokenStream stream_STRAFTER=new RewriteRuleTokenStream(adaptor,"token STRAFTER");
        RewriteRuleTokenStream stream_STRLEN=new RewriteRuleTokenStream(adaptor,"token STRLEN");
        RewriteRuleTokenStream stream_MONTH=new RewriteRuleTokenStream(adaptor,"token MONTH");
        RewriteRuleTokenStream stream_ENCODE_FOR_URI=new RewriteRuleTokenStream(adaptor,"token ENCODE_FOR_URI");
        RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
        RewriteRuleTokenStream stream_ISURI=new RewriteRuleTokenStream(adaptor,"token ISURI");
        RewriteRuleTokenStream stream_STR=new RewriteRuleTokenStream(adaptor,"token STR");
        RewriteRuleTokenStream stream_ISLITERAL=new RewriteRuleTokenStream(adaptor,"token ISLITERAL");
        RewriteRuleTokenStream stream_STRDT=new RewriteRuleTokenStream(adaptor,"token STRDT");
        RewriteRuleTokenStream stream_SAMETERM=new RewriteRuleTokenStream(adaptor,"token SAMETERM");
        RewriteRuleTokenStream stream_MD5=new RewriteRuleTokenStream(adaptor,"token MD5");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RAND=new RewriteRuleTokenStream(adaptor,"token RAND");
        RewriteRuleTokenStream stream_IRI=new RewriteRuleTokenStream(adaptor,"token IRI");
        RewriteRuleTokenStream stream_LANGMATCHES=new RewriteRuleTokenStream(adaptor,"token LANGMATCHES");
        RewriteRuleTokenStream stream_TZ=new RewriteRuleTokenStream(adaptor,"token TZ");
        RewriteRuleTokenStream stream_STRLANG=new RewriteRuleTokenStream(adaptor,"token STRLANG");
        RewriteRuleTokenStream stream_BOUND=new RewriteRuleTokenStream(adaptor,"token BOUND");
        RewriteRuleTokenStream stream_ISIRI=new RewriteRuleTokenStream(adaptor,"token ISIRI");
        RewriteRuleTokenStream stream_COALESCE=new RewriteRuleTokenStream(adaptor,"token COALESCE");
        RewriteRuleTokenStream stream_ISNUMERIC=new RewriteRuleTokenStream(adaptor,"token ISNUMERIC");
        RewriteRuleTokenStream stream_CONCAT=new RewriteRuleTokenStream(adaptor,"token CONCAT");
        RewriteRuleTokenStream stream_STRSTARTS=new RewriteRuleTokenStream(adaptor,"token STRSTARTS");
        RewriteRuleTokenStream stream_STRBEFORE=new RewriteRuleTokenStream(adaptor,"token STRBEFORE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_SHA1=new RewriteRuleTokenStream(adaptor,"token SHA1");
        RewriteRuleTokenStream stream_FLOOR=new RewriteRuleTokenStream(adaptor,"token FLOOR");
        RewriteRuleTokenStream stream_ISBLANK=new RewriteRuleTokenStream(adaptor,"token ISBLANK");
        RewriteRuleTokenStream stream_UCASE=new RewriteRuleTokenStream(adaptor,"token UCASE");
        RewriteRuleTokenStream stream_URI=new RewriteRuleTokenStream(adaptor,"token URI");
        RewriteRuleTokenStream stream_ABS=new RewriteRuleTokenStream(adaptor,"token ABS");
        RewriteRuleTokenStream stream_MINUTES=new RewriteRuleTokenStream(adaptor,"token MINUTES");
        RewriteRuleTokenStream stream_ROUND=new RewriteRuleTokenStream(adaptor,"token ROUND");
        RewriteRuleTokenStream stream_CEIL=new RewriteRuleTokenStream(adaptor,"token CEIL");
        RewriteRuleTokenStream stream_DATATYPE=new RewriteRuleTokenStream(adaptor,"token DATATYPE");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_SHA384=new RewriteRuleTokenStream(adaptor,"token SHA384");
        RewriteRuleTokenStream stream_HOURS=new RewriteRuleTokenStream(adaptor,"token HOURS");
        RewriteRuleTokenStream stream_LANG=new RewriteRuleTokenStream(adaptor,"token LANG");
        RewriteRuleSubtreeStream stream_existsFunction=new RewriteRuleSubtreeStream(adaptor,"rule existsFunction");
        RewriteRuleSubtreeStream stream_subStringExpression=new RewriteRuleSubtreeStream(adaptor,"rule subStringExpression");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_strReplaceExpression=new RewriteRuleSubtreeStream(adaptor,"rule strReplaceExpression");
        RewriteRuleSubtreeStream stream_notExistsFunction=new RewriteRuleSubtreeStream(adaptor,"rule notExistsFunction");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        RewriteRuleSubtreeStream stream_regexExpression=new RewriteRuleSubtreeStream(adaptor,"rule regexExpression");
        RewriteRuleSubtreeStream stream_nil=new RewriteRuleSubtreeStream(adaptor,"rule nil");
        try { dbg.enterRule(getGrammarFileName(), "builtInCall");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(599, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:600:5: ( STR OPEN_BRACE expression CLOSE_BRACE -> ^( STR expression ) | LANG OPEN_BRACE expression CLOSE_BRACE -> ^( LANG expression ) | LANGMATCHES OPEN_BRACE expression COMMA expression CLOSE_BRACE -> ^( LANGMATCHES ( expression )+ ) | DATATYPE OPEN_BRACE expression CLOSE_BRACE -> ^( DATATYPE expression ) | BOUND OPEN_BRACE var CLOSE_BRACE -> ^( BOUND var ) | IRI OPEN_BRACE expression CLOSE_BRACE -> ^( IRI expression ) | URI OPEN_BRACE expression CLOSE_BRACE -> ^( URI expression ) | BNODE ( OPEN_BRACE expression CLOSE_BRACE ) -> ^( BNODE expression ) | BNODE nil -> BNODE | RAND nil -> RAND | ABS OPEN_BRACE expression CLOSE_BRACE -> ^( ABS expression ) | CEIL OPEN_BRACE expression CLOSE_BRACE -> ^( CEIL expression ) | FLOOR OPEN_BRACE expression CLOSE_BRACE -> ^( FLOOR expression ) | ROUND OPEN_BRACE expression CLOSE_BRACE -> ^( ROUND expression ) | CONCAT expressionList -> ^( CONCAT expressionList ) | subStringExpression -> subStringExpression | strReplaceExpression -> strReplaceExpression | STRLEN OPEN_BRACE expression CLOSE_BRACE -> ^( STRLEN expression ) | UCASE OPEN_BRACE expression CLOSE_BRACE -> ^( UCASE expression ) | LCASE OPEN_BRACE expression CLOSE_BRACE -> ^( LCASE expression ) | ENCODE_FOR_URI OPEN_BRACE expression CLOSE_BRACE -> ^( ENCODE_FOR_URI expression ) | CONTAINS OPEN_BRACE expression COMMA expression CLOSE_BRACE -> ^( CONTAINS expression expression ) | STRSTARTS OPEN_BRACE expression COMMA expression CLOSE_BRACE -> ^( STRSTARTS expression expression ) | STRENDS OPEN_BRACE expression COMMA expression CLOSE_BRACE -> ^( STRENDS expression expression ) | STRBEFORE OPEN_BRACE expression COMMA expression CLOSE_BRACE -> ^( STRBEFORE expression expression ) | STRAFTER OPEN_BRACE expression COMMA expression CLOSE_BRACE -> ^( STRAFTER expression expression ) | YEAR OPEN_BRACE expression CLOSE_BRACE -> ^( YEAR expression ) | MONTH OPEN_BRACE expression CLOSE_BRACE -> ^( MONTH expression ) | DAY OPEN_BRACE expression CLOSE_BRACE -> ^( DAY expression ) | HOURS OPEN_BRACE expression CLOSE_BRACE -> ^( HOURS expression ) | MINUTES OPEN_BRACE expression CLOSE_BRACE -> ^( MINUTES expression ) | SECONDS OPEN_BRACE expression CLOSE_BRACE -> ^( SECONDS expression ) | TIMEZONE OPEN_BRACE expression CLOSE_BRACE -> ^( TIMEZONE expression ) | TZ OPEN_BRACE expression CLOSE_BRACE -> ^( TZ expression ) | NOW nil -> NOW | MD5 OPEN_BRACE expression CLOSE_BRACE -> ^( MD5 expression ) | SHA1 OPEN_BRACE expression CLOSE_BRACE -> ^( SHA1 expression ) | SHA256 OPEN_BRACE expression CLOSE_BRACE -> ^( SHA256 expression ) | SHA384 OPEN_BRACE expression CLOSE_BRACE -> ^( SHA384 expression ) | SHA512 OPEN_BRACE expression CLOSE_BRACE -> ^( SHA512 expression ) | COALESCE expressionList -> ^( COALESCE expressionList ) | IF OPEN_BRACE e1= expression COMMA e2= expression COMMA e3= expression CLOSE_BRACE -> ^( IF $e1 $e2 $e3) | STRLANG OPEN_BRACE expression COMMA expression CLOSE_BRACE -> ^( STRLANG expression expression ) | STRDT OPEN_BRACE expression COMMA expression CLOSE_BRACE -> ^( STRDT expression expression ) | SAMETERM OPEN_BRACE expression COMMA expression CLOSE_BRACE -> ^( SAMETERM expression expression ) | ISIRI OPEN_BRACE expression CLOSE_BRACE -> ^( ISIRI expression ) | ISURI OPEN_BRACE expression CLOSE_BRACE -> ^( ISURI expression ) | ISBLANK OPEN_BRACE expression CLOSE_BRACE -> ^( ISBLANK expression ) | ISLITERAL OPEN_BRACE expression CLOSE_BRACE -> ^( ISLITERAL expression ) | ISNUMERIC OPEN_BRACE expression CLOSE_BRACE -> ^( ISNUMERIC expression ) | regexExpression -> regexExpression | existsFunction -> existsFunction | notExistsFunction -> notExistsFunction )
            int alt127=53;
            try { dbg.enterDecision(127);

            try {
                isCyclicDecision = true;
                alt127 = dfa127.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(127);}

            switch (alt127) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:600:7: STR OPEN_BRACE expression CLOSE_BRACE
                    {
                    dbg.location(600,7);
                    STR395=(Token)match(input,STR,FOLLOW_STR_in_builtInCall5532);  
                    stream_STR.add(STR395);

                    dbg.location(600,11);
                    OPEN_BRACE396=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall5534);  
                    stream_OPEN_BRACE.add(OPEN_BRACE396);

                    dbg.location(600,22);
                    pushFollow(FOLLOW_expression_in_builtInCall5536);
                    expression397=expression();

                    state._fsp--;

                    stream_expression.add(expression397.getTree());
                    dbg.location(600,33);
                    CLOSE_BRACE398=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall5538);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE398);



                    // AST REWRITE
                    // elements: expression, STR
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 600:45: -> ^( STR expression )
                    {
                        dbg.location(600,48);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:600:48: ^( STR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(600,50);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_STR.nextNode(), root_1);

                        dbg.location(600,54);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:601:7: LANG OPEN_BRACE expression CLOSE_BRACE
                    {
                    dbg.location(601,7);
                    LANG399=(Token)match(input,LANG,FOLLOW_LANG_in_builtInCall5554);  
                    stream_LANG.add(LANG399);

                    dbg.location(601,12);
                    OPEN_BRACE400=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall5556);  
                    stream_OPEN_BRACE.add(OPEN_BRACE400);

                    dbg.location(601,23);
                    pushFollow(FOLLOW_expression_in_builtInCall5558);
                    expression401=expression();

                    state._fsp--;

                    stream_expression.add(expression401.getTree());
                    dbg.location(601,34);
                    CLOSE_BRACE402=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall5560);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE402);



                    // AST REWRITE
                    // elements: expression, LANG
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 601:46: -> ^( LANG expression )
                    {
                        dbg.location(601,49);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:601:49: ^( LANG expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(601,51);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_LANG.nextNode(), root_1);

                        dbg.location(601,56);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:602:7: LANGMATCHES OPEN_BRACE expression COMMA expression CLOSE_BRACE
                    {
                    dbg.location(602,7);
                    LANGMATCHES403=(Token)match(input,LANGMATCHES,FOLLOW_LANGMATCHES_in_builtInCall5576);  
                    stream_LANGMATCHES.add(LANGMATCHES403);

                    dbg.location(602,19);
                    OPEN_BRACE404=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall5578);  
                    stream_OPEN_BRACE.add(OPEN_BRACE404);

                    dbg.location(602,30);
                    pushFollow(FOLLOW_expression_in_builtInCall5580);
                    expression405=expression();

                    state._fsp--;

                    stream_expression.add(expression405.getTree());
                    dbg.location(602,41);
                    COMMA406=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall5582);  
                    stream_COMMA.add(COMMA406);

                    dbg.location(602,47);
                    pushFollow(FOLLOW_expression_in_builtInCall5584);
                    expression407=expression();

                    state._fsp--;

                    stream_expression.add(expression407.getTree());
                    dbg.location(602,58);
                    CLOSE_BRACE408=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall5586);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE408);



                    // AST REWRITE
                    // elements: LANGMATCHES, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 602:70: -> ^( LANGMATCHES ( expression )+ )
                    {
                        dbg.location(602,73);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:602:73: ^( LANGMATCHES ( expression )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(602,75);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_LANGMATCHES.nextNode(), root_1);

                        dbg.location(602,87);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            dbg.location(602,87);
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:603:7: DATATYPE OPEN_BRACE expression CLOSE_BRACE
                    {
                    dbg.location(603,7);
                    DATATYPE409=(Token)match(input,DATATYPE,FOLLOW_DATATYPE_in_builtInCall5603);  
                    stream_DATATYPE.add(DATATYPE409);

                    dbg.location(603,16);
                    OPEN_BRACE410=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall5605);  
                    stream_OPEN_BRACE.add(OPEN_BRACE410);

                    dbg.location(603,27);
                    pushFollow(FOLLOW_expression_in_builtInCall5607);
                    expression411=expression();

                    state._fsp--;

                    stream_expression.add(expression411.getTree());
                    dbg.location(603,38);
                    CLOSE_BRACE412=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall5609);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE412);



                    // AST REWRITE
                    // elements: expression, DATATYPE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 603:50: -> ^( DATATYPE expression )
                    {
                        dbg.location(603,53);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:603:53: ^( DATATYPE expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(603,55);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_DATATYPE.nextNode(), root_1);

                        dbg.location(603,64);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:604:7: BOUND OPEN_BRACE var CLOSE_BRACE
                    {
                    dbg.location(604,7);
                    BOUND413=(Token)match(input,BOUND,FOLLOW_BOUND_in_builtInCall5625);  
                    stream_BOUND.add(BOUND413);

                    dbg.location(604,13);
                    OPEN_BRACE414=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall5627);  
                    stream_OPEN_BRACE.add(OPEN_BRACE414);

                    dbg.location(604,24);
                    pushFollow(FOLLOW_var_in_builtInCall5629);
                    var415=var();

                    state._fsp--;

                    stream_var.add(var415.getTree());
                    dbg.location(604,28);
                    CLOSE_BRACE416=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall5631);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE416);



                    // AST REWRITE
                    // elements: BOUND, var
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 604:40: -> ^( BOUND var )
                    {
                        dbg.location(604,43);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:604:43: ^( BOUND var )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(604,45);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_BOUND.nextNode(), root_1);

                        dbg.location(604,51);
                        adaptor.addChild(root_1, stream_var.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:605:7: IRI OPEN_BRACE expression CLOSE_BRACE
                    {
                    dbg.location(605,7);
                    IRI417=(Token)match(input,IRI,FOLLOW_IRI_in_builtInCall5647);  
                    stream_IRI.add(IRI417);

                    dbg.location(605,11);
                    OPEN_BRACE418=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall5649);  
                    stream_OPEN_BRACE.add(OPEN_BRACE418);

                    dbg.location(605,22);
                    pushFollow(FOLLOW_expression_in_builtInCall5651);
                    expression419=expression();

                    state._fsp--;

                    stream_expression.add(expression419.getTree());
                    dbg.location(605,33);
                    CLOSE_BRACE420=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall5653);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE420);



                    // AST REWRITE
                    // elements: expression, IRI
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 605:45: -> ^( IRI expression )
                    {
                        dbg.location(605,48);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:605:48: ^( IRI expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(605,50);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_IRI.nextNode(), root_1);

                        dbg.location(605,54);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:606:7: URI OPEN_BRACE expression CLOSE_BRACE
                    {
                    dbg.location(606,7);
                    URI421=(Token)match(input,URI,FOLLOW_URI_in_builtInCall5669);  
                    stream_URI.add(URI421);

                    dbg.location(606,11);
                    OPEN_BRACE422=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall5671);  
                    stream_OPEN_BRACE.add(OPEN_BRACE422);

                    dbg.location(606,22);
                    pushFollow(FOLLOW_expression_in_builtInCall5673);
                    expression423=expression();

                    state._fsp--;

                    stream_expression.add(expression423.getTree());
                    dbg.location(606,33);
                    CLOSE_BRACE424=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall5675);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE424);



                    // AST REWRITE
                    // elements: URI, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 606:45: -> ^( URI expression )
                    {
                        dbg.location(606,48);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:606:48: ^( URI expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(606,50);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_URI.nextNode(), root_1);

                        dbg.location(606,54);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:607:7: BNODE ( OPEN_BRACE expression CLOSE_BRACE )
                    {
                    dbg.location(607,7);
                    BNODE425=(Token)match(input,BNODE,FOLLOW_BNODE_in_builtInCall5691);  
                    stream_BNODE.add(BNODE425);

                    dbg.location(607,13);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:607:13: ( OPEN_BRACE expression CLOSE_BRACE )
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:607:14: OPEN_BRACE expression CLOSE_BRACE
                    {
                    dbg.location(607,14);
                    OPEN_BRACE426=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall5694);  
                    stream_OPEN_BRACE.add(OPEN_BRACE426);

                    dbg.location(607,25);
                    pushFollow(FOLLOW_expression_in_builtInCall5696);
                    expression427=expression();

                    state._fsp--;

                    stream_expression.add(expression427.getTree());
                    dbg.location(607,36);
                    CLOSE_BRACE428=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall5698);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE428);


                    }



                    // AST REWRITE
                    // elements: expression, BNODE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 607:49: -> ^( BNODE expression )
                    {
                        dbg.location(607,52);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:607:52: ^( BNODE expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(607,54);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_BNODE.nextNode(), root_1);

                        dbg.location(607,60);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:608:7: BNODE nil
                    {
                    dbg.location(608,7);
                    BNODE429=(Token)match(input,BNODE,FOLLOW_BNODE_in_builtInCall5715);  
                    stream_BNODE.add(BNODE429);

                    dbg.location(608,13);
                    pushFollow(FOLLOW_nil_in_builtInCall5717);
                    nil430=nil();

                    state._fsp--;

                    stream_nil.add(nil430.getTree());


                    // AST REWRITE
                    // elements: BNODE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 608:17: -> BNODE
                    {
                        dbg.location(608,20);
                        adaptor.addChild(root_0, stream_BNODE.nextNode());

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:609:7: RAND nil
                    {
                    dbg.location(609,7);
                    RAND431=(Token)match(input,RAND,FOLLOW_RAND_in_builtInCall5729);  
                    stream_RAND.add(RAND431);

                    dbg.location(609,12);
                    pushFollow(FOLLOW_nil_in_builtInCall5731);
                    nil432=nil();

                    state._fsp--;

                    stream_nil.add(nil432.getTree());


                    // AST REWRITE
                    // elements: RAND
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 609:16: -> RAND
                    {
                        dbg.location(609,19);
                        adaptor.addChild(root_0, stream_RAND.nextNode());

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:610:7: ABS OPEN_BRACE expression CLOSE_BRACE
                    {
                    dbg.location(610,7);
                    ABS433=(Token)match(input,ABS,FOLLOW_ABS_in_builtInCall5743);  
                    stream_ABS.add(ABS433);

                    dbg.location(610,11);
                    OPEN_BRACE434=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall5745);  
                    stream_OPEN_BRACE.add(OPEN_BRACE434);

                    dbg.location(610,22);
                    pushFollow(FOLLOW_expression_in_builtInCall5747);
                    expression435=expression();

                    state._fsp--;

                    stream_expression.add(expression435.getTree());
                    dbg.location(610,33);
                    CLOSE_BRACE436=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall5749);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE436);



                    // AST REWRITE
                    // elements: ABS, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 610:45: -> ^( ABS expression )
                    {
                        dbg.location(610,48);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:610:48: ^( ABS expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(610,50);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_ABS.nextNode(), root_1);

                        dbg.location(610,54);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:611:7: CEIL OPEN_BRACE expression CLOSE_BRACE
                    {
                    dbg.location(611,7);
                    CEIL437=(Token)match(input,CEIL,FOLLOW_CEIL_in_builtInCall5765);  
                    stream_CEIL.add(CEIL437);

                    dbg.location(611,12);
                    OPEN_BRACE438=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall5767);  
                    stream_OPEN_BRACE.add(OPEN_BRACE438);

                    dbg.location(611,23);
                    pushFollow(FOLLOW_expression_in_builtInCall5769);
                    expression439=expression();

                    state._fsp--;

                    stream_expression.add(expression439.getTree());
                    dbg.location(611,34);
                    CLOSE_BRACE440=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall5771);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE440);



                    // AST REWRITE
                    // elements: CEIL, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 611:46: -> ^( CEIL expression )
                    {
                        dbg.location(611,49);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:611:49: ^( CEIL expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(611,51);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_CEIL.nextNode(), root_1);

                        dbg.location(611,56);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:612:7: FLOOR OPEN_BRACE expression CLOSE_BRACE
                    {
                    dbg.location(612,7);
                    FLOOR441=(Token)match(input,FLOOR,FOLLOW_FLOOR_in_builtInCall5787);  
                    stream_FLOOR.add(FLOOR441);

                    dbg.location(612,13);
                    OPEN_BRACE442=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall5789);  
                    stream_OPEN_BRACE.add(OPEN_BRACE442);

                    dbg.location(612,24);
                    pushFollow(FOLLOW_expression_in_builtInCall5791);
                    expression443=expression();

                    state._fsp--;

                    stream_expression.add(expression443.getTree());
                    dbg.location(612,35);
                    CLOSE_BRACE444=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall5793);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE444);



                    // AST REWRITE
                    // elements: FLOOR, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 612:47: -> ^( FLOOR expression )
                    {
                        dbg.location(612,50);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:612:50: ^( FLOOR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(612,52);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_FLOOR.nextNode(), root_1);

                        dbg.location(612,58);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 14 :
                    dbg.enterAlt(14);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:613:7: ROUND OPEN_BRACE expression CLOSE_BRACE
                    {
                    dbg.location(613,7);
                    ROUND445=(Token)match(input,ROUND,FOLLOW_ROUND_in_builtInCall5809);  
                    stream_ROUND.add(ROUND445);

                    dbg.location(613,13);
                    OPEN_BRACE446=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall5811);  
                    stream_OPEN_BRACE.add(OPEN_BRACE446);

                    dbg.location(613,24);
                    pushFollow(FOLLOW_expression_in_builtInCall5813);
                    expression447=expression();

                    state._fsp--;

                    stream_expression.add(expression447.getTree());
                    dbg.location(613,35);
                    CLOSE_BRACE448=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall5815);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE448);



                    // AST REWRITE
                    // elements: expression, ROUND
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 613:47: -> ^( ROUND expression )
                    {
                        dbg.location(613,50);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:613:50: ^( ROUND expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(613,52);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_ROUND.nextNode(), root_1);

                        dbg.location(613,58);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 15 :
                    dbg.enterAlt(15);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:614:7: CONCAT expressionList
                    {
                    dbg.location(614,7);
                    CONCAT449=(Token)match(input,CONCAT,FOLLOW_CONCAT_in_builtInCall5831);  
                    stream_CONCAT.add(CONCAT449);

                    dbg.location(614,14);
                    pushFollow(FOLLOW_expressionList_in_builtInCall5833);
                    expressionList450=expressionList();

                    state._fsp--;

                    stream_expressionList.add(expressionList450.getTree());


                    // AST REWRITE
                    // elements: CONCAT, expressionList
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 614:29: -> ^( CONCAT expressionList )
                    {
                        dbg.location(614,32);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:614:32: ^( CONCAT expressionList )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(614,34);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_CONCAT.nextNode(), root_1);

                        dbg.location(614,41);
                        adaptor.addChild(root_1, stream_expressionList.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 16 :
                    dbg.enterAlt(16);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:615:7: subStringExpression
                    {
                    dbg.location(615,7);
                    pushFollow(FOLLOW_subStringExpression_in_builtInCall5849);
                    subStringExpression451=subStringExpression();

                    state._fsp--;

                    stream_subStringExpression.add(subStringExpression451.getTree());


                    // AST REWRITE
                    // elements: subStringExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 615:27: -> subStringExpression
                    {
                        dbg.location(615,30);
                        adaptor.addChild(root_0, stream_subStringExpression.nextTree());

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 17 :
                    dbg.enterAlt(17);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:616:7: strReplaceExpression
                    {
                    dbg.location(616,7);
                    pushFollow(FOLLOW_strReplaceExpression_in_builtInCall5861);
                    strReplaceExpression452=strReplaceExpression();

                    state._fsp--;

                    stream_strReplaceExpression.add(strReplaceExpression452.getTree());


                    // AST REWRITE
                    // elements: strReplaceExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 616:28: -> strReplaceExpression
                    {
                        dbg.location(616,31);
                        adaptor.addChild(root_0, stream_strReplaceExpression.nextTree());

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 18 :
                    dbg.enterAlt(18);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:617:7: STRLEN OPEN_BRACE expression CLOSE_BRACE
                    {
                    dbg.location(617,7);
                    STRLEN453=(Token)match(input,STRLEN,FOLLOW_STRLEN_in_builtInCall5873);  
                    stream_STRLEN.add(STRLEN453);

                    dbg.location(617,14);
                    OPEN_BRACE454=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall5875);  
                    stream_OPEN_BRACE.add(OPEN_BRACE454);

                    dbg.location(617,25);
                    pushFollow(FOLLOW_expression_in_builtInCall5877);
                    expression455=expression();

                    state._fsp--;

                    stream_expression.add(expression455.getTree());
                    dbg.location(617,36);
                    CLOSE_BRACE456=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall5879);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE456);



                    // AST REWRITE
                    // elements: STRLEN, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 617:48: -> ^( STRLEN expression )
                    {
                        dbg.location(617,51);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:617:51: ^( STRLEN expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(617,53);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_STRLEN.nextNode(), root_1);

                        dbg.location(617,60);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 19 :
                    dbg.enterAlt(19);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:618:7: UCASE OPEN_BRACE expression CLOSE_BRACE
                    {
                    dbg.location(618,7);
                    UCASE457=(Token)match(input,UCASE,FOLLOW_UCASE_in_builtInCall5895);  
                    stream_UCASE.add(UCASE457);

                    dbg.location(618,13);
                    OPEN_BRACE458=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall5897);  
                    stream_OPEN_BRACE.add(OPEN_BRACE458);

                    dbg.location(618,24);
                    pushFollow(FOLLOW_expression_in_builtInCall5899);
                    expression459=expression();

                    state._fsp--;

                    stream_expression.add(expression459.getTree());
                    dbg.location(618,35);
                    CLOSE_BRACE460=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall5901);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE460);



                    // AST REWRITE
                    // elements: expression, UCASE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 618:47: -> ^( UCASE expression )
                    {
                        dbg.location(618,50);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:618:50: ^( UCASE expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(618,52);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_UCASE.nextNode(), root_1);

                        dbg.location(618,58);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 20 :
                    dbg.enterAlt(20);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:619:7: LCASE OPEN_BRACE expression CLOSE_BRACE
                    {
                    dbg.location(619,7);
                    LCASE461=(Token)match(input,LCASE,FOLLOW_LCASE_in_builtInCall5917);  
                    stream_LCASE.add(LCASE461);

                    dbg.location(619,13);
                    OPEN_BRACE462=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall5919);  
                    stream_OPEN_BRACE.add(OPEN_BRACE462);

                    dbg.location(619,24);
                    pushFollow(FOLLOW_expression_in_builtInCall5921);
                    expression463=expression();

                    state._fsp--;

                    stream_expression.add(expression463.getTree());
                    dbg.location(619,35);
                    CLOSE_BRACE464=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall5923);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE464);



                    // AST REWRITE
                    // elements: expression, LCASE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 619:47: -> ^( LCASE expression )
                    {
                        dbg.location(619,50);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:619:50: ^( LCASE expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(619,52);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_LCASE.nextNode(), root_1);

                        dbg.location(619,58);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 21 :
                    dbg.enterAlt(21);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:620:7: ENCODE_FOR_URI OPEN_BRACE expression CLOSE_BRACE
                    {
                    dbg.location(620,7);
                    ENCODE_FOR_URI465=(Token)match(input,ENCODE_FOR_URI,FOLLOW_ENCODE_FOR_URI_in_builtInCall5939);  
                    stream_ENCODE_FOR_URI.add(ENCODE_FOR_URI465);

                    dbg.location(620,22);
                    OPEN_BRACE466=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall5941);  
                    stream_OPEN_BRACE.add(OPEN_BRACE466);

                    dbg.location(620,33);
                    pushFollow(FOLLOW_expression_in_builtInCall5943);
                    expression467=expression();

                    state._fsp--;

                    stream_expression.add(expression467.getTree());
                    dbg.location(620,44);
                    CLOSE_BRACE468=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall5945);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE468);



                    // AST REWRITE
                    // elements: expression, ENCODE_FOR_URI
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 620:56: -> ^( ENCODE_FOR_URI expression )
                    {
                        dbg.location(620,59);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:620:59: ^( ENCODE_FOR_URI expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(620,61);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_ENCODE_FOR_URI.nextNode(), root_1);

                        dbg.location(620,76);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 22 :
                    dbg.enterAlt(22);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:621:7: CONTAINS OPEN_BRACE expression COMMA expression CLOSE_BRACE
                    {
                    dbg.location(621,7);
                    CONTAINS469=(Token)match(input,CONTAINS,FOLLOW_CONTAINS_in_builtInCall5961);  
                    stream_CONTAINS.add(CONTAINS469);

                    dbg.location(621,16);
                    OPEN_BRACE470=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall5963);  
                    stream_OPEN_BRACE.add(OPEN_BRACE470);

                    dbg.location(621,27);
                    pushFollow(FOLLOW_expression_in_builtInCall5965);
                    expression471=expression();

                    state._fsp--;

                    stream_expression.add(expression471.getTree());
                    dbg.location(621,38);
                    COMMA472=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall5967);  
                    stream_COMMA.add(COMMA472);

                    dbg.location(621,44);
                    pushFollow(FOLLOW_expression_in_builtInCall5969);
                    expression473=expression();

                    state._fsp--;

                    stream_expression.add(expression473.getTree());
                    dbg.location(621,55);
                    CLOSE_BRACE474=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall5971);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE474);



                    // AST REWRITE
                    // elements: CONTAINS, expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 621:67: -> ^( CONTAINS expression expression )
                    {
                        dbg.location(621,70);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:621:70: ^( CONTAINS expression expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(621,72);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_CONTAINS.nextNode(), root_1);

                        dbg.location(621,81);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        dbg.location(621,92);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 23 :
                    dbg.enterAlt(23);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:622:7: STRSTARTS OPEN_BRACE expression COMMA expression CLOSE_BRACE
                    {
                    dbg.location(622,7);
                    STRSTARTS475=(Token)match(input,STRSTARTS,FOLLOW_STRSTARTS_in_builtInCall5989);  
                    stream_STRSTARTS.add(STRSTARTS475);

                    dbg.location(622,17);
                    OPEN_BRACE476=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall5991);  
                    stream_OPEN_BRACE.add(OPEN_BRACE476);

                    dbg.location(622,28);
                    pushFollow(FOLLOW_expression_in_builtInCall5993);
                    expression477=expression();

                    state._fsp--;

                    stream_expression.add(expression477.getTree());
                    dbg.location(622,39);
                    COMMA478=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall5995);  
                    stream_COMMA.add(COMMA478);

                    dbg.location(622,45);
                    pushFollow(FOLLOW_expression_in_builtInCall5997);
                    expression479=expression();

                    state._fsp--;

                    stream_expression.add(expression479.getTree());
                    dbg.location(622,56);
                    CLOSE_BRACE480=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall5999);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE480);



                    // AST REWRITE
                    // elements: expression, STRSTARTS, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 622:68: -> ^( STRSTARTS expression expression )
                    {
                        dbg.location(622,71);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:622:71: ^( STRSTARTS expression expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(622,73);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_STRSTARTS.nextNode(), root_1);

                        dbg.location(622,83);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        dbg.location(622,94);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 24 :
                    dbg.enterAlt(24);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:623:7: STRENDS OPEN_BRACE expression COMMA expression CLOSE_BRACE
                    {
                    dbg.location(623,7);
                    STRENDS481=(Token)match(input,STRENDS,FOLLOW_STRENDS_in_builtInCall6017);  
                    stream_STRENDS.add(STRENDS481);

                    dbg.location(623,15);
                    OPEN_BRACE482=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6019);  
                    stream_OPEN_BRACE.add(OPEN_BRACE482);

                    dbg.location(623,26);
                    pushFollow(FOLLOW_expression_in_builtInCall6021);
                    expression483=expression();

                    state._fsp--;

                    stream_expression.add(expression483.getTree());
                    dbg.location(623,37);
                    COMMA484=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall6023);  
                    stream_COMMA.add(COMMA484);

                    dbg.location(623,43);
                    pushFollow(FOLLOW_expression_in_builtInCall6025);
                    expression485=expression();

                    state._fsp--;

                    stream_expression.add(expression485.getTree());
                    dbg.location(623,54);
                    CLOSE_BRACE486=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6027);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE486);



                    // AST REWRITE
                    // elements: expression, STRENDS, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 623:66: -> ^( STRENDS expression expression )
                    {
                        dbg.location(623,69);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:623:69: ^( STRENDS expression expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(623,71);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_STRENDS.nextNode(), root_1);

                        dbg.location(623,79);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        dbg.location(623,90);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 25 :
                    dbg.enterAlt(25);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:624:7: STRBEFORE OPEN_BRACE expression COMMA expression CLOSE_BRACE
                    {
                    dbg.location(624,7);
                    STRBEFORE487=(Token)match(input,STRBEFORE,FOLLOW_STRBEFORE_in_builtInCall6045);  
                    stream_STRBEFORE.add(STRBEFORE487);

                    dbg.location(624,17);
                    OPEN_BRACE488=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6047);  
                    stream_OPEN_BRACE.add(OPEN_BRACE488);

                    dbg.location(624,28);
                    pushFollow(FOLLOW_expression_in_builtInCall6049);
                    expression489=expression();

                    state._fsp--;

                    stream_expression.add(expression489.getTree());
                    dbg.location(624,39);
                    COMMA490=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall6051);  
                    stream_COMMA.add(COMMA490);

                    dbg.location(624,45);
                    pushFollow(FOLLOW_expression_in_builtInCall6053);
                    expression491=expression();

                    state._fsp--;

                    stream_expression.add(expression491.getTree());
                    dbg.location(624,56);
                    CLOSE_BRACE492=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6055);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE492);



                    // AST REWRITE
                    // elements: STRBEFORE, expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 624:68: -> ^( STRBEFORE expression expression )
                    {
                        dbg.location(624,71);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:624:71: ^( STRBEFORE expression expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(624,73);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_STRBEFORE.nextNode(), root_1);

                        dbg.location(624,83);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        dbg.location(624,94);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 26 :
                    dbg.enterAlt(26);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:625:7: STRAFTER OPEN_BRACE expression COMMA expression CLOSE_BRACE
                    {
                    dbg.location(625,7);
                    STRAFTER493=(Token)match(input,STRAFTER,FOLLOW_STRAFTER_in_builtInCall6073);  
                    stream_STRAFTER.add(STRAFTER493);

                    dbg.location(625,16);
                    OPEN_BRACE494=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6075);  
                    stream_OPEN_BRACE.add(OPEN_BRACE494);

                    dbg.location(625,27);
                    pushFollow(FOLLOW_expression_in_builtInCall6077);
                    expression495=expression();

                    state._fsp--;

                    stream_expression.add(expression495.getTree());
                    dbg.location(625,38);
                    COMMA496=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall6079);  
                    stream_COMMA.add(COMMA496);

                    dbg.location(625,44);
                    pushFollow(FOLLOW_expression_in_builtInCall6081);
                    expression497=expression();

                    state._fsp--;

                    stream_expression.add(expression497.getTree());
                    dbg.location(625,55);
                    CLOSE_BRACE498=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6083);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE498);



                    // AST REWRITE
                    // elements: expression, STRAFTER, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 625:67: -> ^( STRAFTER expression expression )
                    {
                        dbg.location(625,70);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:625:70: ^( STRAFTER expression expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(625,72);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_STRAFTER.nextNode(), root_1);

                        dbg.location(625,81);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        dbg.location(625,92);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 27 :
                    dbg.enterAlt(27);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:626:7: YEAR OPEN_BRACE expression CLOSE_BRACE
                    {
                    dbg.location(626,7);
                    YEAR499=(Token)match(input,YEAR,FOLLOW_YEAR_in_builtInCall6101);  
                    stream_YEAR.add(YEAR499);

                    dbg.location(626,12);
                    OPEN_BRACE500=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6103);  
                    stream_OPEN_BRACE.add(OPEN_BRACE500);

                    dbg.location(626,23);
                    pushFollow(FOLLOW_expression_in_builtInCall6105);
                    expression501=expression();

                    state._fsp--;

                    stream_expression.add(expression501.getTree());
                    dbg.location(626,34);
                    CLOSE_BRACE502=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6107);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE502);



                    // AST REWRITE
                    // elements: expression, YEAR
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 626:46: -> ^( YEAR expression )
                    {
                        dbg.location(626,49);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:626:49: ^( YEAR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(626,51);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_YEAR.nextNode(), root_1);

                        dbg.location(626,56);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 28 :
                    dbg.enterAlt(28);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:627:7: MONTH OPEN_BRACE expression CLOSE_BRACE
                    {
                    dbg.location(627,7);
                    MONTH503=(Token)match(input,MONTH,FOLLOW_MONTH_in_builtInCall6123);  
                    stream_MONTH.add(MONTH503);

                    dbg.location(627,13);
                    OPEN_BRACE504=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6125);  
                    stream_OPEN_BRACE.add(OPEN_BRACE504);

                    dbg.location(627,24);
                    pushFollow(FOLLOW_expression_in_builtInCall6127);
                    expression505=expression();

                    state._fsp--;

                    stream_expression.add(expression505.getTree());
                    dbg.location(627,35);
                    CLOSE_BRACE506=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6129);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE506);



                    // AST REWRITE
                    // elements: expression, MONTH
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 627:47: -> ^( MONTH expression )
                    {
                        dbg.location(627,50);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:627:50: ^( MONTH expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(627,52);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_MONTH.nextNode(), root_1);

                        dbg.location(627,58);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 29 :
                    dbg.enterAlt(29);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:628:7: DAY OPEN_BRACE expression CLOSE_BRACE
                    {
                    dbg.location(628,7);
                    DAY507=(Token)match(input,DAY,FOLLOW_DAY_in_builtInCall6145);  
                    stream_DAY.add(DAY507);

                    dbg.location(628,11);
                    OPEN_BRACE508=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6147);  
                    stream_OPEN_BRACE.add(OPEN_BRACE508);

                    dbg.location(628,22);
                    pushFollow(FOLLOW_expression_in_builtInCall6149);
                    expression509=expression();

                    state._fsp--;

                    stream_expression.add(expression509.getTree());
                    dbg.location(628,33);
                    CLOSE_BRACE510=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6151);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE510);



                    // AST REWRITE
                    // elements: DAY, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 628:45: -> ^( DAY expression )
                    {
                        dbg.location(628,48);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:628:48: ^( DAY expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(628,50);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_DAY.nextNode(), root_1);

                        dbg.location(628,54);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 30 :
                    dbg.enterAlt(30);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:629:7: HOURS OPEN_BRACE expression CLOSE_BRACE
                    {
                    dbg.location(629,7);
                    HOURS511=(Token)match(input,HOURS,FOLLOW_HOURS_in_builtInCall6167);  
                    stream_HOURS.add(HOURS511);

                    dbg.location(629,13);
                    OPEN_BRACE512=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6169);  
                    stream_OPEN_BRACE.add(OPEN_BRACE512);

                    dbg.location(629,24);
                    pushFollow(FOLLOW_expression_in_builtInCall6171);
                    expression513=expression();

                    state._fsp--;

                    stream_expression.add(expression513.getTree());
                    dbg.location(629,35);
                    CLOSE_BRACE514=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6173);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE514);



                    // AST REWRITE
                    // elements: HOURS, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 629:47: -> ^( HOURS expression )
                    {
                        dbg.location(629,50);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:629:50: ^( HOURS expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(629,52);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_HOURS.nextNode(), root_1);

                        dbg.location(629,58);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 31 :
                    dbg.enterAlt(31);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:630:7: MINUTES OPEN_BRACE expression CLOSE_BRACE
                    {
                    dbg.location(630,7);
                    MINUTES515=(Token)match(input,MINUTES,FOLLOW_MINUTES_in_builtInCall6189);  
                    stream_MINUTES.add(MINUTES515);

                    dbg.location(630,15);
                    OPEN_BRACE516=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6191);  
                    stream_OPEN_BRACE.add(OPEN_BRACE516);

                    dbg.location(630,26);
                    pushFollow(FOLLOW_expression_in_builtInCall6193);
                    expression517=expression();

                    state._fsp--;

                    stream_expression.add(expression517.getTree());
                    dbg.location(630,37);
                    CLOSE_BRACE518=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6195);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE518);



                    // AST REWRITE
                    // elements: MINUTES, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 630:49: -> ^( MINUTES expression )
                    {
                        dbg.location(630,52);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:630:52: ^( MINUTES expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(630,54);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_MINUTES.nextNode(), root_1);

                        dbg.location(630,62);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 32 :
                    dbg.enterAlt(32);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:631:7: SECONDS OPEN_BRACE expression CLOSE_BRACE
                    {
                    dbg.location(631,7);
                    SECONDS519=(Token)match(input,SECONDS,FOLLOW_SECONDS_in_builtInCall6211);  
                    stream_SECONDS.add(SECONDS519);

                    dbg.location(631,15);
                    OPEN_BRACE520=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6213);  
                    stream_OPEN_BRACE.add(OPEN_BRACE520);

                    dbg.location(631,26);
                    pushFollow(FOLLOW_expression_in_builtInCall6215);
                    expression521=expression();

                    state._fsp--;

                    stream_expression.add(expression521.getTree());
                    dbg.location(631,37);
                    CLOSE_BRACE522=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6217);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE522);



                    // AST REWRITE
                    // elements: expression, SECONDS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 631:49: -> ^( SECONDS expression )
                    {
                        dbg.location(631,52);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:631:52: ^( SECONDS expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(631,54);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_SECONDS.nextNode(), root_1);

                        dbg.location(631,62);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 33 :
                    dbg.enterAlt(33);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:632:7: TIMEZONE OPEN_BRACE expression CLOSE_BRACE
                    {
                    dbg.location(632,7);
                    TIMEZONE523=(Token)match(input,TIMEZONE,FOLLOW_TIMEZONE_in_builtInCall6233);  
                    stream_TIMEZONE.add(TIMEZONE523);

                    dbg.location(632,16);
                    OPEN_BRACE524=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6235);  
                    stream_OPEN_BRACE.add(OPEN_BRACE524);

                    dbg.location(632,27);
                    pushFollow(FOLLOW_expression_in_builtInCall6237);
                    expression525=expression();

                    state._fsp--;

                    stream_expression.add(expression525.getTree());
                    dbg.location(632,38);
                    CLOSE_BRACE526=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6239);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE526);



                    // AST REWRITE
                    // elements: expression, TIMEZONE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 632:50: -> ^( TIMEZONE expression )
                    {
                        dbg.location(632,53);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:632:53: ^( TIMEZONE expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(632,55);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_TIMEZONE.nextNode(), root_1);

                        dbg.location(632,64);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 34 :
                    dbg.enterAlt(34);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:633:7: TZ OPEN_BRACE expression CLOSE_BRACE
                    {
                    dbg.location(633,7);
                    TZ527=(Token)match(input,TZ,FOLLOW_TZ_in_builtInCall6255);  
                    stream_TZ.add(TZ527);

                    dbg.location(633,10);
                    OPEN_BRACE528=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6257);  
                    stream_OPEN_BRACE.add(OPEN_BRACE528);

                    dbg.location(633,21);
                    pushFollow(FOLLOW_expression_in_builtInCall6259);
                    expression529=expression();

                    state._fsp--;

                    stream_expression.add(expression529.getTree());
                    dbg.location(633,32);
                    CLOSE_BRACE530=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6261);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE530);



                    // AST REWRITE
                    // elements: TZ, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 633:44: -> ^( TZ expression )
                    {
                        dbg.location(633,47);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:633:47: ^( TZ expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(633,49);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_TZ.nextNode(), root_1);

                        dbg.location(633,52);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 35 :
                    dbg.enterAlt(35);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:634:7: NOW nil
                    {
                    dbg.location(634,7);
                    NOW531=(Token)match(input,NOW,FOLLOW_NOW_in_builtInCall6277);  
                    stream_NOW.add(NOW531);

                    dbg.location(634,11);
                    pushFollow(FOLLOW_nil_in_builtInCall6279);
                    nil532=nil();

                    state._fsp--;

                    stream_nil.add(nil532.getTree());


                    // AST REWRITE
                    // elements: NOW
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 634:15: -> NOW
                    {
                        dbg.location(634,18);
                        adaptor.addChild(root_0, stream_NOW.nextNode());

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 36 :
                    dbg.enterAlt(36);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:635:7: MD5 OPEN_BRACE expression CLOSE_BRACE
                    {
                    dbg.location(635,7);
                    MD5533=(Token)match(input,MD5,FOLLOW_MD5_in_builtInCall6291);  
                    stream_MD5.add(MD5533);

                    dbg.location(635,11);
                    OPEN_BRACE534=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6293);  
                    stream_OPEN_BRACE.add(OPEN_BRACE534);

                    dbg.location(635,22);
                    pushFollow(FOLLOW_expression_in_builtInCall6295);
                    expression535=expression();

                    state._fsp--;

                    stream_expression.add(expression535.getTree());
                    dbg.location(635,33);
                    CLOSE_BRACE536=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6297);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE536);



                    // AST REWRITE
                    // elements: MD5, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 635:45: -> ^( MD5 expression )
                    {
                        dbg.location(635,48);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:635:48: ^( MD5 expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(635,50);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_MD5.nextNode(), root_1);

                        dbg.location(635,54);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 37 :
                    dbg.enterAlt(37);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:636:7: SHA1 OPEN_BRACE expression CLOSE_BRACE
                    {
                    dbg.location(636,7);
                    SHA1537=(Token)match(input,SHA1,FOLLOW_SHA1_in_builtInCall6313);  
                    stream_SHA1.add(SHA1537);

                    dbg.location(636,12);
                    OPEN_BRACE538=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6315);  
                    stream_OPEN_BRACE.add(OPEN_BRACE538);

                    dbg.location(636,23);
                    pushFollow(FOLLOW_expression_in_builtInCall6317);
                    expression539=expression();

                    state._fsp--;

                    stream_expression.add(expression539.getTree());
                    dbg.location(636,34);
                    CLOSE_BRACE540=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6319);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE540);



                    // AST REWRITE
                    // elements: expression, SHA1
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 636:46: -> ^( SHA1 expression )
                    {
                        dbg.location(636,49);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:636:49: ^( SHA1 expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(636,51);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_SHA1.nextNode(), root_1);

                        dbg.location(636,56);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 38 :
                    dbg.enterAlt(38);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:637:7: SHA256 OPEN_BRACE expression CLOSE_BRACE
                    {
                    dbg.location(637,7);
                    SHA256541=(Token)match(input,SHA256,FOLLOW_SHA256_in_builtInCall6335);  
                    stream_SHA256.add(SHA256541);

                    dbg.location(637,14);
                    OPEN_BRACE542=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6337);  
                    stream_OPEN_BRACE.add(OPEN_BRACE542);

                    dbg.location(637,25);
                    pushFollow(FOLLOW_expression_in_builtInCall6339);
                    expression543=expression();

                    state._fsp--;

                    stream_expression.add(expression543.getTree());
                    dbg.location(637,36);
                    CLOSE_BRACE544=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6341);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE544);



                    // AST REWRITE
                    // elements: SHA256, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 637:48: -> ^( SHA256 expression )
                    {
                        dbg.location(637,51);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:637:51: ^( SHA256 expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(637,53);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_SHA256.nextNode(), root_1);

                        dbg.location(637,60);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 39 :
                    dbg.enterAlt(39);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:638:7: SHA384 OPEN_BRACE expression CLOSE_BRACE
                    {
                    dbg.location(638,7);
                    SHA384545=(Token)match(input,SHA384,FOLLOW_SHA384_in_builtInCall6357);  
                    stream_SHA384.add(SHA384545);

                    dbg.location(638,14);
                    OPEN_BRACE546=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6359);  
                    stream_OPEN_BRACE.add(OPEN_BRACE546);

                    dbg.location(638,25);
                    pushFollow(FOLLOW_expression_in_builtInCall6361);
                    expression547=expression();

                    state._fsp--;

                    stream_expression.add(expression547.getTree());
                    dbg.location(638,36);
                    CLOSE_BRACE548=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6363);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE548);



                    // AST REWRITE
                    // elements: SHA384, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 638:48: -> ^( SHA384 expression )
                    {
                        dbg.location(638,51);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:638:51: ^( SHA384 expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(638,53);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_SHA384.nextNode(), root_1);

                        dbg.location(638,60);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 40 :
                    dbg.enterAlt(40);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:639:7: SHA512 OPEN_BRACE expression CLOSE_BRACE
                    {
                    dbg.location(639,7);
                    SHA512549=(Token)match(input,SHA512,FOLLOW_SHA512_in_builtInCall6379);  
                    stream_SHA512.add(SHA512549);

                    dbg.location(639,14);
                    OPEN_BRACE550=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6381);  
                    stream_OPEN_BRACE.add(OPEN_BRACE550);

                    dbg.location(639,25);
                    pushFollow(FOLLOW_expression_in_builtInCall6383);
                    expression551=expression();

                    state._fsp--;

                    stream_expression.add(expression551.getTree());
                    dbg.location(639,36);
                    CLOSE_BRACE552=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6385);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE552);



                    // AST REWRITE
                    // elements: SHA512, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 639:48: -> ^( SHA512 expression )
                    {
                        dbg.location(639,51);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:639:51: ^( SHA512 expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(639,53);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_SHA512.nextNode(), root_1);

                        dbg.location(639,60);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 41 :
                    dbg.enterAlt(41);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:640:7: COALESCE expressionList
                    {
                    dbg.location(640,7);
                    COALESCE553=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtInCall6401);  
                    stream_COALESCE.add(COALESCE553);

                    dbg.location(640,16);
                    pushFollow(FOLLOW_expressionList_in_builtInCall6403);
                    expressionList554=expressionList();

                    state._fsp--;

                    stream_expressionList.add(expressionList554.getTree());


                    // AST REWRITE
                    // elements: COALESCE, expressionList
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 640:31: -> ^( COALESCE expressionList )
                    {
                        dbg.location(640,34);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:640:34: ^( COALESCE expressionList )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(640,36);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_COALESCE.nextNode(), root_1);

                        dbg.location(640,45);
                        adaptor.addChild(root_1, stream_expressionList.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 42 :
                    dbg.enterAlt(42);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:641:7: IF OPEN_BRACE e1= expression COMMA e2= expression COMMA e3= expression CLOSE_BRACE
                    {
                    dbg.location(641,7);
                    IF555=(Token)match(input,IF,FOLLOW_IF_in_builtInCall6419);  
                    stream_IF.add(IF555);

                    dbg.location(641,10);
                    OPEN_BRACE556=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6421);  
                    stream_OPEN_BRACE.add(OPEN_BRACE556);

                    dbg.location(641,23);
                    pushFollow(FOLLOW_expression_in_builtInCall6425);
                    e1=expression();

                    state._fsp--;

                    stream_expression.add(e1.getTree());
                    dbg.location(641,35);
                    COMMA557=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall6427);  
                    stream_COMMA.add(COMMA557);

                    dbg.location(641,43);
                    pushFollow(FOLLOW_expression_in_builtInCall6431);
                    e2=expression();

                    state._fsp--;

                    stream_expression.add(e2.getTree());
                    dbg.location(641,55);
                    COMMA558=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall6433);  
                    stream_COMMA.add(COMMA558);

                    dbg.location(641,63);
                    pushFollow(FOLLOW_expression_in_builtInCall6437);
                    e3=expression();

                    state._fsp--;

                    stream_expression.add(e3.getTree());
                    dbg.location(641,75);
                    CLOSE_BRACE559=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6439);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE559);



                    // AST REWRITE
                    // elements: e2, e3, IF, e1
                    // token labels: 
                    // rule labels: e3, retval, e1, e2
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e3=new RewriteRuleSubtreeStream(adaptor,"rule e3",e3!=null?e3.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);
                    RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"rule e2",e2!=null?e2.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 641:87: -> ^( IF $e1 $e2 $e3)
                    {
                        dbg.location(641,90);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:641:90: ^( IF $e1 $e2 $e3)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(641,92);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_IF.nextNode(), root_1);

                        dbg.location(641,95);
                        adaptor.addChild(root_1, stream_e1.nextTree());
                        dbg.location(641,99);
                        adaptor.addChild(root_1, stream_e2.nextTree());
                        dbg.location(641,103);
                        adaptor.addChild(root_1, stream_e3.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 43 :
                    dbg.enterAlt(43);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:642:7: STRLANG OPEN_BRACE expression COMMA expression CLOSE_BRACE
                    {
                    dbg.location(642,7);
                    STRLANG560=(Token)match(input,STRLANG,FOLLOW_STRLANG_in_builtInCall6462);  
                    stream_STRLANG.add(STRLANG560);

                    dbg.location(642,15);
                    OPEN_BRACE561=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6464);  
                    stream_OPEN_BRACE.add(OPEN_BRACE561);

                    dbg.location(642,26);
                    pushFollow(FOLLOW_expression_in_builtInCall6466);
                    expression562=expression();

                    state._fsp--;

                    stream_expression.add(expression562.getTree());
                    dbg.location(642,37);
                    COMMA563=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall6468);  
                    stream_COMMA.add(COMMA563);

                    dbg.location(642,43);
                    pushFollow(FOLLOW_expression_in_builtInCall6470);
                    expression564=expression();

                    state._fsp--;

                    stream_expression.add(expression564.getTree());
                    dbg.location(642,54);
                    CLOSE_BRACE565=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6472);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE565);



                    // AST REWRITE
                    // elements: expression, expression, STRLANG
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 642:66: -> ^( STRLANG expression expression )
                    {
                        dbg.location(642,69);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:642:69: ^( STRLANG expression expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(642,71);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_STRLANG.nextNode(), root_1);

                        dbg.location(642,79);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        dbg.location(642,90);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 44 :
                    dbg.enterAlt(44);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:643:7: STRDT OPEN_BRACE expression COMMA expression CLOSE_BRACE
                    {
                    dbg.location(643,7);
                    STRDT566=(Token)match(input,STRDT,FOLLOW_STRDT_in_builtInCall6490);  
                    stream_STRDT.add(STRDT566);

                    dbg.location(643,13);
                    OPEN_BRACE567=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6492);  
                    stream_OPEN_BRACE.add(OPEN_BRACE567);

                    dbg.location(643,24);
                    pushFollow(FOLLOW_expression_in_builtInCall6494);
                    expression568=expression();

                    state._fsp--;

                    stream_expression.add(expression568.getTree());
                    dbg.location(643,35);
                    COMMA569=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall6496);  
                    stream_COMMA.add(COMMA569);

                    dbg.location(643,41);
                    pushFollow(FOLLOW_expression_in_builtInCall6498);
                    expression570=expression();

                    state._fsp--;

                    stream_expression.add(expression570.getTree());
                    dbg.location(643,52);
                    CLOSE_BRACE571=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6500);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE571);



                    // AST REWRITE
                    // elements: STRDT, expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 643:64: -> ^( STRDT expression expression )
                    {
                        dbg.location(643,67);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:643:67: ^( STRDT expression expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(643,69);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_STRDT.nextNode(), root_1);

                        dbg.location(643,75);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        dbg.location(643,86);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 45 :
                    dbg.enterAlt(45);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:644:7: SAMETERM OPEN_BRACE expression COMMA expression CLOSE_BRACE
                    {
                    dbg.location(644,7);
                    SAMETERM572=(Token)match(input,SAMETERM,FOLLOW_SAMETERM_in_builtInCall6518);  
                    stream_SAMETERM.add(SAMETERM572);

                    dbg.location(644,16);
                    OPEN_BRACE573=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6520);  
                    stream_OPEN_BRACE.add(OPEN_BRACE573);

                    dbg.location(644,27);
                    pushFollow(FOLLOW_expression_in_builtInCall6522);
                    expression574=expression();

                    state._fsp--;

                    stream_expression.add(expression574.getTree());
                    dbg.location(644,38);
                    COMMA575=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall6524);  
                    stream_COMMA.add(COMMA575);

                    dbg.location(644,44);
                    pushFollow(FOLLOW_expression_in_builtInCall6526);
                    expression576=expression();

                    state._fsp--;

                    stream_expression.add(expression576.getTree());
                    dbg.location(644,55);
                    CLOSE_BRACE577=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6528);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE577);



                    // AST REWRITE
                    // elements: expression, SAMETERM, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 644:67: -> ^( SAMETERM expression expression )
                    {
                        dbg.location(644,70);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:644:70: ^( SAMETERM expression expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(644,72);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_SAMETERM.nextNode(), root_1);

                        dbg.location(644,81);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        dbg.location(644,92);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 46 :
                    dbg.enterAlt(46);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:645:7: ISIRI OPEN_BRACE expression CLOSE_BRACE
                    {
                    dbg.location(645,7);
                    ISIRI578=(Token)match(input,ISIRI,FOLLOW_ISIRI_in_builtInCall6546);  
                    stream_ISIRI.add(ISIRI578);

                    dbg.location(645,13);
                    OPEN_BRACE579=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6548);  
                    stream_OPEN_BRACE.add(OPEN_BRACE579);

                    dbg.location(645,24);
                    pushFollow(FOLLOW_expression_in_builtInCall6550);
                    expression580=expression();

                    state._fsp--;

                    stream_expression.add(expression580.getTree());
                    dbg.location(645,35);
                    CLOSE_BRACE581=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6552);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE581);



                    // AST REWRITE
                    // elements: expression, ISIRI
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 645:47: -> ^( ISIRI expression )
                    {
                        dbg.location(645,50);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:645:50: ^( ISIRI expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(645,52);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_ISIRI.nextNode(), root_1);

                        dbg.location(645,58);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 47 :
                    dbg.enterAlt(47);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:646:7: ISURI OPEN_BRACE expression CLOSE_BRACE
                    {
                    dbg.location(646,7);
                    ISURI582=(Token)match(input,ISURI,FOLLOW_ISURI_in_builtInCall6568);  
                    stream_ISURI.add(ISURI582);

                    dbg.location(646,13);
                    OPEN_BRACE583=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6570);  
                    stream_OPEN_BRACE.add(OPEN_BRACE583);

                    dbg.location(646,24);
                    pushFollow(FOLLOW_expression_in_builtInCall6572);
                    expression584=expression();

                    state._fsp--;

                    stream_expression.add(expression584.getTree());
                    dbg.location(646,35);
                    CLOSE_BRACE585=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6574);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE585);



                    // AST REWRITE
                    // elements: ISURI, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 646:47: -> ^( ISURI expression )
                    {
                        dbg.location(646,50);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:646:50: ^( ISURI expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(646,52);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_ISURI.nextNode(), root_1);

                        dbg.location(646,58);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 48 :
                    dbg.enterAlt(48);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:647:7: ISBLANK OPEN_BRACE expression CLOSE_BRACE
                    {
                    dbg.location(647,7);
                    ISBLANK586=(Token)match(input,ISBLANK,FOLLOW_ISBLANK_in_builtInCall6590);  
                    stream_ISBLANK.add(ISBLANK586);

                    dbg.location(647,15);
                    OPEN_BRACE587=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6592);  
                    stream_OPEN_BRACE.add(OPEN_BRACE587);

                    dbg.location(647,26);
                    pushFollow(FOLLOW_expression_in_builtInCall6594);
                    expression588=expression();

                    state._fsp--;

                    stream_expression.add(expression588.getTree());
                    dbg.location(647,37);
                    CLOSE_BRACE589=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6596);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE589);



                    // AST REWRITE
                    // elements: expression, ISBLANK
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 647:49: -> ^( ISBLANK expression )
                    {
                        dbg.location(647,52);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:647:52: ^( ISBLANK expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(647,54);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_ISBLANK.nextNode(), root_1);

                        dbg.location(647,62);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 49 :
                    dbg.enterAlt(49);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:648:7: ISLITERAL OPEN_BRACE expression CLOSE_BRACE
                    {
                    dbg.location(648,7);
                    ISLITERAL590=(Token)match(input,ISLITERAL,FOLLOW_ISLITERAL_in_builtInCall6613);  
                    stream_ISLITERAL.add(ISLITERAL590);

                    dbg.location(648,17);
                    OPEN_BRACE591=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6615);  
                    stream_OPEN_BRACE.add(OPEN_BRACE591);

                    dbg.location(648,28);
                    pushFollow(FOLLOW_expression_in_builtInCall6617);
                    expression592=expression();

                    state._fsp--;

                    stream_expression.add(expression592.getTree());
                    dbg.location(648,39);
                    CLOSE_BRACE593=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6619);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE593);



                    // AST REWRITE
                    // elements: expression, ISLITERAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 648:51: -> ^( ISLITERAL expression )
                    {
                        dbg.location(648,54);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:648:54: ^( ISLITERAL expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(648,56);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_ISLITERAL.nextNode(), root_1);

                        dbg.location(648,66);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 50 :
                    dbg.enterAlt(50);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:649:7: ISNUMERIC OPEN_BRACE expression CLOSE_BRACE
                    {
                    dbg.location(649,7);
                    ISNUMERIC594=(Token)match(input,ISNUMERIC,FOLLOW_ISNUMERIC_in_builtInCall6635);  
                    stream_ISNUMERIC.add(ISNUMERIC594);

                    dbg.location(649,17);
                    OPEN_BRACE595=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6637);  
                    stream_OPEN_BRACE.add(OPEN_BRACE595);

                    dbg.location(649,28);
                    pushFollow(FOLLOW_expression_in_builtInCall6639);
                    expression596=expression();

                    state._fsp--;

                    stream_expression.add(expression596.getTree());
                    dbg.location(649,39);
                    CLOSE_BRACE597=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6641);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE597);



                    // AST REWRITE
                    // elements: expression, ISNUMERIC
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 649:51: -> ^( ISNUMERIC expression )
                    {
                        dbg.location(649,54);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:649:54: ^( ISNUMERIC expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(649,56);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_ISNUMERIC.nextNode(), root_1);

                        dbg.location(649,66);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 51 :
                    dbg.enterAlt(51);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:650:7: regexExpression
                    {
                    dbg.location(650,7);
                    pushFollow(FOLLOW_regexExpression_in_builtInCall6657);
                    regexExpression598=regexExpression();

                    state._fsp--;

                    stream_regexExpression.add(regexExpression598.getTree());


                    // AST REWRITE
                    // elements: regexExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 650:23: -> regexExpression
                    {
                        dbg.location(650,26);
                        adaptor.addChild(root_0, stream_regexExpression.nextTree());

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 52 :
                    dbg.enterAlt(52);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:651:7: existsFunction
                    {
                    dbg.location(651,7);
                    pushFollow(FOLLOW_existsFunction_in_builtInCall6669);
                    existsFunction599=existsFunction();

                    state._fsp--;

                    stream_existsFunction.add(existsFunction599.getTree());


                    // AST REWRITE
                    // elements: existsFunction
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 651:22: -> existsFunction
                    {
                        dbg.location(651,25);
                        adaptor.addChild(root_0, stream_existsFunction.nextTree());

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 53 :
                    dbg.enterAlt(53);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:652:7: notExistsFunction
                    {
                    dbg.location(652,7);
                    pushFollow(FOLLOW_notExistsFunction_in_builtInCall6681);
                    notExistsFunction600=notExistsFunction();

                    state._fsp--;

                    stream_notExistsFunction.add(notExistsFunction600.getTree());


                    // AST REWRITE
                    // elements: notExistsFunction
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 652:25: -> notExistsFunction
                    {
                        dbg.location(652,28);
                        adaptor.addChild(root_0, stream_notExistsFunction.nextTree());

                    }

                    retval.tree = root_0;
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(653, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "builtInCall");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "builtInCall"

    public static class regexExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "regexExpression"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:655:1: regexExpression : REGEX OPEN_BRACE expression COMMA expression ( COMMA expression )? CLOSE_BRACE -> ^( REGEX ( expression )* ) ;
    public final SparqlParser.regexExpression_return regexExpression() throws RecognitionException {
        SparqlParser.regexExpression_return retval = new SparqlParser.regexExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token REGEX601=null;
        Token OPEN_BRACE602=null;
        Token COMMA604=null;
        Token COMMA606=null;
        Token CLOSE_BRACE608=null;
        SparqlParser.expression_return expression603 = null;

        SparqlParser.expression_return expression605 = null;

        SparqlParser.expression_return expression607 = null;


        CommonTree REGEX601_tree=null;
        CommonTree OPEN_BRACE602_tree=null;
        CommonTree COMMA604_tree=null;
        CommonTree COMMA606_tree=null;
        CommonTree CLOSE_BRACE608_tree=null;
        RewriteRuleTokenStream stream_REGEX=new RewriteRuleTokenStream(adaptor,"token REGEX");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try { dbg.enterRule(getGrammarFileName(), "regexExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(655, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:656:5: ( REGEX OPEN_BRACE expression COMMA expression ( COMMA expression )? CLOSE_BRACE -> ^( REGEX ( expression )* ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:656:7: REGEX OPEN_BRACE expression COMMA expression ( COMMA expression )? CLOSE_BRACE
            {
            dbg.location(656,7);
            REGEX601=(Token)match(input,REGEX,FOLLOW_REGEX_in_regexExpression6702);  
            stream_REGEX.add(REGEX601);

            dbg.location(656,13);
            OPEN_BRACE602=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_regexExpression6704);  
            stream_OPEN_BRACE.add(OPEN_BRACE602);

            dbg.location(656,24);
            pushFollow(FOLLOW_expression_in_regexExpression6706);
            expression603=expression();

            state._fsp--;

            stream_expression.add(expression603.getTree());
            dbg.location(656,35);
            COMMA604=(Token)match(input,COMMA,FOLLOW_COMMA_in_regexExpression6708);  
            stream_COMMA.add(COMMA604);

            dbg.location(656,41);
            pushFollow(FOLLOW_expression_in_regexExpression6710);
            expression605=expression();

            state._fsp--;

            stream_expression.add(expression605.getTree());
            dbg.location(656,52);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:656:52: ( COMMA expression )?
            int alt128=2;
            try { dbg.enterSubRule(128);
            try { dbg.enterDecision(128);

            int LA128_0 = input.LA(1);

            if ( (LA128_0==COMMA) ) {
                alt128=1;
            }
            } finally {dbg.exitDecision(128);}

            switch (alt128) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:656:53: COMMA expression
                    {
                    dbg.location(656,53);
                    COMMA606=(Token)match(input,COMMA,FOLLOW_COMMA_in_regexExpression6713);  
                    stream_COMMA.add(COMMA606);

                    dbg.location(656,59);
                    pushFollow(FOLLOW_expression_in_regexExpression6715);
                    expression607=expression();

                    state._fsp--;

                    stream_expression.add(expression607.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(128);}

            dbg.location(656,72);
            CLOSE_BRACE608=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_regexExpression6719);  
            stream_CLOSE_BRACE.add(CLOSE_BRACE608);



            // AST REWRITE
            // elements: expression, REGEX
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 656:84: -> ^( REGEX ( expression )* )
            {
                dbg.location(656,87);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:656:87: ^( REGEX ( expression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(656,89);
                root_1 = (CommonTree)adaptor.becomeRoot(stream_REGEX.nextNode(), root_1);

                dbg.location(656,95);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:656:95: ( expression )*
                while ( stream_expression.hasNext() ) {
                    dbg.location(656,95);
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(657, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "regexExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "regexExpression"

    public static class subStringExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subStringExpression"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:659:1: subStringExpression : SUBSTR OPEN_BRACE expression COMMA expression ( COMMA expression )? CLOSE_BRACE -> ^( SUBSTR ( expression )* ) ;
    public final SparqlParser.subStringExpression_return subStringExpression() throws RecognitionException {
        SparqlParser.subStringExpression_return retval = new SparqlParser.subStringExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SUBSTR609=null;
        Token OPEN_BRACE610=null;
        Token COMMA612=null;
        Token COMMA614=null;
        Token CLOSE_BRACE616=null;
        SparqlParser.expression_return expression611 = null;

        SparqlParser.expression_return expression613 = null;

        SparqlParser.expression_return expression615 = null;


        CommonTree SUBSTR609_tree=null;
        CommonTree OPEN_BRACE610_tree=null;
        CommonTree COMMA612_tree=null;
        CommonTree COMMA614_tree=null;
        CommonTree CLOSE_BRACE616_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_SUBSTR=new RewriteRuleTokenStream(adaptor,"token SUBSTR");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try { dbg.enterRule(getGrammarFileName(), "subStringExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(659, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:660:5: ( SUBSTR OPEN_BRACE expression COMMA expression ( COMMA expression )? CLOSE_BRACE -> ^( SUBSTR ( expression )* ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:660:7: SUBSTR OPEN_BRACE expression COMMA expression ( COMMA expression )? CLOSE_BRACE
            {
            dbg.location(660,7);
            SUBSTR609=(Token)match(input,SUBSTR,FOLLOW_SUBSTR_in_subStringExpression6749);  
            stream_SUBSTR.add(SUBSTR609);

            dbg.location(660,14);
            OPEN_BRACE610=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_subStringExpression6751);  
            stream_OPEN_BRACE.add(OPEN_BRACE610);

            dbg.location(660,25);
            pushFollow(FOLLOW_expression_in_subStringExpression6753);
            expression611=expression();

            state._fsp--;

            stream_expression.add(expression611.getTree());
            dbg.location(660,36);
            COMMA612=(Token)match(input,COMMA,FOLLOW_COMMA_in_subStringExpression6755);  
            stream_COMMA.add(COMMA612);

            dbg.location(660,42);
            pushFollow(FOLLOW_expression_in_subStringExpression6757);
            expression613=expression();

            state._fsp--;

            stream_expression.add(expression613.getTree());
            dbg.location(660,53);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:660:53: ( COMMA expression )?
            int alt129=2;
            try { dbg.enterSubRule(129);
            try { dbg.enterDecision(129);

            int LA129_0 = input.LA(1);

            if ( (LA129_0==COMMA) ) {
                alt129=1;
            }
            } finally {dbg.exitDecision(129);}

            switch (alt129) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:660:54: COMMA expression
                    {
                    dbg.location(660,54);
                    COMMA614=(Token)match(input,COMMA,FOLLOW_COMMA_in_subStringExpression6760);  
                    stream_COMMA.add(COMMA614);

                    dbg.location(660,60);
                    pushFollow(FOLLOW_expression_in_subStringExpression6762);
                    expression615=expression();

                    state._fsp--;

                    stream_expression.add(expression615.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(129);}

            dbg.location(660,73);
            CLOSE_BRACE616=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_subStringExpression6766);  
            stream_CLOSE_BRACE.add(CLOSE_BRACE616);



            // AST REWRITE
            // elements: SUBSTR, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 660:85: -> ^( SUBSTR ( expression )* )
            {
                dbg.location(660,88);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:660:88: ^( SUBSTR ( expression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(660,90);
                root_1 = (CommonTree)adaptor.becomeRoot(stream_SUBSTR.nextNode(), root_1);

                dbg.location(660,97);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:660:97: ( expression )*
                while ( stream_expression.hasNext() ) {
                    dbg.location(660,97);
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(661, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "subStringExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "subStringExpression"

    public static class strReplaceExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "strReplaceExpression"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:663:1: strReplaceExpression : REPLACE OPEN_BRACE expression COMMA expression COMMA expression ( COMMA expression )? CLOSE_BRACE -> ^( REPLACE ( expression )* ) ;
    public final SparqlParser.strReplaceExpression_return strReplaceExpression() throws RecognitionException {
        SparqlParser.strReplaceExpression_return retval = new SparqlParser.strReplaceExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token REPLACE617=null;
        Token OPEN_BRACE618=null;
        Token COMMA620=null;
        Token COMMA622=null;
        Token COMMA624=null;
        Token CLOSE_BRACE626=null;
        SparqlParser.expression_return expression619 = null;

        SparqlParser.expression_return expression621 = null;

        SparqlParser.expression_return expression623 = null;

        SparqlParser.expression_return expression625 = null;


        CommonTree REPLACE617_tree=null;
        CommonTree OPEN_BRACE618_tree=null;
        CommonTree COMMA620_tree=null;
        CommonTree COMMA622_tree=null;
        CommonTree COMMA624_tree=null;
        CommonTree CLOSE_BRACE626_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_REPLACE=new RewriteRuleTokenStream(adaptor,"token REPLACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try { dbg.enterRule(getGrammarFileName(), "strReplaceExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(663, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:664:5: ( REPLACE OPEN_BRACE expression COMMA expression COMMA expression ( COMMA expression )? CLOSE_BRACE -> ^( REPLACE ( expression )* ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:664:7: REPLACE OPEN_BRACE expression COMMA expression COMMA expression ( COMMA expression )? CLOSE_BRACE
            {
            dbg.location(664,7);
            REPLACE617=(Token)match(input,REPLACE,FOLLOW_REPLACE_in_strReplaceExpression6796);  
            stream_REPLACE.add(REPLACE617);

            dbg.location(664,15);
            OPEN_BRACE618=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_strReplaceExpression6798);  
            stream_OPEN_BRACE.add(OPEN_BRACE618);

            dbg.location(664,26);
            pushFollow(FOLLOW_expression_in_strReplaceExpression6800);
            expression619=expression();

            state._fsp--;

            stream_expression.add(expression619.getTree());
            dbg.location(664,37);
            COMMA620=(Token)match(input,COMMA,FOLLOW_COMMA_in_strReplaceExpression6802);  
            stream_COMMA.add(COMMA620);

            dbg.location(664,43);
            pushFollow(FOLLOW_expression_in_strReplaceExpression6804);
            expression621=expression();

            state._fsp--;

            stream_expression.add(expression621.getTree());
            dbg.location(664,54);
            COMMA622=(Token)match(input,COMMA,FOLLOW_COMMA_in_strReplaceExpression6806);  
            stream_COMMA.add(COMMA622);

            dbg.location(664,60);
            pushFollow(FOLLOW_expression_in_strReplaceExpression6808);
            expression623=expression();

            state._fsp--;

            stream_expression.add(expression623.getTree());
            dbg.location(664,71);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:664:71: ( COMMA expression )?
            int alt130=2;
            try { dbg.enterSubRule(130);
            try { dbg.enterDecision(130);

            int LA130_0 = input.LA(1);

            if ( (LA130_0==COMMA) ) {
                alt130=1;
            }
            } finally {dbg.exitDecision(130);}

            switch (alt130) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:664:72: COMMA expression
                    {
                    dbg.location(664,72);
                    COMMA624=(Token)match(input,COMMA,FOLLOW_COMMA_in_strReplaceExpression6811);  
                    stream_COMMA.add(COMMA624);

                    dbg.location(664,78);
                    pushFollow(FOLLOW_expression_in_strReplaceExpression6813);
                    expression625=expression();

                    state._fsp--;

                    stream_expression.add(expression625.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(130);}

            dbg.location(664,91);
            CLOSE_BRACE626=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_strReplaceExpression6817);  
            stream_CLOSE_BRACE.add(CLOSE_BRACE626);



            // AST REWRITE
            // elements: expression, REPLACE
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 664:103: -> ^( REPLACE ( expression )* )
            {
                dbg.location(664,106);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:664:106: ^( REPLACE ( expression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(664,108);
                root_1 = (CommonTree)adaptor.becomeRoot(stream_REPLACE.nextNode(), root_1);

                dbg.location(664,116);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:664:116: ( expression )*
                while ( stream_expression.hasNext() ) {
                    dbg.location(664,116);
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(665, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "strReplaceExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "strReplaceExpression"

    public static class existsFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "existsFunction"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:667:1: existsFunction : EXISTS groupGraphPattern -> ^( EXISTS groupGraphPattern ) ;
    public final SparqlParser.existsFunction_return existsFunction() throws RecognitionException {
        SparqlParser.existsFunction_return retval = new SparqlParser.existsFunction_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EXISTS627=null;
        SparqlParser.groupGraphPattern_return groupGraphPattern628 = null;


        CommonTree EXISTS627_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try { dbg.enterRule(getGrammarFileName(), "existsFunction");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(667, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:668:5: ( EXISTS groupGraphPattern -> ^( EXISTS groupGraphPattern ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:668:7: EXISTS groupGraphPattern
            {
            dbg.location(668,7);
            EXISTS627=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsFunction6847);  
            stream_EXISTS.add(EXISTS627);

            dbg.location(668,14);
            pushFollow(FOLLOW_groupGraphPattern_in_existsFunction6849);
            groupGraphPattern628=groupGraphPattern();

            state._fsp--;

            stream_groupGraphPattern.add(groupGraphPattern628.getTree());


            // AST REWRITE
            // elements: EXISTS, groupGraphPattern
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 668:32: -> ^( EXISTS groupGraphPattern )
            {
                dbg.location(668,35);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:668:35: ^( EXISTS groupGraphPattern )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(668,37);
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EXISTS.nextNode(), root_1);

                dbg.location(668,44);
                adaptor.addChild(root_1, stream_groupGraphPattern.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(669, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "existsFunction");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "existsFunction"

    public static class notExistsFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "notExistsFunction"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:671:1: notExistsFunction : NOT EXISTS groupGraphPattern -> ^( NOT_EXISTS groupGraphPattern ) ;
    public final SparqlParser.notExistsFunction_return notExistsFunction() throws RecognitionException {
        SparqlParser.notExistsFunction_return retval = new SparqlParser.notExistsFunction_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NOT629=null;
        Token EXISTS630=null;
        SparqlParser.groupGraphPattern_return groupGraphPattern631 = null;


        CommonTree NOT629_tree=null;
        CommonTree EXISTS630_tree=null;
        RewriteRuleTokenStream stream_NOT=new RewriteRuleTokenStream(adaptor,"token NOT");
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try { dbg.enterRule(getGrammarFileName(), "notExistsFunction");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(671, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:672:5: ( NOT EXISTS groupGraphPattern -> ^( NOT_EXISTS groupGraphPattern ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:672:7: NOT EXISTS groupGraphPattern
            {
            dbg.location(672,7);
            NOT629=(Token)match(input,NOT,FOLLOW_NOT_in_notExistsFunction6874);  
            stream_NOT.add(NOT629);

            dbg.location(672,11);
            EXISTS630=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_notExistsFunction6876);  
            stream_EXISTS.add(EXISTS630);

            dbg.location(672,18);
            pushFollow(FOLLOW_groupGraphPattern_in_notExistsFunction6878);
            groupGraphPattern631=groupGraphPattern();

            state._fsp--;

            stream_groupGraphPattern.add(groupGraphPattern631.getTree());


            // AST REWRITE
            // elements: groupGraphPattern
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 672:36: -> ^( NOT_EXISTS groupGraphPattern )
            {
                dbg.location(672,39);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:672:39: ^( NOT_EXISTS groupGraphPattern )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(672,41);
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_EXISTS, "NOT_EXISTS"), root_1);

                dbg.location(672,52);
                adaptor.addChild(root_1, stream_groupGraphPattern.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(673, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "notExistsFunction");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "notExistsFunction"

    public static class aggregate_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "aggregate"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:675:1: aggregate : ( COUNT OPEN_BRACE ( DISTINCT )? ( ASTERISK | expression ) CLOSE_BRACE -> ^( COUNT ( DISTINCT )* ( ASTERISK )* ( expression )* ) | SUM OPEN_BRACE ( DISTINCT )? expression CLOSE_BRACE -> ^( SUM ( DISTINCT )* expression ) | MIN OPEN_BRACE ( DISTINCT )? expression CLOSE_BRACE -> ^( MIN ( DISTINCT )* expression ) | MAX OPEN_BRACE ( DISTINCT )? expression CLOSE_BRACE -> ^( MAX ( DISTINCT )* expression ) | AVG OPEN_BRACE ( DISTINCT )? expression CLOSE_BRACE -> ^( AVG ( DISTINCT )* expression ) | SAMPLE OPEN_BRACE ( DISTINCT )? expression CLOSE_BRACE -> ^( SAMPLE ( DISTINCT )? expression ) | GROUP_CONCAT OPEN_BRACE ( DISTINCT )? expression ( SEMICOLON SEPARATOR EQUAL string )? CLOSE_BRACE -> ^( GROUP_CONCAT ( DISTINCT )* expression ( string )* ) );
    public final SparqlParser.aggregate_return aggregate() throws RecognitionException {
        SparqlParser.aggregate_return retval = new SparqlParser.aggregate_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COUNT632=null;
        Token OPEN_BRACE633=null;
        Token DISTINCT634=null;
        Token ASTERISK635=null;
        Token CLOSE_BRACE637=null;
        Token SUM638=null;
        Token OPEN_BRACE639=null;
        Token DISTINCT640=null;
        Token CLOSE_BRACE642=null;
        Token MIN643=null;
        Token OPEN_BRACE644=null;
        Token DISTINCT645=null;
        Token CLOSE_BRACE647=null;
        Token MAX648=null;
        Token OPEN_BRACE649=null;
        Token DISTINCT650=null;
        Token CLOSE_BRACE652=null;
        Token AVG653=null;
        Token OPEN_BRACE654=null;
        Token DISTINCT655=null;
        Token CLOSE_BRACE657=null;
        Token SAMPLE658=null;
        Token OPEN_BRACE659=null;
        Token DISTINCT660=null;
        Token CLOSE_BRACE662=null;
        Token GROUP_CONCAT663=null;
        Token OPEN_BRACE664=null;
        Token DISTINCT665=null;
        Token SEMICOLON667=null;
        Token SEPARATOR668=null;
        Token EQUAL669=null;
        Token CLOSE_BRACE671=null;
        SparqlParser.expression_return expression636 = null;

        SparqlParser.expression_return expression641 = null;

        SparqlParser.expression_return expression646 = null;

        SparqlParser.expression_return expression651 = null;

        SparqlParser.expression_return expression656 = null;

        SparqlParser.expression_return expression661 = null;

        SparqlParser.expression_return expression666 = null;

        SparqlParser.string_return string670 = null;


        CommonTree COUNT632_tree=null;
        CommonTree OPEN_BRACE633_tree=null;
        CommonTree DISTINCT634_tree=null;
        CommonTree ASTERISK635_tree=null;
        CommonTree CLOSE_BRACE637_tree=null;
        CommonTree SUM638_tree=null;
        CommonTree OPEN_BRACE639_tree=null;
        CommonTree DISTINCT640_tree=null;
        CommonTree CLOSE_BRACE642_tree=null;
        CommonTree MIN643_tree=null;
        CommonTree OPEN_BRACE644_tree=null;
        CommonTree DISTINCT645_tree=null;
        CommonTree CLOSE_BRACE647_tree=null;
        CommonTree MAX648_tree=null;
        CommonTree OPEN_BRACE649_tree=null;
        CommonTree DISTINCT650_tree=null;
        CommonTree CLOSE_BRACE652_tree=null;
        CommonTree AVG653_tree=null;
        CommonTree OPEN_BRACE654_tree=null;
        CommonTree DISTINCT655_tree=null;
        CommonTree CLOSE_BRACE657_tree=null;
        CommonTree SAMPLE658_tree=null;
        CommonTree OPEN_BRACE659_tree=null;
        CommonTree DISTINCT660_tree=null;
        CommonTree CLOSE_BRACE662_tree=null;
        CommonTree GROUP_CONCAT663_tree=null;
        CommonTree OPEN_BRACE664_tree=null;
        CommonTree DISTINCT665_tree=null;
        CommonTree SEMICOLON667_tree=null;
        CommonTree SEPARATOR668_tree=null;
        CommonTree EQUAL669_tree=null;
        CommonTree CLOSE_BRACE671_tree=null;
        RewriteRuleTokenStream stream_SAMPLE=new RewriteRuleTokenStream(adaptor,"token SAMPLE");
        RewriteRuleTokenStream stream_AVG=new RewriteRuleTokenStream(adaptor,"token AVG");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleTokenStream stream_GROUP_CONCAT=new RewriteRuleTokenStream(adaptor,"token GROUP_CONCAT");
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_COUNT=new RewriteRuleTokenStream(adaptor,"token COUNT");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_SEPARATOR=new RewriteRuleTokenStream(adaptor,"token SEPARATOR");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_SUM=new RewriteRuleTokenStream(adaptor,"token SUM");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_ASTERISK=new RewriteRuleTokenStream(adaptor,"token ASTERISK");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_string=new RewriteRuleSubtreeStream(adaptor,"rule string");
        try { dbg.enterRule(getGrammarFileName(), "aggregate");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(675, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:676:5: ( COUNT OPEN_BRACE ( DISTINCT )? ( ASTERISK | expression ) CLOSE_BRACE -> ^( COUNT ( DISTINCT )* ( ASTERISK )* ( expression )* ) | SUM OPEN_BRACE ( DISTINCT )? expression CLOSE_BRACE -> ^( SUM ( DISTINCT )* expression ) | MIN OPEN_BRACE ( DISTINCT )? expression CLOSE_BRACE -> ^( MIN ( DISTINCT )* expression ) | MAX OPEN_BRACE ( DISTINCT )? expression CLOSE_BRACE -> ^( MAX ( DISTINCT )* expression ) | AVG OPEN_BRACE ( DISTINCT )? expression CLOSE_BRACE -> ^( AVG ( DISTINCT )* expression ) | SAMPLE OPEN_BRACE ( DISTINCT )? expression CLOSE_BRACE -> ^( SAMPLE ( DISTINCT )? expression ) | GROUP_CONCAT OPEN_BRACE ( DISTINCT )? expression ( SEMICOLON SEPARATOR EQUAL string )? CLOSE_BRACE -> ^( GROUP_CONCAT ( DISTINCT )* expression ( string )* ) )
            int alt140=7;
            try { dbg.enterDecision(140);

            switch ( input.LA(1) ) {
            case COUNT:
                {
                alt140=1;
                }
                break;
            case SUM:
                {
                alt140=2;
                }
                break;
            case MIN:
                {
                alt140=3;
                }
                break;
            case MAX:
                {
                alt140=4;
                }
                break;
            case AVG:
                {
                alt140=5;
                }
                break;
            case SAMPLE:
                {
                alt140=6;
                }
                break;
            case GROUP_CONCAT:
                {
                alt140=7;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 140, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(140);}

            switch (alt140) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:676:7: COUNT OPEN_BRACE ( DISTINCT )? ( ASTERISK | expression ) CLOSE_BRACE
                    {
                    dbg.location(676,7);
                    COUNT632=(Token)match(input,COUNT,FOLLOW_COUNT_in_aggregate6903);  
                    stream_COUNT.add(COUNT632);

                    dbg.location(676,13);
                    OPEN_BRACE633=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate6905);  
                    stream_OPEN_BRACE.add(OPEN_BRACE633);

                    dbg.location(676,24);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:676:24: ( DISTINCT )?
                    int alt131=2;
                    try { dbg.enterSubRule(131);
                    try { dbg.enterDecision(131);

                    int LA131_0 = input.LA(1);

                    if ( (LA131_0==DISTINCT) ) {
                        alt131=1;
                    }
                    } finally {dbg.exitDecision(131);}

                    switch (alt131) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:676:24: DISTINCT
                            {
                            dbg.location(676,24);
                            DISTINCT634=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate6907);  
                            stream_DISTINCT.add(DISTINCT634);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(131);}

                    dbg.location(676,34);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:676:34: ( ASTERISK | expression )
                    int alt132=2;
                    try { dbg.enterSubRule(132);
                    try { dbg.enterDecision(132);

                    int LA132_0 = input.LA(1);

                    if ( (LA132_0==ASTERISK) ) {
                        alt132=1;
                    }
                    else if ( (LA132_0==IRI_REF||LA132_0==PNAME_NS||LA132_0==OPEN_BRACE||LA132_0==INTEGER||(LA132_0>=PLUS && LA132_0<=NEGATION)||(LA132_0>=VAR1 && LA132_0<=VAR2)||(LA132_0>=NOT && LA132_0<=GROUP_CONCAT)||(LA132_0>=DECIMAL && LA132_0<=PNAME_LN)) ) {
                        alt132=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 132, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(132);}

                    switch (alt132) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:676:35: ASTERISK
                            {
                            dbg.location(676,35);
                            ASTERISK635=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_aggregate6911);  
                            stream_ASTERISK.add(ASTERISK635);


                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:676:46: expression
                            {
                            dbg.location(676,46);
                            pushFollow(FOLLOW_expression_in_aggregate6915);
                            expression636=expression();

                            state._fsp--;

                            stream_expression.add(expression636.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(132);}

                    dbg.location(676,58);
                    CLOSE_BRACE637=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate6918);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE637);



                    // AST REWRITE
                    // elements: ASTERISK, COUNT, expression, DISTINCT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 676:70: -> ^( COUNT ( DISTINCT )* ( ASTERISK )* ( expression )* )
                    {
                        dbg.location(676,73);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:676:73: ^( COUNT ( DISTINCT )* ( ASTERISK )* ( expression )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(676,75);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_COUNT.nextNode(), root_1);

                        dbg.location(676,81);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:676:81: ( DISTINCT )*
                        while ( stream_DISTINCT.hasNext() ) {
                            dbg.location(676,81);
                            adaptor.addChild(root_1, stream_DISTINCT.nextNode());

                        }
                        stream_DISTINCT.reset();
                        dbg.location(676,91);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:676:91: ( ASTERISK )*
                        while ( stream_ASTERISK.hasNext() ) {
                            dbg.location(676,91);
                            adaptor.addChild(root_1, stream_ASTERISK.nextNode());

                        }
                        stream_ASTERISK.reset();
                        dbg.location(676,101);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:676:101: ( expression )*
                        while ( stream_expression.hasNext() ) {
                            dbg.location(676,101);
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:677:7: SUM OPEN_BRACE ( DISTINCT )? expression CLOSE_BRACE
                    {
                    dbg.location(677,7);
                    SUM638=(Token)match(input,SUM,FOLLOW_SUM_in_aggregate6941);  
                    stream_SUM.add(SUM638);

                    dbg.location(677,11);
                    OPEN_BRACE639=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate6943);  
                    stream_OPEN_BRACE.add(OPEN_BRACE639);

                    dbg.location(677,22);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:677:22: ( DISTINCT )?
                    int alt133=2;
                    try { dbg.enterSubRule(133);
                    try { dbg.enterDecision(133);

                    int LA133_0 = input.LA(1);

                    if ( (LA133_0==DISTINCT) ) {
                        alt133=1;
                    }
                    } finally {dbg.exitDecision(133);}

                    switch (alt133) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:677:22: DISTINCT
                            {
                            dbg.location(677,22);
                            DISTINCT640=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate6945);  
                            stream_DISTINCT.add(DISTINCT640);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(133);}

                    dbg.location(677,32);
                    pushFollow(FOLLOW_expression_in_aggregate6948);
                    expression641=expression();

                    state._fsp--;

                    stream_expression.add(expression641.getTree());
                    dbg.location(677,43);
                    CLOSE_BRACE642=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate6950);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE642);



                    // AST REWRITE
                    // elements: DISTINCT, SUM, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 677:55: -> ^( SUM ( DISTINCT )* expression )
                    {
                        dbg.location(677,58);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:677:58: ^( SUM ( DISTINCT )* expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(677,60);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_SUM.nextNode(), root_1);

                        dbg.location(677,64);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:677:64: ( DISTINCT )*
                        while ( stream_DISTINCT.hasNext() ) {
                            dbg.location(677,64);
                            adaptor.addChild(root_1, stream_DISTINCT.nextNode());

                        }
                        stream_DISTINCT.reset();
                        dbg.location(677,74);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:678:7: MIN OPEN_BRACE ( DISTINCT )? expression CLOSE_BRACE
                    {
                    dbg.location(678,7);
                    MIN643=(Token)match(input,MIN,FOLLOW_MIN_in_aggregate6969);  
                    stream_MIN.add(MIN643);

                    dbg.location(678,11);
                    OPEN_BRACE644=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate6971);  
                    stream_OPEN_BRACE.add(OPEN_BRACE644);

                    dbg.location(678,22);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:678:22: ( DISTINCT )?
                    int alt134=2;
                    try { dbg.enterSubRule(134);
                    try { dbg.enterDecision(134);

                    int LA134_0 = input.LA(1);

                    if ( (LA134_0==DISTINCT) ) {
                        alt134=1;
                    }
                    } finally {dbg.exitDecision(134);}

                    switch (alt134) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:678:22: DISTINCT
                            {
                            dbg.location(678,22);
                            DISTINCT645=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate6973);  
                            stream_DISTINCT.add(DISTINCT645);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(134);}

                    dbg.location(678,32);
                    pushFollow(FOLLOW_expression_in_aggregate6976);
                    expression646=expression();

                    state._fsp--;

                    stream_expression.add(expression646.getTree());
                    dbg.location(678,43);
                    CLOSE_BRACE647=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate6978);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE647);



                    // AST REWRITE
                    // elements: DISTINCT, expression, MIN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 678:55: -> ^( MIN ( DISTINCT )* expression )
                    {
                        dbg.location(678,58);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:678:58: ^( MIN ( DISTINCT )* expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(678,60);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_MIN.nextNode(), root_1);

                        dbg.location(678,64);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:678:64: ( DISTINCT )*
                        while ( stream_DISTINCT.hasNext() ) {
                            dbg.location(678,64);
                            adaptor.addChild(root_1, stream_DISTINCT.nextNode());

                        }
                        stream_DISTINCT.reset();
                        dbg.location(678,74);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:679:7: MAX OPEN_BRACE ( DISTINCT )? expression CLOSE_BRACE
                    {
                    dbg.location(679,7);
                    MAX648=(Token)match(input,MAX,FOLLOW_MAX_in_aggregate6997);  
                    stream_MAX.add(MAX648);

                    dbg.location(679,11);
                    OPEN_BRACE649=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate6999);  
                    stream_OPEN_BRACE.add(OPEN_BRACE649);

                    dbg.location(679,22);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:679:22: ( DISTINCT )?
                    int alt135=2;
                    try { dbg.enterSubRule(135);
                    try { dbg.enterDecision(135);

                    int LA135_0 = input.LA(1);

                    if ( (LA135_0==DISTINCT) ) {
                        alt135=1;
                    }
                    } finally {dbg.exitDecision(135);}

                    switch (alt135) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:679:22: DISTINCT
                            {
                            dbg.location(679,22);
                            DISTINCT650=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate7001);  
                            stream_DISTINCT.add(DISTINCT650);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(135);}

                    dbg.location(679,32);
                    pushFollow(FOLLOW_expression_in_aggregate7004);
                    expression651=expression();

                    state._fsp--;

                    stream_expression.add(expression651.getTree());
                    dbg.location(679,43);
                    CLOSE_BRACE652=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate7006);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE652);



                    // AST REWRITE
                    // elements: DISTINCT, expression, MAX
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 679:55: -> ^( MAX ( DISTINCT )* expression )
                    {
                        dbg.location(679,58);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:679:58: ^( MAX ( DISTINCT )* expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(679,60);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_MAX.nextNode(), root_1);

                        dbg.location(679,64);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:679:64: ( DISTINCT )*
                        while ( stream_DISTINCT.hasNext() ) {
                            dbg.location(679,64);
                            adaptor.addChild(root_1, stream_DISTINCT.nextNode());

                        }
                        stream_DISTINCT.reset();
                        dbg.location(679,74);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:680:7: AVG OPEN_BRACE ( DISTINCT )? expression CLOSE_BRACE
                    {
                    dbg.location(680,7);
                    AVG653=(Token)match(input,AVG,FOLLOW_AVG_in_aggregate7025);  
                    stream_AVG.add(AVG653);

                    dbg.location(680,11);
                    OPEN_BRACE654=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate7027);  
                    stream_OPEN_BRACE.add(OPEN_BRACE654);

                    dbg.location(680,22);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:680:22: ( DISTINCT )?
                    int alt136=2;
                    try { dbg.enterSubRule(136);
                    try { dbg.enterDecision(136);

                    int LA136_0 = input.LA(1);

                    if ( (LA136_0==DISTINCT) ) {
                        alt136=1;
                    }
                    } finally {dbg.exitDecision(136);}

                    switch (alt136) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:680:22: DISTINCT
                            {
                            dbg.location(680,22);
                            DISTINCT655=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate7029);  
                            stream_DISTINCT.add(DISTINCT655);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(136);}

                    dbg.location(680,32);
                    pushFollow(FOLLOW_expression_in_aggregate7032);
                    expression656=expression();

                    state._fsp--;

                    stream_expression.add(expression656.getTree());
                    dbg.location(680,43);
                    CLOSE_BRACE657=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate7034);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE657);



                    // AST REWRITE
                    // elements: AVG, DISTINCT, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 680:55: -> ^( AVG ( DISTINCT )* expression )
                    {
                        dbg.location(680,58);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:680:58: ^( AVG ( DISTINCT )* expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(680,60);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_AVG.nextNode(), root_1);

                        dbg.location(680,64);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:680:64: ( DISTINCT )*
                        while ( stream_DISTINCT.hasNext() ) {
                            dbg.location(680,64);
                            adaptor.addChild(root_1, stream_DISTINCT.nextNode());

                        }
                        stream_DISTINCT.reset();
                        dbg.location(680,74);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:681:7: SAMPLE OPEN_BRACE ( DISTINCT )? expression CLOSE_BRACE
                    {
                    dbg.location(681,7);
                    SAMPLE658=(Token)match(input,SAMPLE,FOLLOW_SAMPLE_in_aggregate7053);  
                    stream_SAMPLE.add(SAMPLE658);

                    dbg.location(681,14);
                    OPEN_BRACE659=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate7055);  
                    stream_OPEN_BRACE.add(OPEN_BRACE659);

                    dbg.location(681,25);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:681:25: ( DISTINCT )?
                    int alt137=2;
                    try { dbg.enterSubRule(137);
                    try { dbg.enterDecision(137);

                    int LA137_0 = input.LA(1);

                    if ( (LA137_0==DISTINCT) ) {
                        alt137=1;
                    }
                    } finally {dbg.exitDecision(137);}

                    switch (alt137) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:681:25: DISTINCT
                            {
                            dbg.location(681,25);
                            DISTINCT660=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate7057);  
                            stream_DISTINCT.add(DISTINCT660);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(137);}

                    dbg.location(681,35);
                    pushFollow(FOLLOW_expression_in_aggregate7060);
                    expression661=expression();

                    state._fsp--;

                    stream_expression.add(expression661.getTree());
                    dbg.location(681,46);
                    CLOSE_BRACE662=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate7062);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE662);



                    // AST REWRITE
                    // elements: SAMPLE, DISTINCT, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 681:58: -> ^( SAMPLE ( DISTINCT )? expression )
                    {
                        dbg.location(681,61);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:681:61: ^( SAMPLE ( DISTINCT )? expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(681,63);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_SAMPLE.nextNode(), root_1);

                        dbg.location(681,70);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:681:70: ( DISTINCT )?
                        if ( stream_DISTINCT.hasNext() ) {
                            dbg.location(681,70);
                            adaptor.addChild(root_1, stream_DISTINCT.nextNode());

                        }
                        stream_DISTINCT.reset();
                        dbg.location(681,80);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:682:7: GROUP_CONCAT OPEN_BRACE ( DISTINCT )? expression ( SEMICOLON SEPARATOR EQUAL string )? CLOSE_BRACE
                    {
                    dbg.location(682,7);
                    GROUP_CONCAT663=(Token)match(input,GROUP_CONCAT,FOLLOW_GROUP_CONCAT_in_aggregate7081);  
                    stream_GROUP_CONCAT.add(GROUP_CONCAT663);

                    dbg.location(682,20);
                    OPEN_BRACE664=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate7083);  
                    stream_OPEN_BRACE.add(OPEN_BRACE664);

                    dbg.location(682,31);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:682:31: ( DISTINCT )?
                    int alt138=2;
                    try { dbg.enterSubRule(138);
                    try { dbg.enterDecision(138);

                    int LA138_0 = input.LA(1);

                    if ( (LA138_0==DISTINCT) ) {
                        alt138=1;
                    }
                    } finally {dbg.exitDecision(138);}

                    switch (alt138) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:682:31: DISTINCT
                            {
                            dbg.location(682,31);
                            DISTINCT665=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate7085);  
                            stream_DISTINCT.add(DISTINCT665);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(138);}

                    dbg.location(682,41);
                    pushFollow(FOLLOW_expression_in_aggregate7088);
                    expression666=expression();

                    state._fsp--;

                    stream_expression.add(expression666.getTree());
                    dbg.location(682,52);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:682:52: ( SEMICOLON SEPARATOR EQUAL string )?
                    int alt139=2;
                    try { dbg.enterSubRule(139);
                    try { dbg.enterDecision(139);

                    int LA139_0 = input.LA(1);

                    if ( (LA139_0==SEMICOLON) ) {
                        alt139=1;
                    }
                    } finally {dbg.exitDecision(139);}

                    switch (alt139) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:682:53: SEMICOLON SEPARATOR EQUAL string
                            {
                            dbg.location(682,53);
                            SEMICOLON667=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_aggregate7091);  
                            stream_SEMICOLON.add(SEMICOLON667);

                            dbg.location(682,63);
                            SEPARATOR668=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_aggregate7093);  
                            stream_SEPARATOR.add(SEPARATOR668);

                            dbg.location(682,73);
                            EQUAL669=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_aggregate7095);  
                            stream_EQUAL.add(EQUAL669);

                            dbg.location(682,79);
                            pushFollow(FOLLOW_string_in_aggregate7097);
                            string670=string();

                            state._fsp--;

                            stream_string.add(string670.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(139);}

                    dbg.location(682,88);
                    CLOSE_BRACE671=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate7101);  
                    stream_CLOSE_BRACE.add(CLOSE_BRACE671);



                    // AST REWRITE
                    // elements: DISTINCT, GROUP_CONCAT, string, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 682:100: -> ^( GROUP_CONCAT ( DISTINCT )* expression ( string )* )
                    {
                        dbg.location(682,103);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:682:103: ^( GROUP_CONCAT ( DISTINCT )* expression ( string )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(682,105);
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_GROUP_CONCAT.nextNode(), root_1);

                        dbg.location(682,118);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:682:118: ( DISTINCT )*
                        while ( stream_DISTINCT.hasNext() ) {
                            dbg.location(682,118);
                            adaptor.addChild(root_1, stream_DISTINCT.nextNode());

                        }
                        stream_DISTINCT.reset();
                        dbg.location(682,128);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        dbg.location(682,139);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:682:139: ( string )*
                        while ( stream_string.hasNext() ) {
                            dbg.location(682,139);
                            adaptor.addChild(root_1, stream_string.nextTree());

                        }
                        stream_string.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(683, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "aggregate");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "aggregate"

    public static class iriRefOrFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "iriRefOrFunction"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:685:1: iriRefOrFunction : iriRef ( argList )? -> ^( FUNCTION iriRef ( ^( ARG_LIST argList ) )? ) ;
    public final SparqlParser.iriRefOrFunction_return iriRefOrFunction() throws RecognitionException {
        SparqlParser.iriRefOrFunction_return retval = new SparqlParser.iriRefOrFunction_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        SparqlParser.iriRef_return iriRef672 = null;

        SparqlParser.argList_return argList673 = null;


        RewriteRuleSubtreeStream stream_argList=new RewriteRuleSubtreeStream(adaptor,"rule argList");
        RewriteRuleSubtreeStream stream_iriRef=new RewriteRuleSubtreeStream(adaptor,"rule iriRef");
        try { dbg.enterRule(getGrammarFileName(), "iriRefOrFunction");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(685, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:686:5: ( iriRef ( argList )? -> ^( FUNCTION iriRef ( ^( ARG_LIST argList ) )? ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:686:7: iriRef ( argList )?
            {
            dbg.location(686,7);
            pushFollow(FOLLOW_iriRef_in_iriRefOrFunction7136);
            iriRef672=iriRef();

            state._fsp--;

            stream_iriRef.add(iriRef672.getTree());
            dbg.location(686,14);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:686:14: ( argList )?
            int alt141=2;
            try { dbg.enterSubRule(141);
            try { dbg.enterDecision(141);

            int LA141_0 = input.LA(1);

            if ( (LA141_0==OPEN_BRACE) ) {
                alt141=1;
            }
            } finally {dbg.exitDecision(141);}

            switch (alt141) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:686:14: argList
                    {
                    dbg.location(686,14);
                    pushFollow(FOLLOW_argList_in_iriRefOrFunction7138);
                    argList673=argList();

                    state._fsp--;

                    stream_argList.add(argList673.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(141);}



            // AST REWRITE
            // elements: argList, iriRef
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 686:23: -> ^( FUNCTION iriRef ( ^( ARG_LIST argList ) )? )
            {
                dbg.location(686,26);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:686:26: ^( FUNCTION iriRef ( ^( ARG_LIST argList ) )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(686,28);
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION, "FUNCTION"), root_1);

                dbg.location(686,37);
                adaptor.addChild(root_1, stream_iriRef.nextTree());
                dbg.location(686,44);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:686:44: ( ^( ARG_LIST argList ) )?
                if ( stream_argList.hasNext() ) {
                    dbg.location(686,44);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:686:44: ^( ARG_LIST argList )
                    {
                    CommonTree root_2 = (CommonTree)adaptor.nil();
                    dbg.location(686,46);
                    root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARG_LIST, "ARG_LIST"), root_2);

                    dbg.location(686,55);
                    adaptor.addChild(root_2, stream_argList.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_argList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(687, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "iriRefOrFunction");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "iriRefOrFunction"

    public static class rdfLiteral_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rdfLiteral"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:689:1: rdfLiteral : string ( LANGTAG | ( REFERENCE iriRef ) )? -> ^( RDFLITERAL string ( LANGTAG )* ( iriRef )* ) ;
    public final SparqlParser.rdfLiteral_return rdfLiteral() throws RecognitionException {
        SparqlParser.rdfLiteral_return retval = new SparqlParser.rdfLiteral_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LANGTAG675=null;
        Token REFERENCE676=null;
        SparqlParser.string_return string674 = null;

        SparqlParser.iriRef_return iriRef677 = null;


        CommonTree LANGTAG675_tree=null;
        CommonTree REFERENCE676_tree=null;
        RewriteRuleTokenStream stream_REFERENCE=new RewriteRuleTokenStream(adaptor,"token REFERENCE");
        RewriteRuleTokenStream stream_LANGTAG=new RewriteRuleTokenStream(adaptor,"token LANGTAG");
        RewriteRuleSubtreeStream stream_string=new RewriteRuleSubtreeStream(adaptor,"rule string");
        RewriteRuleSubtreeStream stream_iriRef=new RewriteRuleSubtreeStream(adaptor,"rule iriRef");
        try { dbg.enterRule(getGrammarFileName(), "rdfLiteral");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(689, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:690:5: ( string ( LANGTAG | ( REFERENCE iriRef ) )? -> ^( RDFLITERAL string ( LANGTAG )* ( iriRef )* ) )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:690:7: string ( LANGTAG | ( REFERENCE iriRef ) )?
            {
            dbg.location(690,7);
            pushFollow(FOLLOW_string_in_rdfLiteral7171);
            string674=string();

            state._fsp--;

            stream_string.add(string674.getTree());
            dbg.location(690,14);
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:690:14: ( LANGTAG | ( REFERENCE iriRef ) )?
            int alt142=3;
            try { dbg.enterSubRule(142);
            try { dbg.enterDecision(142);

            int LA142_0 = input.LA(1);

            if ( (LA142_0==LANGTAG) ) {
                alt142=1;
            }
            else if ( (LA142_0==REFERENCE) ) {
                alt142=2;
            }
            } finally {dbg.exitDecision(142);}

            switch (alt142) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:690:15: LANGTAG
                    {
                    dbg.location(690,15);
                    LANGTAG675=(Token)match(input,LANGTAG,FOLLOW_LANGTAG_in_rdfLiteral7174);  
                    stream_LANGTAG.add(LANGTAG675);


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:690:25: ( REFERENCE iriRef )
                    {
                    dbg.location(690,25);
                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:690:25: ( REFERENCE iriRef )
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:690:26: REFERENCE iriRef
                    {
                    dbg.location(690,26);
                    REFERENCE676=(Token)match(input,REFERENCE,FOLLOW_REFERENCE_in_rdfLiteral7179);  
                    stream_REFERENCE.add(REFERENCE676);

                    dbg.location(690,36);
                    pushFollow(FOLLOW_iriRef_in_rdfLiteral7181);
                    iriRef677=iriRef();

                    state._fsp--;

                    stream_iriRef.add(iriRef677.getTree());

                    }


                    }
                    break;

            }
            } finally {dbg.exitSubRule(142);}



            // AST REWRITE
            // elements: iriRef, LANGTAG, string
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 690:46: -> ^( RDFLITERAL string ( LANGTAG )* ( iriRef )* )
            {
                dbg.location(690,49);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:690:49: ^( RDFLITERAL string ( LANGTAG )* ( iriRef )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                dbg.location(690,51);
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RDFLITERAL, "RDFLITERAL"), root_1);

                dbg.location(690,62);
                adaptor.addChild(root_1, stream_string.nextTree());
                dbg.location(690,69);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:690:69: ( LANGTAG )*
                while ( stream_LANGTAG.hasNext() ) {
                    dbg.location(690,69);
                    adaptor.addChild(root_1, stream_LANGTAG.nextNode());

                }
                stream_LANGTAG.reset();
                dbg.location(690,78);
                // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:690:78: ( iriRef )*
                while ( stream_iriRef.hasNext() ) {
                    dbg.location(690,78);
                    adaptor.addChild(root_1, stream_iriRef.nextTree());

                }
                stream_iriRef.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(691, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "rdfLiteral");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "rdfLiteral"

    public static class numericLiteral_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericLiteral"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:693:1: numericLiteral : ( numericLiteralUnsigned | numericLiteralPositive | numericLiteralNegative );
    public final SparqlParser.numericLiteral_return numericLiteral() throws RecognitionException {
        SparqlParser.numericLiteral_return retval = new SparqlParser.numericLiteral_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        SparqlParser.numericLiteralUnsigned_return numericLiteralUnsigned678 = null;

        SparqlParser.numericLiteralPositive_return numericLiteralPositive679 = null;

        SparqlParser.numericLiteralNegative_return numericLiteralNegative680 = null;



        try { dbg.enterRule(getGrammarFileName(), "numericLiteral");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(693, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:694:5: ( numericLiteralUnsigned | numericLiteralPositive | numericLiteralNegative )
            int alt143=3;
            try { dbg.enterDecision(143);

            switch ( input.LA(1) ) {
            case INTEGER:
            case DECIMAL:
            case DOUBLE:
                {
                alt143=1;
                }
                break;
            case INTEGER_POSITIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE_POSITIVE:
                {
                alt143=2;
                }
                break;
            case INTEGER_NEGATIVE:
            case DECIMAL_NEGATIVE:
            case DOUBLE_NEGATIVE:
                {
                alt143=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(143);}

            switch (alt143) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:694:7: numericLiteralUnsigned
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(694,7);
                    pushFollow(FOLLOW_numericLiteralUnsigned_in_numericLiteral7215);
                    numericLiteralUnsigned678=numericLiteralUnsigned();

                    state._fsp--;

                    adaptor.addChild(root_0, numericLiteralUnsigned678.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:695:7: numericLiteralPositive
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(695,7);
                    pushFollow(FOLLOW_numericLiteralPositive_in_numericLiteral7223);
                    numericLiteralPositive679=numericLiteralPositive();

                    state._fsp--;

                    adaptor.addChild(root_0, numericLiteralPositive679.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:696:7: numericLiteralNegative
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(696,7);
                    pushFollow(FOLLOW_numericLiteralNegative_in_numericLiteral7231);
                    numericLiteralNegative680=numericLiteralNegative();

                    state._fsp--;

                    adaptor.addChild(root_0, numericLiteralNegative680.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(697, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "numericLiteral");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "numericLiteral"

    public static class numericLiteralUnsigned_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericLiteralUnsigned"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:699:1: numericLiteralUnsigned : ( INTEGER | DECIMAL | DOUBLE );
    public final SparqlParser.numericLiteralUnsigned_return numericLiteralUnsigned() throws RecognitionException {
        SparqlParser.numericLiteralUnsigned_return retval = new SparqlParser.numericLiteralUnsigned_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set681=null;

        CommonTree set681_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "numericLiteralUnsigned");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(699, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:700:5: ( INTEGER | DECIMAL | DOUBLE )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            dbg.location(700,5);
            set681=(Token)input.LT(1);
            if ( input.LA(1)==INTEGER||(input.LA(1)>=DECIMAL && input.LA(1)<=DOUBLE) ) {
                input.consume();
                adaptor.addChild(root_0, (CommonTree)adaptor.create(set681));
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(703, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "numericLiteralUnsigned");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "numericLiteralUnsigned"

    public static class numericLiteralPositive_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericLiteralPositive"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:705:1: numericLiteralPositive : ( INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE );
    public final SparqlParser.numericLiteralPositive_return numericLiteralPositive() throws RecognitionException {
        SparqlParser.numericLiteralPositive_return retval = new SparqlParser.numericLiteralPositive_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set682=null;

        CommonTree set682_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "numericLiteralPositive");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(705, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:706:5: ( INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            dbg.location(706,5);
            set682=(Token)input.LT(1);
            if ( (input.LA(1)>=INTEGER_POSITIVE && input.LA(1)<=DOUBLE_POSITIVE) ) {
                input.consume();
                adaptor.addChild(root_0, (CommonTree)adaptor.create(set682));
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(709, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "numericLiteralPositive");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "numericLiteralPositive"

    public static class numericLiteralNegative_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericLiteralNegative"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:711:1: numericLiteralNegative : ( INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE );
    public final SparqlParser.numericLiteralNegative_return numericLiteralNegative() throws RecognitionException {
        SparqlParser.numericLiteralNegative_return retval = new SparqlParser.numericLiteralNegative_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set683=null;

        CommonTree set683_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "numericLiteralNegative");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(711, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:712:5: ( INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            dbg.location(712,5);
            set683=(Token)input.LT(1);
            if ( (input.LA(1)>=INTEGER_NEGATIVE && input.LA(1)<=DOUBLE_NEGATIVE) ) {
                input.consume();
                adaptor.addChild(root_0, (CommonTree)adaptor.create(set683));
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(715, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "numericLiteralNegative");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "numericLiteralNegative"

    public static class booleanLiteral_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "booleanLiteral"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:717:1: booleanLiteral : ( TRUE | FALSE );
    public final SparqlParser.booleanLiteral_return booleanLiteral() throws RecognitionException {
        SparqlParser.booleanLiteral_return retval = new SparqlParser.booleanLiteral_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set684=null;

        CommonTree set684_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "booleanLiteral");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(717, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:718:5: ( TRUE | FALSE )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            dbg.location(718,5);
            set684=(Token)input.LT(1);
            if ( (input.LA(1)>=TRUE && input.LA(1)<=FALSE) ) {
                input.consume();
                adaptor.addChild(root_0, (CommonTree)adaptor.create(set684));
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(720, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "booleanLiteral");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "booleanLiteral"

    public static class string_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "string"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:722:1: string : ( STRING_LITERAL1 | STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 );
    public final SparqlParser.string_return string() throws RecognitionException {
        SparqlParser.string_return retval = new SparqlParser.string_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set685=null;

        CommonTree set685_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "string");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(722, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:723:5: ( STRING_LITERAL1 | STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            dbg.location(723,5);
            set685=(Token)input.LT(1);
            if ( (input.LA(1)>=STRING_LITERAL1 && input.LA(1)<=STRING_LITERAL_LONG2) ) {
                input.consume();
                adaptor.addChild(root_0, (CommonTree)adaptor.create(set685));
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(727, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "string");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "string"

    public static class iriRef_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "iriRef"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:729:1: iriRef : ( IRI_REF -> ^( TERM_NO_PREFIX IRI_REF ) | prefixedName -> ^( PREFIX prefixedName ) );
    public final SparqlParser.iriRef_return iriRef() throws RecognitionException {
        SparqlParser.iriRef_return retval = new SparqlParser.iriRef_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IRI_REF686=null;
        SparqlParser.prefixedName_return prefixedName687 = null;


        CommonTree IRI_REF686_tree=null;
        RewriteRuleTokenStream stream_IRI_REF=new RewriteRuleTokenStream(adaptor,"token IRI_REF");
        RewriteRuleSubtreeStream stream_prefixedName=new RewriteRuleSubtreeStream(adaptor,"rule prefixedName");
        try { dbg.enterRule(getGrammarFileName(), "iriRef");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(729, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:730:5: ( IRI_REF -> ^( TERM_NO_PREFIX IRI_REF ) | prefixedName -> ^( PREFIX prefixedName ) )
            int alt144=2;
            try { dbg.enterDecision(144);

            int LA144_0 = input.LA(1);

            if ( (LA144_0==IRI_REF) ) {
                alt144=1;
            }
            else if ( (LA144_0==PNAME_NS||LA144_0==PNAME_LN) ) {
                alt144=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(144);}

            switch (alt144) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:730:7: IRI_REF
                    {
                    dbg.location(730,7);
                    IRI_REF686=(Token)match(input,IRI_REF,FOLLOW_IRI_REF_in_iriRef7414);  
                    stream_IRI_REF.add(IRI_REF686);



                    // AST REWRITE
                    // elements: IRI_REF
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 730:16: -> ^( TERM_NO_PREFIX IRI_REF )
                    {
                        dbg.location(730,19);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:730:19: ^( TERM_NO_PREFIX IRI_REF )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(730,21);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TERM_NO_PREFIX, "TERM_NO_PREFIX"), root_1);

                        dbg.location(730,36);
                        adaptor.addChild(root_1, stream_IRI_REF.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:731:7: prefixedName
                    {
                    dbg.location(731,7);
                    pushFollow(FOLLOW_prefixedName_in_iriRef7431);
                    prefixedName687=prefixedName();

                    state._fsp--;

                    stream_prefixedName.add(prefixedName687.getTree());


                    // AST REWRITE
                    // elements: prefixedName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 731:20: -> ^( PREFIX prefixedName )
                    {
                        dbg.location(731,23);
                        // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:731:23: ^( PREFIX prefixedName )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        dbg.location(731,25);
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PREFIX, "PREFIX"), root_1);

                        dbg.location(731,32);
                        adaptor.addChild(root_1, stream_prefixedName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(732, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "iriRef");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "iriRef"

    public static class prefixedName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prefixedName"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:734:1: prefixedName : ( PNAME_LN | PNAME_NS );
    public final SparqlParser.prefixedName_return prefixedName() throws RecognitionException {
        SparqlParser.prefixedName_return retval = new SparqlParser.prefixedName_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set688=null;

        CommonTree set688_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "prefixedName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(734, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:735:5: ( PNAME_LN | PNAME_NS )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            dbg.location(735,5);
            set688=(Token)input.LT(1);
            if ( input.LA(1)==PNAME_NS||input.LA(1)==PNAME_LN ) {
                input.consume();
                adaptor.addChild(root_0, (CommonTree)adaptor.create(set688));
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(737, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "prefixedName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "prefixedName"

    public static class blankNode_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "blankNode"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:739:1: blankNode : ( BLANK_NODE_LABEL | anon );
    public final SparqlParser.blankNode_return blankNode() throws RecognitionException {
        SparqlParser.blankNode_return retval = new SparqlParser.blankNode_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BLANK_NODE_LABEL689=null;
        SparqlParser.anon_return anon690 = null;


        CommonTree BLANK_NODE_LABEL689_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "blankNode");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(739, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:740:5: ( BLANK_NODE_LABEL | anon )
            int alt145=2;
            try { dbg.enterDecision(145);

            int LA145_0 = input.LA(1);

            if ( (LA145_0==BLANK_NODE_LABEL) ) {
                alt145=1;
            }
            else if ( (LA145_0==OPEN_SQUARE_BRACKET) ) {
                alt145=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 145, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(145);}

            switch (alt145) {
                case 1 :
                    dbg.enterAlt(1);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:740:7: BLANK_NODE_LABEL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(740,7);
                    BLANK_NODE_LABEL689=(Token)match(input,BLANK_NODE_LABEL,FOLLOW_BLANK_NODE_LABEL_in_blankNode7481); 
                    BLANK_NODE_LABEL689_tree = (CommonTree)adaptor.create(BLANK_NODE_LABEL689);
                    adaptor.addChild(root_0, BLANK_NODE_LABEL689_tree);


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:741:7: anon
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dbg.location(741,7);
                    pushFollow(FOLLOW_anon_in_blankNode7489);
                    anon690=anon();

                    state._fsp--;

                    adaptor.addChild(root_0, anon690.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(742, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "blankNode");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "blankNode"

    public static class anon_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "anon"
    // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:744:1: anon : OPEN_SQUARE_BRACKET CLOSE_SQUARE_BRACKET -> ANON ;
    public final SparqlParser.anon_return anon() throws RecognitionException {
        SparqlParser.anon_return retval = new SparqlParser.anon_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token OPEN_SQUARE_BRACKET691=null;
        Token CLOSE_SQUARE_BRACKET692=null;

        CommonTree OPEN_SQUARE_BRACKET691_tree=null;
        CommonTree CLOSE_SQUARE_BRACKET692_tree=null;
        RewriteRuleTokenStream stream_OPEN_SQUARE_BRACKET=new RewriteRuleTokenStream(adaptor,"token OPEN_SQUARE_BRACKET");
        RewriteRuleTokenStream stream_CLOSE_SQUARE_BRACKET=new RewriteRuleTokenStream(adaptor,"token CLOSE_SQUARE_BRACKET");

        try { dbg.enterRule(getGrammarFileName(), "anon");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(744, 1);

        try {
            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:745:5: ( OPEN_SQUARE_BRACKET CLOSE_SQUARE_BRACKET -> ANON )
            dbg.enterAlt(1);

            // /media/OS/Proyectos/epcc/sandbox/SPARQL-DQP11/grammar/Sparql.g:745:7: OPEN_SQUARE_BRACKET CLOSE_SQUARE_BRACKET
            {
            dbg.location(745,7);
            OPEN_SQUARE_BRACKET691=(Token)match(input,OPEN_SQUARE_BRACKET,FOLLOW_OPEN_SQUARE_BRACKET_in_anon7506);  
            stream_OPEN_SQUARE_BRACKET.add(OPEN_SQUARE_BRACKET691);

            dbg.location(745,27);
            CLOSE_SQUARE_BRACKET692=(Token)match(input,CLOSE_SQUARE_BRACKET,FOLLOW_CLOSE_SQUARE_BRACKET_in_anon7508);  
            stream_CLOSE_SQUARE_BRACKET.add(CLOSE_SQUARE_BRACKET692);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 745:48: -> ANON
            {
                dbg.location(745,51);
                adaptor.addChild(root_0, (CommonTree)adaptor.create(ANON, "ANON"));

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        dbg.location(746, 5);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "anon");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "anon"

    // Delegated rules


    protected DFA4 dfa4 = new DFA4(this);
    protected DFA44 dfa44 = new DFA44(this);
    protected DFA105 dfa105 = new DFA105(this);
    protected DFA127 dfa127 = new DFA127(this);
    static final String DFA4_eotS =
        "\10\uffff";
    static final String DFA4_eofS =
        "\10\uffff";
    static final String DFA4_minS =
        "\1\102\1\103\1\105\2\uffff\1\102\1\103\1\102";
    static final String DFA4_maxS =
        "\1\154\1\103\1\105\2\uffff\1\154\1\103\1\154";
    static final String DFA4_acceptS =
        "\3\uffff\1\1\1\2\3\uffff";
    static final String DFA4_specialS =
        "\10\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\1\1\uffff\1\2\1\uffff\1\3\6\uffff\1\3\3\uffff\2\3\14\uffff"+
            "\1\4\2\uffff\4\4\1\uffff\3\4\1\uffff\2\4",
            "\1\5",
            "\1\6",
            "",
            "",
            "\1\1\1\uffff\1\2\1\uffff\1\3\6\uffff\1\3\3\uffff\2\3\14\uffff"+
            "\1\4\2\uffff\4\4\1\uffff\3\4\1\uffff\2\4",
            "\1\7",
            "\1\1\1\uffff\1\2\1\uffff\1\3\6\uffff\1\3\3\uffff\2\3\14\uffff"+
            "\1\4\2\uffff\4\4\1\uffff\3\4\1\uffff\2\4"
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "106:1: query : ( prologue ( selectQuery | constructQuery | describeQuery | askQuery ) bindingsClause EOF -> ^( QUERY prologue ( ^( SELECT_QUERY selectQuery ) )* ( ^( CONSTRUCT_QUERY constructQuery ) )* ( ^( DESCRIBE_QUERY describeQuery ) )* ( ^( ASK_QUERY askQuery ) )* ) ( ^( BINDINGS_CLAUSE bindingsClause ) )* | update ( SEMICOLON ( update )? )* EOF -> ^( UPDATE ( update )+ ) );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA44_eotS =
        "\15\uffff";
    static final String DFA44_eofS =
        "\15\uffff";
    static final String DFA44_minS =
        "\1\137\7\uffff\1\117\1\116\3\uffff";
    static final String DFA44_maxS =
        "\1\154\7\uffff\2\152\3\uffff";
    static final String DFA44_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\uffff\1\12\1\10\1\11";
    static final String DFA44_specialS =
        "\15\uffff}>";
    static final String[] DFA44_transitionS = {
            "\1\1\2\uffff\1\2\1\3\1\7\1\4\1\uffff\1\5\1\6\1\10\1\uffff\1"+
            "\11\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\32\uffff\1\13",
            "\1\14\1\12\32\uffff\1\14",
            "",
            "",
            ""
    };

    static final short[] DFA44_eot = DFA.unpackEncodedString(DFA44_eotS);
    static final short[] DFA44_eof = DFA.unpackEncodedString(DFA44_eofS);
    static final char[] DFA44_min = DFA.unpackEncodedStringToUnsignedChars(DFA44_minS);
    static final char[] DFA44_max = DFA.unpackEncodedStringToUnsignedChars(DFA44_maxS);
    static final short[] DFA44_accept = DFA.unpackEncodedString(DFA44_acceptS);
    static final short[] DFA44_special = DFA.unpackEncodedString(DFA44_specialS);
    static final short[][] DFA44_transition;

    static {
        int numStates = DFA44_transitionS.length;
        DFA44_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA44_transition[i] = DFA.unpackEncodedString(DFA44_transitionS[i]);
        }
    }

    class DFA44 extends DFA {

        public DFA44(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 44;
            this.eot = DFA44_eot;
            this.eof = DFA44_eof;
            this.min = DFA44_min;
            this.max = DFA44_max;
            this.accept = DFA44_accept;
            this.special = DFA44_special;
            this.transition = DFA44_transition;
        }
        public String getDescription() {
            return "230:16: ( load | clear | drop | add | move | copy | create | insert | delete | modify )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA105_eotS =
        "\13\uffff";
    static final String DFA105_eofS =
        "\13\uffff";
    static final String DFA105_minS =
        "\1\107\3\uffff\1\133\1\120\2\uffff\1\120\2\uffff";
    static final String DFA105_maxS =
        "\1\176\3\uffff\2\170\2\uffff\1\133\2\uffff";
    static final String DFA105_acceptS =
        "\1\uffff\1\1\1\2\1\3\2\uffff\1\7\1\4\1\uffff\1\5\1\6";
    static final String DFA105_specialS =
        "\13\uffff}>";
    static final String[] DFA105_transitionS = {
            "\1\1\7\uffff\1\4\55\uffff\1\2\1\3",
            "",
            "",
            "",
            "\1\5\34\uffff\1\6",
            "\1\7\47\uffff\1\10",
            "",
            "",
            "\1\11\12\uffff\1\12",
            "",
            ""
    };

    static final short[] DFA105_eot = DFA.unpackEncodedString(DFA105_eotS);
    static final short[] DFA105_eof = DFA.unpackEncodedString(DFA105_eofS);
    static final char[] DFA105_min = DFA.unpackEncodedStringToUnsignedChars(DFA105_minS);
    static final char[] DFA105_max = DFA.unpackEncodedStringToUnsignedChars(DFA105_maxS);
    static final short[] DFA105_accept = DFA.unpackEncodedString(DFA105_acceptS);
    static final short[] DFA105_special = DFA.unpackEncodedString(DFA105_specialS);
    static final short[][] DFA105_transition;

    static {
        int numStates = DFA105_transitionS.length;
        DFA105_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA105_transition[i] = DFA.unpackEncodedString(DFA105_transitionS[i]);
        }
    }

    class DFA105 extends DFA {

        public DFA105(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 105;
            this.eot = DFA105_eot;
            this.eof = DFA105_eof;
            this.min = DFA105_min;
            this.max = DFA105_max;
            this.accept = DFA105_accept;
            this.special = DFA105_special;
            this.transition = DFA105_transition;
        }
        public String getDescription() {
            return "465:1: pathMod : ( ASTERISK -> PATH_MOD ASTERISK | QUESTION_MARK -> PATH_MOD QUESTION_MARK | PLUS -> PATH_MOD PLUS | OPEN_CURLY_BRACE i1= INTEGER CLOSE_CURLY_BRACE -> PATH_MOD $i1 | OPEN_CURLY_BRACE i1= INTEGER c= COMMA CLOSE_CURLY_BRACE -> PATH_MOD $i1 $c | OPEN_CURLY_BRACE i1= INTEGER COMMA i2= INTEGER CLOSE_CURLY_BRACE -> PATH_MOD $i1 $i2 | OPEN_CURLY_BRACE c= COMMA i2= INTEGER CLOSE_CURLY_BRACE -> PATH_MOD $c $i2);";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA127_eotS =
        "\70\uffff";
    static final String DFA127_eofS =
        "\70\uffff";
    static final String DFA127_minS =
        "\1\u008d\7\uffff\1\112\54\uffff\1\103\2\uffff";
    static final String DFA127_maxS =
        "\1\u00c1\7\uffff\1\112\54\uffff\1\u00da\2\uffff";
    static final String DFA127_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\uffff\1\12\1\13\1\14\1\15"+
        "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
        "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
        "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
        "\1\65\1\uffff\1\11\1\10";
    static final String DFA127_specialS =
        "\70\uffff}>";
    static final String[] DFA127_transitionS = {
            "\1\64\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
            "\1\14\1\15\1\16\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
            "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
            "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
            "\1\62\1\17\1\20\1\63",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\65",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\67\1\uffff\1\67\4\uffff\1\67\1\uffff\1\66\16\uffff\1\67"+
            "\42\uffff\2\67\2\uffff\2\67\11\uffff\74\67\3\uffff\17\67",
            "",
            ""
    };

    static final short[] DFA127_eot = DFA.unpackEncodedString(DFA127_eotS);
    static final short[] DFA127_eof = DFA.unpackEncodedString(DFA127_eofS);
    static final char[] DFA127_min = DFA.unpackEncodedStringToUnsignedChars(DFA127_minS);
    static final char[] DFA127_max = DFA.unpackEncodedStringToUnsignedChars(DFA127_maxS);
    static final short[] DFA127_accept = DFA.unpackEncodedString(DFA127_acceptS);
    static final short[] DFA127_special = DFA.unpackEncodedString(DFA127_specialS);
    static final short[][] DFA127_transition;

    static {
        int numStates = DFA127_transitionS.length;
        DFA127_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA127_transition[i] = DFA.unpackEncodedString(DFA127_transitionS[i]);
        }
    }

    class DFA127 extends DFA {

        public DFA127(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 127;
            this.eot = DFA127_eot;
            this.eof = DFA127_eof;
            this.min = DFA127_min;
            this.max = DFA127_max;
            this.accept = DFA127_accept;
            this.special = DFA127_special;
            this.transition = DFA127_transition;
        }
        public String getDescription() {
            return "599:1: builtInCall : ( STR OPEN_BRACE expression CLOSE_BRACE -> ^( STR expression ) | LANG OPEN_BRACE expression CLOSE_BRACE -> ^( LANG expression ) | LANGMATCHES OPEN_BRACE expression COMMA expression CLOSE_BRACE -> ^( LANGMATCHES ( expression )+ ) | DATATYPE OPEN_BRACE expression CLOSE_BRACE -> ^( DATATYPE expression ) | BOUND OPEN_BRACE var CLOSE_BRACE -> ^( BOUND var ) | IRI OPEN_BRACE expression CLOSE_BRACE -> ^( IRI expression ) | URI OPEN_BRACE expression CLOSE_BRACE -> ^( URI expression ) | BNODE ( OPEN_BRACE expression CLOSE_BRACE ) -> ^( BNODE expression ) | BNODE nil -> BNODE | RAND nil -> RAND | ABS OPEN_BRACE expression CLOSE_BRACE -> ^( ABS expression ) | CEIL OPEN_BRACE expression CLOSE_BRACE -> ^( CEIL expression ) | FLOOR OPEN_BRACE expression CLOSE_BRACE -> ^( FLOOR expression ) | ROUND OPEN_BRACE expression CLOSE_BRACE -> ^( ROUND expression ) | CONCAT expressionList -> ^( CONCAT expressionList ) | subStringExpression -> subStringExpression | strReplaceExpression -> strReplaceExpression | STRLEN OPEN_BRACE expression CLOSE_BRACE -> ^( STRLEN expression ) | UCASE OPEN_BRACE expression CLOSE_BRACE -> ^( UCASE expression ) | LCASE OPEN_BRACE expression CLOSE_BRACE -> ^( LCASE expression ) | ENCODE_FOR_URI OPEN_BRACE expression CLOSE_BRACE -> ^( ENCODE_FOR_URI expression ) | CONTAINS OPEN_BRACE expression COMMA expression CLOSE_BRACE -> ^( CONTAINS expression expression ) | STRSTARTS OPEN_BRACE expression COMMA expression CLOSE_BRACE -> ^( STRSTARTS expression expression ) | STRENDS OPEN_BRACE expression COMMA expression CLOSE_BRACE -> ^( STRENDS expression expression ) | STRBEFORE OPEN_BRACE expression COMMA expression CLOSE_BRACE -> ^( STRBEFORE expression expression ) | STRAFTER OPEN_BRACE expression COMMA expression CLOSE_BRACE -> ^( STRAFTER expression expression ) | YEAR OPEN_BRACE expression CLOSE_BRACE -> ^( YEAR expression ) | MONTH OPEN_BRACE expression CLOSE_BRACE -> ^( MONTH expression ) | DAY OPEN_BRACE expression CLOSE_BRACE -> ^( DAY expression ) | HOURS OPEN_BRACE expression CLOSE_BRACE -> ^( HOURS expression ) | MINUTES OPEN_BRACE expression CLOSE_BRACE -> ^( MINUTES expression ) | SECONDS OPEN_BRACE expression CLOSE_BRACE -> ^( SECONDS expression ) | TIMEZONE OPEN_BRACE expression CLOSE_BRACE -> ^( TIMEZONE expression ) | TZ OPEN_BRACE expression CLOSE_BRACE -> ^( TZ expression ) | NOW nil -> NOW | MD5 OPEN_BRACE expression CLOSE_BRACE -> ^( MD5 expression ) | SHA1 OPEN_BRACE expression CLOSE_BRACE -> ^( SHA1 expression ) | SHA256 OPEN_BRACE expression CLOSE_BRACE -> ^( SHA256 expression ) | SHA384 OPEN_BRACE expression CLOSE_BRACE -> ^( SHA384 expression ) | SHA512 OPEN_BRACE expression CLOSE_BRACE -> ^( SHA512 expression ) | COALESCE expressionList -> ^( COALESCE expressionList ) | IF OPEN_BRACE e1= expression COMMA e2= expression COMMA e3= expression CLOSE_BRACE -> ^( IF $e1 $e2 $e3) | STRLANG OPEN_BRACE expression COMMA expression CLOSE_BRACE -> ^( STRLANG expression expression ) | STRDT OPEN_BRACE expression COMMA expression CLOSE_BRACE -> ^( STRDT expression expression ) | SAMETERM OPEN_BRACE expression COMMA expression CLOSE_BRACE -> ^( SAMETERM expression expression ) | ISIRI OPEN_BRACE expression CLOSE_BRACE -> ^( ISIRI expression ) | ISURI OPEN_BRACE expression CLOSE_BRACE -> ^( ISURI expression ) | ISBLANK OPEN_BRACE expression CLOSE_BRACE -> ^( ISBLANK expression ) | ISLITERAL OPEN_BRACE expression CLOSE_BRACE -> ^( ISLITERAL expression ) | ISNUMERIC OPEN_BRACE expression CLOSE_BRACE -> ^( ISNUMERIC expression ) | regexExpression -> regexExpression | existsFunction -> existsFunction | notExistsFunction -> notExistsFunction );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
 

    public static final BitSet FOLLOW_prologue_in_query247 = new BitSet(new long[]{0x0000000000000000L,0x0000000000062040L});
    public static final BitSet FOLLOW_selectQuery_in_query250 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_constructQuery_in_query254 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_describeQuery_in_query258 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_askQuery_in_query262 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_bindingsClause_in_query265 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_query267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_update_in_query318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_query321 = new BitSet(new long[]{0x0000000000000000L,0x00001BBC80000016L});
    public static final BitSet FOLLOW_update_in_query323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_EOF_in_query328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_baseDecl_in_prologue366 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000014L});
    public static final BitSet FOLLOW_prefixDecl_in_prologue370 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000014L});
    public static final BitSet FOLLOW_BASE_in_baseDecl401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_IRI_REF_in_baseDecl403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREFIX_in_prefixDecl429 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_PNAME_NS_in_prefixDecl431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_IRI_REF_in_prefixDecl433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_selectQuery464 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000380L,0x000000000000000CL});
    public static final BitSet FOLLOW_set_quantifier_in_selectQuery466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000380L,0x000000000000000CL});
    public static final BitSet FOLLOW_asterisk_in_selectQuery469 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_selectClause_in_selectQuery471 = new BitSet(new long[]{0x0080000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_datasetClause_in_selectQuery473 = new BitSet(new long[]{0x0080000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_whereClause_in_selectQuery476 = new BitSet(new long[]{0x0000000000000000L,0x0000000014D00000L});
    public static final BitSet FOLLOW_solutionModifier_in_selectQuery478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_asterisk526 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_ASTERISK_in_asterisk539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_set_quantifier0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectClause_in_subSelect581 = new BitSet(new long[]{0x0080000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_whereClause_in_subSelect583 = new BitSet(new long[]{0x0000000000000000L,0x0000000014D00000L});
    public static final BitSet FOLLOW_solutionModifier_in_subSelect585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_selectClause621 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000380L});
    public static final BitSet FOLLOW_DISTINCT_in_selectClause624 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_REDUCED_in_selectClause628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_ASTERISK_in_selectClause632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_selectClause654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000700L,0x000000000000000CL});
    public static final BitSet FOLLOW_DISTINCT_in_selectClause657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000700L,0x000000000000000CL});
    public static final BitSet FOLLOW_REDUCED_in_selectClause661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000700L,0x000000000000000CL});
    public static final BitSet FOLLOW_selectVariables_in_selectClause668 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000700L,0x000000000000000CL});
    public static final BitSet FOLLOW_var_in_selectVariables703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_selectVariables720 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_selectVariables722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_AS_in_selectVariables724 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_var_in_selectVariables726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_selectVariables728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONSTRUCT_in_constructQuery755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_constructTemplate_in_constructQuery757 = new BitSet(new long[]{0x0080000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_datasetClause_in_constructQuery759 = new BitSet(new long[]{0x0080000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_whereClause_in_constructQuery762 = new BitSet(new long[]{0x0000000000000000L,0x0000000014D00000L});
    public static final BitSet FOLLOW_solutionModifier_in_constructQuery764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONSTRUCT_in_constructQuery789 = new BitSet(new long[]{0x0080000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_datasetClause_in_constructQuery791 = new BitSet(new long[]{0x0080000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_WHERE_in_constructQuery794 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_constructQuery796 = new BitSet(new long[]{0x0000000000000000L,0x0000000008010428L,0x000000000000000DL,0x000000000FFFF000L});
    public static final BitSet FOLLOW_triplesTemplate_in_constructQuery798 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_constructQuery801 = new BitSet(new long[]{0x0000000000000000L,0x0000000014D00000L});
    public static final BitSet FOLLOW_solutionModifier_in_constructQuery803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESCRIBE_in_describeQuery839 = new BitSet(new long[]{0x0000000000000000L,0x00000000000000A8L,0x000000000000000CL,0x0000000004000000L});
    public static final BitSet FOLLOW_varOrIRIref_in_describeQuery845 = new BitSet(new long[]{0x0080000000000000L,0x0000000014D0C028L,0x000000000000000CL,0x0000000004000000L});
    public static final BitSet FOLLOW_ASTERISK_in_describeQuery851 = new BitSet(new long[]{0x0080000000000000L,0x0000000014D0C000L});
    public static final BitSet FOLLOW_datasetClause_in_describeQuery854 = new BitSet(new long[]{0x0080000000000000L,0x0000000014D0C000L});
    public static final BitSet FOLLOW_whereClause_in_describeQuery857 = new BitSet(new long[]{0x0000000000000000L,0x0000000014D00000L});
    public static final BitSet FOLLOW_solutionModifier_in_describeQuery860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASK_in_askQuery899 = new BitSet(new long[]{0x0080000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_datasetClause_in_askQuery901 = new BitSet(new long[]{0x0080000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_whereClause_in_askQuery904 = new BitSet(new long[]{0x0000000000000000L,0x0000000014D00000L});
    public static final BitSet FOLLOW_solutionModifier_in_askQuery906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_datasetClause937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080028L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_NAMED_in_datasetClause939 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000028L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_iriRef_in_datasetClause942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHERE_in_whereClause970 = new BitSet(new long[]{0x0080000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_groupGraphPattern_in_whereClause973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_groupClause_in_solutionModifier995 = new BitSet(new long[]{0x0000000000000002L,0x0000000014C00000L});
    public static final BitSet FOLLOW_havingClause_in_solutionModifier998 = new BitSet(new long[]{0x0000000000000002L,0x0000000014800000L});
    public static final BitSet FOLLOW_orderClause_in_solutionModifier1001 = new BitSet(new long[]{0x0000000000000002L,0x0000000014000000L});
    public static final BitSet FOLLOW_limitOffsetClauses_in_solutionModifier1004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_groupClause1036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_BY_in_groupClause1038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000428L,0xFFFFFFFFFFFFA00CL,0x0000000004000003L});
    public static final BitSet FOLLOW_groupCondition_in_groupClause1040 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000428L,0xFFFFFFFFFFFFA00CL,0x0000000004000003L});
    public static final BitSet FOLLOW_builtInCall_in_groupCondition1074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionCall_in_groupCondition1090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_groupCondition1106 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_groupCondition1108 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_AS_in_groupCondition1111 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_var_in_groupCondition1113 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_groupCondition1117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_groupCondition1136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HAVING_in_havingClause1165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000428L,0xFFFFFFFFFFFFA000L,0x0000000004000003L});
    public static final BitSet FOLLOW_constraint_in_havingClause1167 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000428L,0xFFFFFFFFFFFFA000L,0x0000000004000003L});
    public static final BitSet FOLLOW_ORDER_in_orderClause1199 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_BY_in_orderClause1201 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000428L,0xFFFFFFFFFFFFA00CL,0x0000000004000003L});
    public static final BitSet FOLLOW_orderCondition_in_orderClause1203 = new BitSet(new long[]{0x0000000000000002L,0x0000000003000428L,0xFFFFFFFFFFFFA00CL,0x0000000004000003L});
    public static final BitSet FOLLOW_ASC_in_orderCondition1230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_brackettedExpression_in_orderCondition1232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_orderCondition1250 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_brackettedExpression_in_orderCondition1252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constraint_in_orderCondition1270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_orderCondition1286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_limitClause_in_limitOffsetClauses1316 = new BitSet(new long[]{0x0000000000000002L,0x0000000014000000L});
    public static final BitSet FOLLOW_offsetClause_in_limitOffsetClauses1318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_offsetClause_in_limitOffsetClauses1334 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_limitClause_in_limitOffsetClauses1336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIMIT_in_limitClause1361 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_INTEGER_in_limitClause1363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OFFSET_in_offsetClause1388 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_INTEGER_in_offsetClause1390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BINDINGS_in_bindingsClause1416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L,0x000000000000000CL});
    public static final BitSet FOLLOW_var_in_bindingsClause1418 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L,0x000000000000000CL});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_bindingsClause1421 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010400L});
    public static final BitSet FOLLOW_bindingValueList_in_bindingsClause1423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010400L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_bindingsClause1426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_bindingValueList1462 = new BitSet(new long[]{0x0000000000000000L,0x0000000048001028L,0x0000000000000000L,0x0000000007FFF000L});
    public static final BitSet FOLLOW_bindingValue_in_bindingValueList1464 = new BitSet(new long[]{0x0000000000000000L,0x0000000048001028L,0x0000000000000000L,0x0000000007FFF000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_bindingValueList1467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iriRef_in_bindingValue1498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rdfLiteral_in_bindingValue1502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteral_in_bindingValue1506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_bindingValue1510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNDEF_in_bindingValue1514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prologue_in_update1535 = new BitSet(new long[]{0x0000000000000000L,0x00001BBC80000014L});
    public static final BitSet FOLLOW_load_in_update1538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clear_in_update1542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_drop_in_update1546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_add_in_update1550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_move_in_update1554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_copy_in_update1558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_in_update1562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insert_in_update1566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delete_in_update1570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modify_in_update1574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOAD_in_load1637 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000028L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_SILENT_in_load1639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000028L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_iriRef_in_load1642 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_INTO_in_load1645 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_graphRef_in_load1647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLEAR_in_clear1684 = new BitSet(new long[]{0x0000000000000000L,0x0001C00100080000L});
    public static final BitSet FOLLOW_SILENT_in_clear1687 = new BitSet(new long[]{0x0000000000000000L,0x0001C00100080000L});
    public static final BitSet FOLLOW_graphRefAll_in_clear1690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DROP_in_drop1722 = new BitSet(new long[]{0x0000000000000000L,0x0001C00100080000L});
    public static final BitSet FOLLOW_SILENT_in_drop1724 = new BitSet(new long[]{0x0000000000000000L,0x0001C00100080000L});
    public static final BitSet FOLLOW_graphRefAll_in_drop1727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_create1756 = new BitSet(new long[]{0x0000000000000000L,0x0000800100000000L});
    public static final BitSet FOLLOW_SILENT_in_create1758 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_graphRef_in_create1761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ADD_in_add1793 = new BitSet(new long[]{0x0000000000000000L,0x0000C00100000028L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_SILENT_in_add1795 = new BitSet(new long[]{0x0000000000000000L,0x0000C00100000028L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_graphOrDefault_in_add1800 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_TO_in_add1802 = new BitSet(new long[]{0x0000000000000000L,0x0000C00100000028L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_graphOrDefault_in_add1806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOVE_in_move1842 = new BitSet(new long[]{0x0000000000000000L,0x0000C00100000028L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_SILENT_in_move1844 = new BitSet(new long[]{0x0000000000000000L,0x0000C00100000028L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_graphOrDefault_in_move1849 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_TO_in_move1851 = new BitSet(new long[]{0x0000000000000000L,0x0000C00100000028L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_graphOrDefault_in_move1855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COPY_in_copy1891 = new BitSet(new long[]{0x0000000000000000L,0x0000C00100000028L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_SILENT_in_copy1893 = new BitSet(new long[]{0x0000000000000000L,0x0000C00100000028L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_graphOrDefault_in_copy1898 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_TO_in_copy1900 = new BitSet(new long[]{0x0000000000000000L,0x0000C00100000028L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_graphOrDefault_in_copy1904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_insert1936 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_DATA_in_insert1938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_quadPattern_in_insert1940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_delete1974 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_deleteData_in_delete1976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_delete1992 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_deleteWhere_in_delete1994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DATA_in_deleteData2019 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_quadPattern_in_deleteData2021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHERE_in_deleteWhere2048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_quadPattern_in_deleteWhere2050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITH_in_modify2082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000028L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_iriRef_in_modify2084 = new BitSet(new long[]{0x0000000000000000L,0x00001BBC80000014L});
    public static final BitSet FOLLOW_deleteClause_in_modify2089 = new BitSet(new long[]{0x0000000000000000L,0x00003BBC80004014L});
    public static final BitSet FOLLOW_insertClause_in_modify2091 = new BitSet(new long[]{0x0000000000000000L,0x0000200000004000L});
    public static final BitSet FOLLOW_insertClause_in_modify2096 = new BitSet(new long[]{0x0000000000000000L,0x0000200000004000L});
    public static final BitSet FOLLOW_usingClause_in_modify2099 = new BitSet(new long[]{0x0000000000000000L,0x0000200000004000L});
    public static final BitSet FOLLOW_WHERE_in_modify2102 = new BitSet(new long[]{0x0080000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_groupGraphPattern_in_modify2104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_deleteClause2151 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_quadPattern_in_deleteClause2153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_insertClause2184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_quadPattern_in_insertClause2186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_usingClause2211 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080028L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_NAMED_in_usingClause2213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000028L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_iriRef_in_usingClause2216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_graphOrDefault2247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GRAPH_in_graphOrDefault2256 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000028L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_iriRef_in_graphOrDefault2259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GRAPH_in_graphRef2286 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000028L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_iriRef_in_graphRef2288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_graphRef_in_graphRefAll2305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_graphRefAll2309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMED_in_graphRefAll2313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_graphRefAll2317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_quadPattern2334 = new BitSet(new long[]{0x0000000000000000L,0x0000800008010428L,0x000000000000000DL,0x000000000FFFF000L});
    public static final BitSet FOLLOW_quads_in_quadPattern2336 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_quadPattern2338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesTemplate_in_quads2363 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_quadsDetails_in_quads2366 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_quadsNotTriples_in_quadsDetails2398 = new BitSet(new long[]{0x0000000000000002L,0x0002000008000428L,0x000000000000000DL,0x000000000FFFF000L});
    public static final BitSet FOLLOW_DOT_in_quadsDetails2400 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000428L,0x000000000000000DL,0x000000000FFFF000L});
    public static final BitSet FOLLOW_triplesTemplate_in_quadsDetails2403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GRAPH_in_quadsNotTriples2432 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000028L,0x000000000000000CL,0x0000000004000000L});
    public static final BitSet FOLLOW_varOrIRIref_in_quadsNotTriples2434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_quadsNotTriples2436 = new BitSet(new long[]{0x0000000000000000L,0x0000000008010428L,0x000000000000000DL,0x000000000FFFF000L});
    public static final BitSet FOLLOW_triplesTemplate_in_quadsNotTriples2438 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_quadsNotTriples2441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesSameSubject_in_triplesTemplate2473 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L});
    public static final BitSet FOLLOW_DOT_in_triplesTemplate2476 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000428L,0x000000000000000DL,0x000000000FFFF000L});
    public static final BitSet FOLLOW_triplesSameSubject_in_triplesTemplate2478 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L});
    public static final BitSet FOLLOW_DOT_in_triplesTemplate2482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_groupGraphPattern2514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_subSelect_in_groupGraphPattern2516 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_groupGraphPattern2518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_groupGraphPattern2534 = new BitSet(new long[]{0x0080000000000000L,0x00BC80000800C428L,0x000000000000000DL,0x000000000FFFF000L});
    public static final BitSet FOLLOW_groupGraphPatternSub_in_groupGraphPattern2536 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_groupGraphPattern2538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_groupGraphPattern2554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_groupGraphPattern2556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesBlock_in_groupGraphPatternSub2585 = new BitSet(new long[]{0x0080000000000002L,0x00BC80000800C428L,0x000000000000000DL,0x000000000FFFF000L});
    public static final BitSet FOLLOW_groupGraphPatternSubDetail_in_groupGraphPatternSub2587 = new BitSet(new long[]{0x0080000000000002L,0x00BC80000800C428L,0x000000000000000DL,0x000000000FFFF000L});
    public static final BitSet FOLLOW_groupGraphPatternSubDetail_in_groupGraphPatternSub2603 = new BitSet(new long[]{0x0080000000000002L,0x00BC80000800C428L,0x000000000000000DL,0x000000000FFFF000L});
    public static final BitSet FOLLOW_graphPatternNotTriples_in_groupGraphPatternSubDetail2626 = new BitSet(new long[]{0x0000000000000002L,0x0002000008000428L,0x000000000000000DL,0x000000000FFFF000L});
    public static final BitSet FOLLOW_DOT_in_groupGraphPatternSubDetail2628 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000428L,0x000000000000000DL,0x000000000FFFF000L});
    public static final BitSet FOLLOW_triplesBlock_in_groupGraphPatternSubDetail2631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesSameSubjectPath_in_triplesBlock2656 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L});
    public static final BitSet FOLLOW_DOT_in_triplesBlock2659 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000428L,0x000000000000000DL,0x000000000FFFF000L});
    public static final BitSet FOLLOW_triplesSameSubjectPath_in_triplesBlock2661 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L});
    public static final BitSet FOLLOW_DOT_in_triplesBlock2665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_groupOrUnionGraphPattern_in_graphPatternNotTriples2688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_optionalGraphPattern_in_graphPatternNotTriples2692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minusGraphPattern_in_graphPatternNotTriples2696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_graphGraphPattern_in_graphPatternNotTriples2700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_serviceGraphPattern_in_graphPatternNotTriples2704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_filter_in_graphPatternNotTriples2708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bind_in_graphPatternNotTriples2712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPTIONAL_in_optionalGraphPattern2729 = new BitSet(new long[]{0x0080000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_groupGraphPattern_in_optionalGraphPattern2731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GRAPH_in_graphGraphPattern2756 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000028L,0x000000000000000CL,0x0000000004000000L});
    public static final BitSet FOLLOW_varOrIRIref_in_graphGraphPattern2758 = new BitSet(new long[]{0x0080000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_groupGraphPattern_in_graphGraphPattern2760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SERVICE_in_serviceGraphPattern2787 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000028L,0x000000000000000CL,0x0000000004000000L});
    public static final BitSet FOLLOW_SILENT_in_serviceGraphPattern2789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000028L,0x000000000000000CL,0x0000000004000000L});
    public static final BitSet FOLLOW_varOrIRIref_in_serviceGraphPattern2792 = new BitSet(new long[]{0x0080000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_groupGraphPattern_in_serviceGraphPattern2794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIND_in_bind2828 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_bind2830 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_bind2832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_AS_in_bind2834 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_var_in_bind2836 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_bind2838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_KEYWORD_in_minusGraphPattern2875 = new BitSet(new long[]{0x0080000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_groupGraphPattern_in_minusGraphPattern2877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_groupGraphPattern_in_groupOrUnionGraphPattern2905 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_UNION_in_groupOrUnionGraphPattern2913 = new BitSet(new long[]{0x0080000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_groupGraphPattern_in_groupOrUnionGraphPattern2917 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_FILTER_in_filter2949 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000428L,0xFFFFFFFFFFFFA000L,0x0000000004000003L});
    public static final BitSet FOLLOW_constraint_in_filter2951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackettedExpression_in_constraint2976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtInCall_in_constraint2993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionCall_in_constraint3009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iriRef_in_functionCall3035 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000428L,0x000000000000000DL,0x000000000FFFF000L});
    public static final BitSet FOLLOW_argList_in_functionCall3037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nil_in_argList3068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_argList3080 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000528L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_DISTINCT_in_argList3082 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_argList3085 = new BitSet(new long[]{0x0000000000000000L,0x0100000000001000L});
    public static final BitSet FOLLOW_COMMA_in_argList3088 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_argList3090 = new BitSet(new long[]{0x0000000000000000L,0x0100000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_argList3094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nil_in_expressionList3120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_expressionList3124 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_expressionList3126 = new BitSet(new long[]{0x0000000000000000L,0x0100000000001000L});
    public static final BitSet FOLLOW_COMMA_in_expressionList3129 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_expressionList3131 = new BitSet(new long[]{0x0000000000000000L,0x0100000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_expressionList3135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_constructTemplate3166 = new BitSet(new long[]{0x0000000000000000L,0x0000000008010428L,0x000000000000000DL,0x000000000FFFF000L});
    public static final BitSet FOLLOW_constructTriples_in_constructTemplate3168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_constructTemplate3171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesSameSubject_in_constructTriples3197 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L});
    public static final BitSet FOLLOW_DOT_in_constructTriples3200 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000428L,0x000000000000000DL,0x000000000FFFF000L});
    public static final BitSet FOLLOW_triplesSameSubject_in_constructTriples3202 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L});
    public static final BitSet FOLLOW_DOT_in_constructTriples3206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrTerm_in_triplesSameSubject3229 = new BitSet(new long[]{0x0000000000000002L,0x9200000000000428L,0x000000000000000CL,0x0000000004000000L});
    public static final BitSet FOLLOW_propertyListNotEmpty_in_triplesSameSubject3231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesNode_in_triplesSameSubject3260 = new BitSet(new long[]{0x0000000000000002L,0x9200000000000428L,0x000000000000000CL,0x0000000004000000L});
    public static final BitSet FOLLOW_propertyListNotEmpty_in_triplesSameSubject3262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyListNotEmptyDetails_in_propertyListNotEmpty3296 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_propertyListNotEmpty3299 = new BitSet(new long[]{0x0000000000000002L,0x920000000000042AL,0x000000000000000CL,0x0000000004000000L});
    public static final BitSet FOLLOW_propertyListNotEmptyDetails_in_propertyListNotEmpty3301 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_graphNode_in_objectList3327 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_objectList3330 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000428L,0x000000000000000DL,0x000000000FFFF000L});
    public static final BitSet FOLLOW_graphNode_in_objectList3332 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_varOrIRIref_in_verb3360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_A_in_verb3368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrTerm_in_triplesSameSubjectPath3385 = new BitSet(new long[]{0x0000000000000000L,0x9200000000000428L,0x000000000000000CL,0x0000000004000000L});
    public static final BitSet FOLLOW_propertyListNotEmptyPath_in_triplesSameSubjectPath3387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesNode_in_triplesSameSubjectPath3409 = new BitSet(new long[]{0x0000000000000002L,0x9200000000000428L,0x000000000000000CL,0x0000000004000000L});
    public static final BitSet FOLLOW_propertyListNotEmpty_in_triplesSameSubjectPath3411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyListNotEmptyDetails_in_propertyListNotEmptyPath3443 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_propertyListNotEmptyPath3446 = new BitSet(new long[]{0x0000000000000002L,0x920000000000042AL,0x000000000000000CL,0x0000000004000000L});
    public static final BitSet FOLLOW_propertyListNotEmptyDetails_in_propertyListNotEmptyPath3448 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_verbSimpleOrPath_in_propertyListNotEmptyDetails3475 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000428L,0x000000000000000DL,0x000000000FFFF000L});
    public static final BitSet FOLLOW_objectList_in_propertyListNotEmptyDetails3477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verbPath_in_verbSimpleOrPath3507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verbSimple_in_verbSimpleOrPath3515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_path_in_verbPath3534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_verbSimple3555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pathSequence_in_path3585 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_PIPE_in_path3588 = new BitSet(new long[]{0x0000000000000000L,0x9200000000000428L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_pathSequence_in_path3590 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_pathEltOrInverse_in_pathSequence3619 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_DIVIDE_in_pathSequence3622 = new BitSet(new long[]{0x0000000000000000L,0x9200000000000428L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_pathEltOrInverse_in_pathSequence3624 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_INVERSE_in_pathEltOrInverse3655 = new BitSet(new long[]{0x0000000000000000L,0x9200000000000428L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_pathElt_in_pathEltOrInverse3659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pathPrimary_in_pathElt3699 = new BitSet(new long[]{0x0000000000000002L,0x6000000000008080L});
    public static final BitSet FOLLOW_pathMod_in_pathElt3701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASTERISK_in_pathMod3719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_MARK_in_pathMod3733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_pathMod3748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_pathMod3763 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_INTEGER_in_pathMod3767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_pathMod3769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_pathMod3784 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_INTEGER_in_pathMod3788 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_pathMod3792 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_pathMod3794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_pathMod3812 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_INTEGER_in_pathMod3816 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_pathMod3818 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_INTEGER_in_pathMod3822 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_pathMod3824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_pathMod3843 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_pathMod3847 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_INTEGER_in_pathMod3851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_pathMod3853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iriRef_in_pathPrimary3880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_A_in_pathPrimary3896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEGATION_in_pathPrimary3912 = new BitSet(new long[]{0x0000000000000000L,0x1200000000000428L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_pathNegatedPropertySet_in_pathPrimary3914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_pathPrimary3930 = new BitSet(new long[]{0x0000000000000000L,0x9200000000000428L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_path_in_pathPrimary3932 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_pathPrimary3934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pathOneInPropertySet_in_pathNegatedPropertySet3959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_pathNegatedPropertySet3975 = new BitSet(new long[]{0x0000000000000000L,0x1200000000001028L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_pathOneInPropertySet_in_pathNegatedPropertySet3978 = new BitSet(new long[]{0x0000000000000000L,0x0400000000001000L});
    public static final BitSet FOLLOW_PIPE_in_pathNegatedPropertySet3981 = new BitSet(new long[]{0x0000000000000000L,0x1200000000000028L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_pathOneInPropertySet_in_pathNegatedPropertySet3983 = new BitSet(new long[]{0x0000000000000000L,0x0400000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_pathNegatedPropertySet3989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INVERSE_in_pathOneInPropertySet4018 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000028L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_iriRef_in_pathOneInPropertySet4022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_A_in_pathOneInPropertySet4026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_triplesNode4045 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000428L,0x000000000000000DL,0x000000000FFFF000L});
    public static final BitSet FOLLOW_graphNode_in_triplesNode4047 = new BitSet(new long[]{0x0000000000000000L,0x0000000008001428L,0x000000000000000DL,0x000000000FFFF000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_triplesNode4050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_SQUARE_BRACKET_in_triplesNode4067 = new BitSet(new long[]{0x0000000000000000L,0x9200000000000428L,0x000000000000000CL,0x0000000004000000L});
    public static final BitSet FOLLOW_propertyListNotEmpty_in_triplesNode4069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_CLOSE_SQUARE_BRACKET_in_triplesNode4071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrTerm_in_graphNode4096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesNode_in_graphNode4100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_varOrTerm4117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_graphTerm_in_varOrTerm4133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_varOrIRIref4158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iriRef_in_varOrIRIref4174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_var0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iriRef_in_graphTerm4220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rdfLiteral_in_graphTerm4228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteral_in_graphTerm4236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_graphTerm4244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_blankNode_in_graphTerm4252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nil_in_graphTerm4260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_nil4281 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_nil4283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalOrExpression_in_expression4304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression4324 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_OR_in_conditionalOrExpression4333 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression4337 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_valueLogical_in_conditionalAndExpression4371 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_AND_in_conditionalAndExpression4380 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_valueLogical_in_conditionalAndExpression4384 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_relationalExpression_in_valueLogical4415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression4437 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000003FC0L});
    public static final BitSet FOLLOW_EQUAL_in_relationalExpression4447 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression4451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EQUAL_in_relationalExpression4508 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression4512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_in_relationalExpression4567 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression4571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_in_relationalExpression4626 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression4630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_EQUAL_in_relationalExpression4684 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression4688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_EQUAL_in_relationalExpression4742 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression4746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_in_relationalExpression4802 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000428L,0x000000000000000DL,0x000000000FFFF000L});
    public static final BitSet FOLLOW_expressionList_in_relationalExpression4806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_relationalExpression4860 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_IN_in_relationalExpression4862 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000428L,0x000000000000000DL,0x000000000FFFF000L});
    public static final BitSet FOLLOW_expressionList_in_relationalExpression4866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_numericExpression4900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression4920 = new BitSet(new long[]{0x0000000000000002L,0x4000000008000000L,0x0000000000004000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_additiveOperator_in_additiveExpression4930 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression4934 = new BitSet(new long[]{0x0000000000000002L,0x4000000008000000L,0x0000000000004000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_numericLiteralPositive_in_additiveExpression5001 = new BitSet(new long[]{0x0000000000000002L,0x4800000008000080L,0x0000000000004000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_numericLiteralNegative_in_additiveExpression5019 = new BitSet(new long[]{0x0000000000000002L,0x4800000008000080L,0x0000000000004000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_ASTERISK_in_additiveExpression5083 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_unaryExpression_in_additiveExpression5087 = new BitSet(new long[]{0x0000000000000002L,0x4000000008000000L,0x0000000000004000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_DIVIDE_in_additiveExpression5153 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_unaryExpression_in_additiveExpression5157 = new BitSet(new long[]{0x0000000000000002L,0x4000000008000000L,0x0000000000004000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_set_in_additiveOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression5223 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000080L});
    public static final BitSet FOLLOW_multiplicativeOperator_in_multiplicativeExpression5232 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression5236 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000080L});
    public static final BitSet FOLLOW_set_in_multiplicativeOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEGATION_in_unaryExpression5292 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_primaryExpression_in_unaryExpression5294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_unaryExpression5312 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_primaryExpression_in_unaryExpression5314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression5332 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_primaryExpression_in_unaryExpression5334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primaryExpression_in_unaryExpression5352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackettedExpression_in_primaryExpression5370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtInCall_in_primaryExpression5388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iriRefOrFunction_in_primaryExpression5405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rdfLiteral_in_primaryExpression5421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteral_in_primaryExpression5430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_primaryExpression5446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_primaryExpression5462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_aggregate_in_primaryExpression5478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_brackettedExpression5503 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_brackettedExpression5505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_brackettedExpression5507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STR_in_builtInCall5532 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall5534 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall5536 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall5538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LANG_in_builtInCall5554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall5556 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall5558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall5560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LANGMATCHES_in_builtInCall5576 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall5578 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall5580 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall5582 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall5584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall5586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DATATYPE_in_builtInCall5603 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall5605 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall5607 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall5609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOUND_in_builtInCall5625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall5627 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_var_in_builtInCall5629 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall5631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IRI_in_builtInCall5647 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall5649 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall5651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall5653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_URI_in_builtInCall5669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall5671 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall5673 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall5675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BNODE_in_builtInCall5691 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall5694 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall5696 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall5698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BNODE_in_builtInCall5715 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000428L,0x000000000000000DL,0x000000000FFFF000L});
    public static final BitSet FOLLOW_nil_in_builtInCall5717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RAND_in_builtInCall5729 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000428L,0x000000000000000DL,0x000000000FFFF000L});
    public static final BitSet FOLLOW_nil_in_builtInCall5731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABS_in_builtInCall5743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall5745 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall5747 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall5749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CEIL_in_builtInCall5765 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall5767 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall5769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall5771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOOR_in_builtInCall5787 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall5789 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall5791 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall5793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_in_builtInCall5809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall5811 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall5813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall5815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONCAT_in_builtInCall5831 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000428L,0x000000000000000DL,0x000000000FFFF000L});
    public static final BitSet FOLLOW_expressionList_in_builtInCall5833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subStringExpression_in_builtInCall5849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_strReplaceExpression_in_builtInCall5861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRLEN_in_builtInCall5873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall5875 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall5877 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall5879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UCASE_in_builtInCall5895 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall5897 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall5899 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall5901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCASE_in_builtInCall5917 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall5919 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall5921 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall5923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENCODE_FOR_URI_in_builtInCall5939 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall5941 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall5943 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall5945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTAINS_in_builtInCall5961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall5963 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall5965 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall5967 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall5969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall5971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRSTARTS_in_builtInCall5989 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall5991 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall5993 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall5995 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall5997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall5999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRENDS_in_builtInCall6017 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6019 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall6021 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall6023 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall6025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRBEFORE_in_builtInCall6045 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6047 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall6049 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall6051 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall6053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRAFTER_in_builtInCall6073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6075 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall6077 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall6079 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall6081 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_YEAR_in_builtInCall6101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6103 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall6105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MONTH_in_builtInCall6123 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6125 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall6127 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DAY_in_builtInCall6145 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6147 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall6149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HOURS_in_builtInCall6167 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6169 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall6171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUTES_in_builtInCall6189 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6191 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall6193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SECONDS_in_builtInCall6211 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6213 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall6215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEZONE_in_builtInCall6233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6235 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall6237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TZ_in_builtInCall6255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6257 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall6259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOW_in_builtInCall6277 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000428L,0x000000000000000DL,0x000000000FFFF000L});
    public static final BitSet FOLLOW_nil_in_builtInCall6279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MD5_in_builtInCall6291 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6293 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall6295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHA1_in_builtInCall6313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6315 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall6317 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHA256_in_builtInCall6335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6337 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall6339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHA384_in_builtInCall6357 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6359 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall6361 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHA512_in_builtInCall6379 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6381 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall6383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_builtInCall6401 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000428L,0x000000000000000DL,0x000000000FFFF000L});
    public static final BitSet FOLLOW_expressionList_in_builtInCall6403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_builtInCall6419 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6421 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall6425 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall6427 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall6431 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall6433 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall6437 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRLANG_in_builtInCall6462 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6464 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall6466 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall6468 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall6470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRDT_in_builtInCall6490 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6492 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall6494 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall6496 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall6498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAMETERM_in_builtInCall6518 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6520 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall6522 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall6524 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall6526 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISIRI_in_builtInCall6546 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6548 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall6550 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISURI_in_builtInCall6568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6570 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall6572 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISBLANK_in_builtInCall6590 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6592 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall6594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISLITERAL_in_builtInCall6613 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6615 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall6617 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISNUMERIC_in_builtInCall6635 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6637 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_builtInCall6639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_regexExpression_in_builtInCall6657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_existsFunction_in_builtInCall6669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_notExistsFunction_in_builtInCall6681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEX_in_regexExpression6702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_regexExpression6704 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_regexExpression6706 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_regexExpression6708 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_regexExpression6710 = new BitSet(new long[]{0x0000000000000000L,0x0100000000001000L});
    public static final BitSet FOLLOW_COMMA_in_regexExpression6713 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_regexExpression6715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_regexExpression6719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUBSTR_in_subStringExpression6749 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_subStringExpression6751 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_subStringExpression6753 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_subStringExpression6755 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_subStringExpression6757 = new BitSet(new long[]{0x0000000000000000L,0x0100000000001000L});
    public static final BitSet FOLLOW_COMMA_in_subStringExpression6760 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_subStringExpression6762 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_subStringExpression6766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REPLACE_in_strReplaceExpression6796 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_strReplaceExpression6798 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_strReplaceExpression6800 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_strReplaceExpression6802 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_strReplaceExpression6804 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_strReplaceExpression6806 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_strReplaceExpression6808 = new BitSet(new long[]{0x0000000000000000L,0x0100000000001000L});
    public static final BitSet FOLLOW_COMMA_in_strReplaceExpression6811 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_strReplaceExpression6813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_strReplaceExpression6817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsFunction6847 = new BitSet(new long[]{0x0080000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_groupGraphPattern_in_existsFunction6849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_notExistsFunction6874 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_notExistsFunction6876 = new BitSet(new long[]{0x0080000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_groupGraphPattern_in_notExistsFunction6878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_aggregate6903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate6905 = new BitSet(new long[]{0x0000000000000000L,0xC0000000080005A8L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate6907 = new BitSet(new long[]{0x0000000000000000L,0xC0000000080004A8L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_ASTERISK_in_aggregate6911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_expression_in_aggregate6915 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate6918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_aggregate6941 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate6943 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000528L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate6945 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_aggregate6948 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate6950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_aggregate6969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate6971 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000528L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate6973 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_aggregate6976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate6978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_aggregate6997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate6999 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000528L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate7001 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_aggregate7004 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate7006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_aggregate7025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate7027 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000528L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate7029 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_aggregate7032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate7034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAMPLE_in_aggregate7053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate7055 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000528L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate7057 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_aggregate7060 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate7062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_CONCAT_in_aggregate7081 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate7083 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000528L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate7085 = new BitSet(new long[]{0x0000000000000000L,0xC000000008000428L,0xFFFFFFFFFFFFE00CL,0x0000000007FFF1FFL});
    public static final BitSet FOLLOW_expression_in_aggregate7088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001002L});
    public static final BitSet FOLLOW_SEMICOLON_in_aggregate7091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_SEPARATOR_in_aggregate7093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_EQUAL_in_aggregate7095 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000003C00000L});
    public static final BitSet FOLLOW_string_in_aggregate7097 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate7101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iriRef_in_iriRefOrFunction7136 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000428L,0x000000000000000DL,0x000000000FFFF000L});
    public static final BitSet FOLLOW_argList_in_iriRefOrFunction7138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_string_in_rdfLiteral7171 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000C00L});
    public static final BitSet FOLLOW_LANGTAG_in_rdfLiteral7174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REFERENCE_in_rdfLiteral7179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000028L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_iriRef_in_rdfLiteral7181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteralUnsigned_in_numericLiteral7215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteralPositive_in_numericLiteral7223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteralNegative_in_numericLiteral7231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_numericLiteralUnsigned0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_numericLiteralPositive0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_numericLiteralNegative0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_booleanLiteral0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_string0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IRI_REF_in_iriRef7414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prefixedName_in_iriRef7431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_prefixedName0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLANK_NODE_LABEL_in_blankNode7481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anon_in_blankNode7489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_SQUARE_BRACKET_in_anon7506 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_CLOSE_SQUARE_BRACKET_in_anon7508 = new BitSet(new long[]{0x0000000000000002L});

}